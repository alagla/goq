module: 'QuplaTests.yml'
# import Qupla

types: 
  # type Trit [1]
  Trit:
    vector: 1
    size: '1'
  # type Tryte [3]
  Tryte:
    vector: 3
    size: '3'
  # type Tiny [9]
  Tiny:
    vector: 9
    size: '9'
  # type Int [27]
  Int:
    vector: 27
    size: '27'
  # type Huge [81]
  Huge:
    vector: 81
    size: '81'
  # type Hash [243]
  Hash:
    vector: 243
    size: '243'
  # type Hash3 [729]
  Hash3:
    vector: 729
    size: '729'
  # type Hash9 [2187]
  Hash9:
    vector: 2187
    size: '2187'
  # type Signature [6561]
  Signature:
    vector: 6561
    size: '6561'
  # type Trit2 [2]
  Trit2:
    vector: 2
    size: '2'
  # type Trit4 [4]
  Trit4:
    vector: 4
    size: '4'
  # type Tryte2 [6]
  Tryte2:
    vector: 6
    size: '6'
  # type Tryte4 [12]
  Tryte4:
    vector: 12
    size: '12'
  # type Tiny2 [18]
  Tiny2:
    vector: 18
    size: '18'
  # type Tiny4 [36]
  Tiny4:
    vector: 36
    size: '36'
  # type Int2 [54]
  Int2:
    vector: 54
    size: '54'
  # type Int4 [108]
  Int4:
    vector: 108
    size: '108'
  # type Huge2 [162]
  Huge2:
    vector: 162
    size: '162'
  # type Huge4 [324]
  Huge4:
    vector: 324
    size: '324'
  # type Hash2 [486]
  Hash2:
    vector: 486
    size: '486'
  # type Hash4 [972]
  Hash4:
    vector: 972
    size: '972'
  # type Bool [Trit]
  Bool:
    vector: Trit
    size: '1'
  # type Carry [Trit]
  Carry:
    vector: Trit
    size: '1'
  # type TritCarry { ... }
  TritCarry:
    size: '*'
    fields: 
        value: 
          vector: Trit
          size: '1'
        carry: 
          vector: Carry
          size: '1'
  # type TinyFloat { ... }
  TinyFloat:
    size: '*'
    fields: 
        mantissa: 
          vector: Tiny
          size: '9'
        exponent: 
          vector: Tryte
          size: '3'
  # type Float { ... }
  Float:
    size: '*'
    fields: 
        mantissa: 
          vector: Tiny2
          size: '18'
        exponent: 
          vector: Tryte2
          size: '6'
  # type Double { ... }
  Double:
    size: '*'
    fields: 
        mantissa: 
          vector: Tiny4
          size: '36'
        exponent: 
          vector: Tiny
          size: '9'
  # type HugeFloat { ... }
  HugeFloat:
    size: '*'
    fields: 
        mantissa: 
          vector: Int2
          size: '54'
        exponent: 
          vector: Tiny2
          size: '18'
  # type Attachment { ... }
  Attachment:
    size: '*'
    fields: 
        timestamp: 
          vector: Int
          size: '27'
        timestampLowerBound: 
          vector: Int
          size: '27'
        timestampUpperBound: 
          vector: Int
          size: '27'
  # type Transaction { ... }
  Transaction:
    size: '*'
    fields: 
        signature: 
          vector: Signature
          size: '6561'
        extraDataDigest: 
          vector: Hash
          size: '243'
        address: 
          vector: Hash
          size: '243'
        value: 
          vector: Huge
          size: '81'
        issuanceTimestamp: 
          vector: Int
          size: '27'
        timelockLowerBound: 
          vector: Int
          size: '27'
        timelockUpperBound: 
          vector: Int
          size: '27'
        bundle: 
          vector: Huge
          size: '81'
        trunk: 
          vector: Hash
          size: '243'
        branch: 
          vector: Hash
          size: '243'
        tag: 
          vector: Huge
          size: '81'
        attachment: 
          vector: Attachment
          size: '81'
        nonce: 
          vector: Huge
          size: '81'
  # type TestFloat { ... }
  TestFloat:
    size: '*'
    fields: 
        mantissa: 
          vector: Tiny2
          size: '18'
        exponent: 
          vector: Tryte2
          size: '6'
luts: 
  # lut not
  not:
    lutTable:
      - '0 = 1'
      - '1 = 0'
  # lut and
  and:
    lutTable:
      - '00 = 0'
      - '01 = 0'
      - '10 = 0'
      - '11 = 1'
  # lut and3
  and3:
    lutTable:
      - '000 = 0'
      - '001 = 0'
      - '010 = 0'
      - '011 = 0'
      - '100 = 0'
      - '101 = 0'
      - '110 = 0'
      - '111 = 1'
  # lut or
  or:
    lutTable:
      - '00 = 0'
      - '01 = 1'
      - '10 = 1'
      - '11 = 1'
  # lut or3
  or3:
    lutTable:
      - '000 = 0'
      - '001 = 1'
      - '010 = 1'
      - '011 = 1'
      - '100 = 1'
      - '101 = 1'
      - '110 = 1'
      - '111 = 1'
  # lut xor
  xor:
    lutTable:
      - '00 = 0'
      - '01 = 1'
      - '10 = 1'
      - '11 = 0'
  # lut xor3
  xor3:
    lutTable:
      - '000 = 0'
      - '001 = 1'
      - '010 = 1'
      - '011 = 0'
      - '100 = 1'
      - '101 = 0'
      - '110 = 0'
      - '111 = 1'
  # lut nand
  nand:
    lutTable:
      - '00 = 1'
      - '01 = 1'
      - '10 = 1'
      - '11 = 0'
  # lut nand3
  nand3:
    lutTable:
      - '000 = 1'
      - '001 = 1'
      - '010 = 1'
      - '011 = 1'
      - '100 = 1'
      - '101 = 1'
      - '110 = 1'
      - '111 = 0'
  # lut nor
  nor:
    lutTable:
      - '00 = 1'
      - '01 = 0'
      - '10 = 0'
      - '11 = 0'
  # lut nor3
  nor3:
    lutTable:
      - '000 = 1'
      - '001 = 0'
      - '010 = 0'
      - '011 = 0'
      - '100 = 0'
      - '101 = 0'
      - '110 = 0'
      - '111 = 0'
  # lut xnor
  xnor:
    lutTable:
      - '00 = 1'
      - '01 = 0'
      - '10 = 0'
      - '11 = 1'
  # lut equal
  equal:
    lutTable:
      - '-- = 1'
      - '-0 = 0'
      - '-1 = 0'
      - '0- = 0'
      - '00 = 1'
      - '01 = 0'
      - '1- = 0'
      - '10 = 0'
      - '11 = 1'
  # lut isMin
  isMin:
    lutTable:
      - '- = 1'
      - '0 = 0'
      - '1 = 0'
  # lut isNegative
  isNegative:
    lutTable:
      - '- = 1'
      - '0 = 0'
      - '1 = 0'
  # lut isOne
  isOne:
    lutTable:
      - '- = 0'
      - '0 = 0'
      - '1 = 1'
  # lut isPositive
  isPositive:
    lutTable:
      - '- = 0'
      - '0 = 0'
      - '1 = 1'
  # lut isZero
  isZero:
    lutTable:
      - '- = 0'
      - '0 = 1'
      - '1 = 0'
  # lut notNegative
  notNegative:
    lutTable:
      - '- = 0'
      - '0 = 1'
      - '1 = 1'
  # lut notPositive
  notPositive:
    lutTable:
      - '- = 1'
      - '0 = 1'
      - '1 = 0'
  # lut notZero
  notZero:
    lutTable:
      - '- = 1'
      - '0 = 0'
      - '1 = 1'
  # lut cmp
  cmp:
    lutTable:
      - '-- = 0'
      - '0- = 1'
      - '1- = 1'
      - '-0 = -'
      - '00 = 0'
      - '10 = 1'
      - '-1 = -'
      - '01 = -'
      - '11 = 0'
  # lut isLess
  isLess:
    lutTable:
      - '- = 1'
      - '0 = 0'
      - '1 = 0'
  # lut isGreater
  isGreater:
    lutTable:
      - '- = 0'
      - '0 = 0'
      - '1 = 1'
  # lut isEqual
  isEqual:
    lutTable:
      - '- = 0'
      - '0 = 1'
      - '1 = 0'
  # lut notLess
  notLess:
    lutTable:
      - '- = 0'
      - '0 = 1'
      - '1 = 1'
  # lut notGreater
  notGreater:
    lutTable:
      - '- = 1'
      - '0 = 1'
      - '1 = 0'
  # lut notEqual
  notEqual:
    lutTable:
      - '- = 1'
      - '0 = 0'
      - '1 = 1'
  # lut even
  even:
    lutTable:
      - '--- = 0'
      - '0-- = 1'
      - '1-- = 0'
      - '-0- = 1'
      - '00- = 0'
      - '10- = 1'
      - '-1- = 0'
      - '01- = 1'
      - '11- = 0'
      - '--0 = 1'
      - '0-0 = 0'
      - '1-0 = 1'
      - '-00 = 0'
      - '000 = 1'
      - '100 = 0'
      - '-10 = 1'
      - '010 = 0'
      - '110 = 1'
      - '--1 = 0'
      - '0-1 = 1'
      - '1-1 = 0'
      - '-01 = 1'
      - '001 = 0'
      - '101 = 1'
      - '-11 = 0'
      - '011 = 1'
      - '111 = 0'
  # lut fullAdd
  fullAdd:
    lutTable:
      - '--- = 0-'
      - '--0 = 1-'
      - '--1 = -0'
      - '-0- = 1-'
      - '-00 = -0'
      - '-01 = 00'
      - '-1- = -0'
      - '-10 = 00'
      - '-11 = 10'
      - '0-- = 1-'
      - '0-0 = -0'
      - '0-1 = 00'
      - '00- = -0'
      - '000 = 00'
      - '001 = 10'
      - '01- = 00'
      - '010 = 10'
      - '011 = -1'
      - '1-- = -0'
      - '1-0 = 00'
      - '1-1 = 10'
      - '10- = 00'
      - '100 = 10'
      - '101 = -1'
      - '11- = 10'
      - '110 = -1'
      - '111 = 01'
  # lut fullMul
  fullMul:
    lutTable:
      - '-- = 1'
      - '-0 = 0'
      - '-1 = -'
      - '0- = 0'
      - '00 = 0'
      - '01 = 0'
      - '1- = -'
      - '10 = 0'
      - '11 = 1'
  # lut halfAdd
  halfAdd:
    lutTable:
      - '-- = 1-'
      - '-0 = -0'
      - '-1 = 00'
      - '0- = -0'
      - '00 = 00'
      - '01 = 10'
      - '1- = 00'
      - '10 = 10'
      - '11 = -1'
  # lut neg
  neg:
    lutTable:
      - '- = 1'
      - '0 = 0'
      - '1 = -'
  # lut sign
  sign:
    lutTable:
      - '--- = -'
      - '0-- = -'
      - '1-- = -'
      - '-0- = -'
      - '00- = -'
      - '10- = -'
      - '-1- = -'
      - '01- = -'
      - '11- = -'
      - '--0 = -'
      - '0-0 = -'
      - '1-0 = -'
      - '-00 = -'
      - '000 = 0'
      - '100 = 1'
      - '-10 = 1'
      - '010 = 1'
      - '110 = 1'
      - '--1 = 1'
      - '0-1 = 1'
      - '1-1 = 1'
      - '-01 = 1'
      - '001 = 1'
      - '101 = 1'
      - '-11 = 1'
      - '011 = 1'
      - '111 = 1'
  # lut unequal
  unequal:
    lutTable:
      - '-- = 0'
      - '-0 = 1'
      - '-1 = 1'
      - '0- = 1'
      - '00 = 0'
      - '01 = 1'
      - '1- = 1'
      - '10 = 1'
      - '11 = 0'
functions: 
# 
# func Trit all<Trit>(Trit val) {
#   return val
# }
  all_1:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: val
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 1
# 
# func Bool equal<Trit>(Trit lhs, Trit rhs) {
#   return equal[lhs, rhs]
# }
  equal_1:
    returnType: 
      ConstTypeName:
        typeName: Bool
        size: 1
    params:
      - 
        argName: lhs
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
      - 
        argName: rhs
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
    return: 
    # equal[lhs, rhs]
      LutExpr:
        name: equal
        args: 
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 1
# 
# func Trit cmp<Trit>(Trit lhs, Trit rhs) {
#   return cmp[lhs, rhs]
# }
  cmp_1:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: lhs
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
      - 
        argName: rhs
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
    return: 
    # cmp[lhs, rhs]
      LutExpr:
        name: cmp
        args: 
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 1
# 
# func Bool even<Trit>(Trit val) {
#   return even[val, 0, 0]
# }
  even_1:
    returnType: 
      ConstTypeName:
        typeName: Bool
        size: 1
    params:
      - 
        argName: val
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
    return: 
    # even[val, 0, 0]
      LutExpr:
        name: even
        args: 
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 1
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
# 
# func Bool even<Tryte>(Tryte val) {
#   return even[val[0], val[1], val[2]]
# }
  even_3:
    returnType: 
      ConstTypeName:
        typeName: Bool
        size: 1
    params:
      - 
        argName: val
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
    return: 
    # even[val[0], val[1], val[2]]
      LutExpr:
        name: even
        args: 
          - 
            SliceExpr:
              source: 'val[0]'
              var: val
              offset: 0
              size: 1
              start:
                ConstNumber:
                  value: 0
          - 
            SliceExpr:
              source: 'val[1]'
              var: val
              offset: 1
              size: 1
              start:
                ConstNumber:
                  value: 1
          - 
            SliceExpr:
              source: 'val[2]'
              var: val
              offset: 2
              size: 1
              start:
                ConstNumber:
                  value: 2
# 
# func TritCarry fullAdd<Trit>(Trit lhs, Trit rhs, Carry carry) {
#   return fullAdd[lhs, rhs, carry]
# }
  fullAdd_1:
    returnType: 
      ConstTypeName:
        typeName: TritCarry
        size: 2
        fields:
          value: 
            size: '1'
            offset: '0'
          carry: 
            size: '1'
            offset: '1'
    params:
      - 
        argName: lhs
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
      - 
        argName: rhs
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    return: 
    # fullAdd[lhs, rhs, carry]
      LutExpr:
        name: fullAdd
        args: 
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
# 
# func TritCarry fullMul<Trit>(Trit lhs, Trit rhs) {
#   return fullMul[lhs, rhs] & 0
# }
  fullMul_1:
    returnType: 
      ConstTypeName:
        typeName: TritCarry
        size: 2
        fields:
          value: 
            size: '1'
            offset: '0'
          carry: 
            size: '1'
            offset: '1'
    params:
      - 
        argName: lhs
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
      - 
        argName: rhs
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
    return: 
    # fullMul[lhs, rhs] & 0
      ConcatExpr:
        source: 'fullMul[lhs, rhs] & 0'
        lhs: 
          LutExpr:
            name: fullMul
            args: 
              - 
                SliceExpr:
                  source: 'lhs'
                  var: lhs
                  offset: 0
                  size: 1
              - 
                SliceExpr:
                  source: 'rhs'
                  var: rhs
                  offset: 0
                  size: 1
        rhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
# 
# func TritCarry fullMulNonZero<Trit>(Trit lhs, Trit rhs) {
#   return fullMul[lhs, rhs] & 0
# }
  fullMulNonZero_1:
    returnType: 
      ConstTypeName:
        typeName: TritCarry
        size: 2
        fields:
          value: 
            size: '1'
            offset: '0'
          carry: 
            size: '1'
            offset: '1'
    params:
      - 
        argName: lhs
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
      - 
        argName: rhs
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
    return: 
    # fullMul[lhs, rhs] & 0
      ConcatExpr:
        source: 'fullMul[lhs, rhs] & 0'
        lhs: 
          LutExpr:
            name: fullMul
            args: 
              - 
                SliceExpr:
                  source: 'lhs'
                  var: lhs
                  offset: 0
                  size: 1
              - 
                SliceExpr:
                  source: 'rhs'
                  var: rhs
                  offset: 0
                  size: 1
        rhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
# 
# func TritCarry halfAdd<Trit>(Trit val, Carry carry) {
#   return halfAdd[val, carry]
# }
  halfAdd_1:
    returnType: 
      ConstTypeName:
        typeName: TritCarry
        size: 2
        fields:
          value: 
            size: '1'
            offset: '0'
          carry: 
            size: '1'
            offset: '1'
    params:
      - 
        argName: val
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    return: 
    # halfAdd[val, carry]
      LutExpr:
        name: halfAdd
        args: 
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
# 
# func Trit neg<Trit>(Trit val) {
#   return neg[val]
# }
  neg_1:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: val
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
    return: 
    # neg[val]
      LutExpr:
        name: neg
        args: 
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 1
# 
# func Trit sign<Trit>(Trit val) {
#   return val
# }
  sign_1:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: val
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 1
# 
# func Bool unequal<Trit>(Trit lhs, Trit rhs) {
#   return unequal[lhs, rhs]
# }
  unequal_1:
    returnType: 
      ConstTypeName:
        typeName: Bool
        size: 1
    params:
      - 
        argName: lhs
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
      - 
        argName: rhs
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
    return: 
    # unequal[lhs, rhs]
      LutExpr:
        name: unequal
        args: 
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 1
# 
# func Tryte all<Tryte>(Trit val) {
#   val0 = all<A>(val)
#   val1 = all<B>(val)
#   val2 = all<C>(val)
#   return val0 & val1 & val2
# }
  all_3:
    returnType: 
      ConstTypeName:
        typeName: Tryte
        size: 3
    params:
      - 
        argName: val
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
    assigns: 
      val0:
        FuncExpr:
          source: 'all<A>(val)'
          name: all_1
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 1
      val1:
        FuncExpr:
          source: 'all<B>(val)'
          name: all_1
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 1
      val2:
        FuncExpr:
          source: 'all<C>(val)'
          name: all_1
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 1
    return: 
    # val0 & val1 & val2
      ConcatExpr:
        source: 'val0 & val1 & val2'
        lhs: 
          ConcatExpr:
            source: 'val0 & val1'
            lhs: 
              SliceExpr:
                source: 'val0'
                var: val0
                offset: 0
                size: 1
            rhs: 
              SliceExpr:
                source: 'val1'
                var: val1
                offset: 0
                size: 1
        rhs: 
          SliceExpr:
            source: 'val2'
            var: val2
            offset: 0
            size: 1
# 
# func Tiny all<Tiny>(Trit val) {
#   val0 = all<A>(val)
#   val1 = all<B>(val)
#   val2 = all<C>(val)
#   return val0 & val1 & val2
# }
  all_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
    assigns: 
      val0:
        FuncExpr:
          source: 'all<A>(val)'
          name: all_3
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 1
      val1:
        FuncExpr:
          source: 'all<B>(val)'
          name: all_3
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 1
      val2:
        FuncExpr:
          source: 'all<C>(val)'
          name: all_3
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 1
    return: 
    # val0 & val1 & val2
      ConcatExpr:
        source: 'val0 & val1 & val2'
        lhs: 
          ConcatExpr:
            source: 'val0 & val1'
            lhs: 
              SliceExpr:
                source: 'val0'
                var: val0
                offset: 0
                size: 3
            rhs: 
              SliceExpr:
                source: 'val1'
                var: val1
                offset: 0
                size: 3
        rhs: 
          SliceExpr:
            source: 'val2'
            var: val2
            offset: 0
            size: 3
# 
# func Int all<Int>(Trit val) {
#   val0 = all<A>(val)
#   val1 = all<B>(val)
#   val2 = all<C>(val)
#   return val0 & val1 & val2
# }
  all_27:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
    assigns: 
      val0:
        FuncExpr:
          source: 'all<A>(val)'
          name: all_9
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 1
      val1:
        FuncExpr:
          source: 'all<B>(val)'
          name: all_9
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 1
      val2:
        FuncExpr:
          source: 'all<C>(val)'
          name: all_9
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 1
    return: 
    # val0 & val1 & val2
      ConcatExpr:
        source: 'val0 & val1 & val2'
        lhs: 
          ConcatExpr:
            source: 'val0 & val1'
            lhs: 
              SliceExpr:
                source: 'val0'
                var: val0
                offset: 0
                size: 9
            rhs: 
              SliceExpr:
                source: 'val1'
                var: val1
                offset: 0
                size: 9
        rhs: 
          SliceExpr:
            source: 'val2'
            var: val2
            offset: 0
            size: 9
# 
# func Huge all<Huge>(Trit val) {
#   val0 = all<A>(val)
#   val1 = all<B>(val)
#   val2 = all<C>(val)
#   return val0 & val1 & val2
# }
  all_81:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
    assigns: 
      val0:
        FuncExpr:
          source: 'all<A>(val)'
          name: all_27
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 1
      val1:
        FuncExpr:
          source: 'all<B>(val)'
          name: all_27
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 1
      val2:
        FuncExpr:
          source: 'all<C>(val)'
          name: all_27
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 1
    return: 
    # val0 & val1 & val2
      ConcatExpr:
        source: 'val0 & val1 & val2'
        lhs: 
          ConcatExpr:
            source: 'val0 & val1'
            lhs: 
              SliceExpr:
                source: 'val0'
                var: val0
                offset: 0
                size: 27
            rhs: 
              SliceExpr:
                source: 'val1'
                var: val1
                offset: 0
                size: 27
        rhs: 
          SliceExpr:
            source: 'val2'
            var: val2
            offset: 0
            size: 27
# 
# func Transaction arcmap<Hash, Transaction>(Trit cmd, Hash key, Transaction value) {
#   param = Traversal{
#     cmd = cmd
#     key = key
#     value = value
#   }
#   return arcTraverse<Hash, Transaction>(param)
# }
  arcmap_243_8019:
    returnType: 
      ConstTypeName:
        typeName: Transaction
        size: 8019
        fields:
          signature: 
            size: '6561'
            offset: '0'
          extraDataDigest: 
            size: '243'
            offset: '6561'
          address: 
            size: '243'
            offset: '6804'
          value: 
            size: '81'
            offset: '7047'
          issuanceTimestamp: 
            size: '27'
            offset: '7128'
          timelockLowerBound: 
            size: '27'
            offset: '7155'
          timelockUpperBound: 
            size: '27'
            offset: '7182'
          bundle: 
            size: '81'
            offset: '7209'
          trunk: 
            size: '243'
            offset: '7290'
          branch: 
            size: '243'
            offset: '7533'
          tag: 
            size: '81'
            offset: '7776'
          attachment: 
            size: '81'
            offset: '7857'
          nonce: 
            size: '81'
            offset: '7938'
    params:
      - 
        argName: cmd
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
      - 
        argName: key
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: value
        size: 8019
        type: 
          ConstTypeName:
            typeName: Transaction
            size: 8019
            fields:
              signature: 
                size: '6561'
                offset: '0'
              extraDataDigest: 
                size: '243'
                offset: '6561'
              address: 
                size: '243'
                offset: '6804'
              value: 
                size: '81'
                offset: '7047'
              issuanceTimestamp: 
                size: '27'
                offset: '7128'
              timelockLowerBound: 
                size: '27'
                offset: '7155'
              timelockUpperBound: 
                size: '27'
                offset: '7182'
              bundle: 
                size: '81'
                offset: '7209'
              trunk: 
                size: '243'
                offset: '7290'
              branch: 
                size: '243'
                offset: '7533'
              tag: 
                size: '81'
                offset: '7776'
              attachment: 
                size: '81'
                offset: '7857'
              nonce: 
                size: '81'
                offset: '7938'
    assigns: 
      param:
        TypeExpr:
          source: 'Traversal{ /   cmd = cmd /   key = key /   value = value / }'
          type: 
            ConstTypeName:
              typeName: Traversal
              size: 8263
              fields:
                cmd: 
                  size: '1'
                  offset: '0'
                key: 
                  size: '243'
                  offset: '1'
                value: 
                  size: '8019'
                  offset: '244'
          fieldValues: 
            cmd:
              SliceExpr:
                source: 'cmd'
                var: cmd
                offset: 0
                size: 1
            key:
              SliceExpr:
                source: 'key'
                var: key
                offset: 0
                size: 243
            value:
              SliceExpr:
                source: 'value'
                var: value
                offset: 0
                size: 8019
    return: 
    # arcTraverse<Hash, Transaction>(param)
      FuncExpr:
        source: 'arcTraverse<Hash, Transaction>(param)'
        name: arcTraverse_243_8019
        args:
        - 
          SliceExpr:
            source: 'param'
            var: param
            offset: 0
            size: 8263
# 
# func Transaction arcTraverse<Hash, Transaction>(Traversal param) {
#   keyZero = isZero[sign<Hash>(param.key)]
#   keyTrit = param.key[0]
#   return keyZero ? arcLeaf<Hash, Transaction>(param) : isOne[keyTrit] ? arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param)) : isZero[keyTrit] ? arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param)) : isMin[keyTrit] ? arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param)) : null
# }
  arcTraverse_243_8019:
    returnType: 
      ConstTypeName:
        typeName: Transaction
        size: 8019
        fields:
          signature: 
            size: '6561'
            offset: '0'
          extraDataDigest: 
            size: '243'
            offset: '6561'
          address: 
            size: '243'
            offset: '6804'
          value: 
            size: '81'
            offset: '7047'
          issuanceTimestamp: 
            size: '27'
            offset: '7128'
          timelockLowerBound: 
            size: '27'
            offset: '7155'
          timelockUpperBound: 
            size: '27'
            offset: '7182'
          bundle: 
            size: '81'
            offset: '7209'
          trunk: 
            size: '243'
            offset: '7290'
          branch: 
            size: '243'
            offset: '7533'
          tag: 
            size: '81'
            offset: '7776'
          attachment: 
            size: '81'
            offset: '7857'
          nonce: 
            size: '81'
            offset: '7938'
    params:
      - 
        argName: param
        size: 8263
        type: 
          ConstTypeName:
            typeName: Traversal
            size: 8263
            fields:
              cmd: 
                size: '1'
                offset: '0'
              key: 
                size: '243'
                offset: '1'
              value: 
                size: '8019'
                offset: '244'
    assigns: 
      keyZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Hash>(param.key)'
                name: sign_243
                args:
                - 
                  SliceExpr:
                    source: 'param.key'
                    var: param
                    offset: 1
                    size: 243
                    fields: 
                      - key
      keyTrit:
        SliceExpr:
          source: 'param.key[0]'
          var: param
          offset: 1
          size: 1
          fields: 
            - key
          start:
            ConstNumber:
              value: 0
    return: 
    # keyZero ? arcLeaf<Hash, Transaction>(param) : isOne[keyTrit] ? arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param)) : isZero[keyTrit] ? arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param)) : isMin[keyTrit] ? arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param)) : null
      CondExpr:
        source: 'keyZero ? arcLeaf<Hash, Transaction>(param) : isOne[keyTrit] ? arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param)) : isZero[keyTrit] ? arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param)) : isMin[keyTrit] ? arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param)) : null'
        if: 
          SliceExpr:
            source: 'keyZero'
            var: keyZero
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'arcLeaf<Hash, Transaction>(param)'
            name: arcLeaf_243_8019
            args:
            - 
              SliceExpr:
                source: 'param'
                var: param
                offset: 0
                size: 8263
        else:
          CondExpr:
            source: 'isOne[keyTrit] ? arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param)) : isZero[keyTrit] ? arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param)) : isMin[keyTrit] ? arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param)) : null'
            if: 
              LutExpr:
                name: isOne
                args: 
                  - 
                    SliceExpr:
                      source: 'keyTrit'
                      var: keyTrit
                      offset: 0
                      size: 1
            then: 
              FuncExpr:
                source: 'arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param))'
                name: arcTraverse_243_8019
                args:
                - 
                  FuncExpr:
                    source: 'arcTraverseNext<Hash, Transaction>(keyZero, param)'
                    name: arcTraverseNext_243_8019
                    args:
                    - 
                      SliceExpr:
                        source: 'keyZero'
                        var: keyZero
                        offset: 0
                        size: 1
                    - 
                      SliceExpr:
                        source: 'param'
                        var: param
                        offset: 0
                        size: 8263
            else:
              CondExpr:
                source: 'isZero[keyTrit] ? arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param)) : isMin[keyTrit] ? arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param)) : null'
                if: 
                  LutExpr:
                    name: isZero
                    args: 
                      - 
                        SliceExpr:
                          source: 'keyTrit'
                          var: keyTrit
                          offset: 0
                          size: 1
                then: 
                  FuncExpr:
                    source: 'arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param))'
                    name: arcTraverse_243_8019
                    args:
                    - 
                      FuncExpr:
                        source: 'arcTraverseNext<Hash, Transaction>(keyZero, param)'
                        name: arcTraverseNext_243_8019
                        args:
                        - 
                          SliceExpr:
                            source: 'keyZero'
                            var: keyZero
                            offset: 0
                            size: 1
                        - 
                          SliceExpr:
                            source: 'param'
                            var: param
                            offset: 0
                            size: 8263
                else:
                  CondExpr:
                    source: 'isMin[keyTrit] ? arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param)) : null'
                    if: 
                      LutExpr:
                        name: isMin
                        args: 
                          - 
                            SliceExpr:
                              source: 'keyTrit'
                              var: keyTrit
                              offset: 0
                              size: 1
                    then: 
                      FuncExpr:
                        source: 'arcTraverse<Hash, Transaction>(arcTraverseNext<Hash, Transaction>(keyZero, param))'
                        name: arcTraverse_243_8019
                        args:
                        - 
                          FuncExpr:
                            source: 'arcTraverseNext<Hash, Transaction>(keyZero, param)'
                            name: arcTraverseNext_243_8019
                            args:
                            - 
                              SliceExpr:
                                source: 'keyZero'
                                var: keyZero
                                offset: 0
                                size: 1
                            - 
                              SliceExpr:
                                source: 'param'
                                var: param
                                offset: 0
                                size: 8263
                    else:
                      NullExpr: ''
# 
# func Traversal arcTraverseNext<Hash, Transaction>(Bool keyZero, Traversal param) {
#   return not[keyZero] ? Traversal{
#     cmd = param.cmd
#     key = lshift<Hash>(param.key)
#     value = param.value
#   } : null
# }
  arcTraverseNext_243_8019:
    returnType: 
      ConstTypeName:
        typeName: Traversal
        size: 8263
        fields:
          cmd: 
            size: '1'
            offset: '0'
          key: 
            size: '243'
            offset: '1'
          value: 
            size: '8019'
            offset: '244'
    params:
      - 
        argName: keyZero
        size: 1
        type: 
          ConstTypeName:
            typeName: Bool
            size: 1
      - 
        argName: param
        size: 8263
        type: 
          ConstTypeName:
            typeName: Traversal
            size: 8263
            fields:
              cmd: 
                size: '1'
                offset: '0'
              key: 
                size: '243'
                offset: '1'
              value: 
                size: '8019'
                offset: '244'
    return: 
    # not[keyZero] ? Traversal{
    #   cmd = param.cmd
    #   key = lshift<Hash>(param.key)
    #   value = param.value
    # } : null
      CondExpr:
        source: 'not[keyZero] ? Traversal{
  cmd = param.cmd
  key = lshift<Hash>(param.key)
  value = param.value
} : null'
        if: 
          LutExpr:
            name: not
            args: 
              - 
                SliceExpr:
                  source: 'keyZero'
                  var: keyZero
                  offset: 0
                  size: 1
        then: 
          TypeExpr:
            source: 'Traversal{ /   cmd = param.cmd /   key = lshift<Hash>(param.key) /   value = param.value / }'
            type: 
              ConstTypeName:
                typeName: Traversal
                size: 8263
                fields:
                  cmd: 
                    size: '1'
                    offset: '0'
                  key: 
                    size: '243'
                    offset: '1'
                  value: 
                    size: '8019'
                    offset: '244'
            fieldValues: 
              cmd:
                SliceExpr:
                  source: 'param.cmd'
                  var: param
                  offset: 0
                  size: 1
                  fields: 
                    - cmd
              key:
                FuncExpr:
                  source: 'lshift<Hash>(param.key)'
                  name: lshift_243
                  args:
                  - 
                    SliceExpr:
                      source: 'param.key'
                      var: param
                      offset: 1
                      size: 243
                      fields: 
                        - key
              value:
                SliceExpr:
                  source: 'param.value'
                  var: param
                  offset: 244
                  size: 8019
                  fields: 
                    - value
        else:
          NullExpr: ''
# 
# func Transaction arcLeaf<Hash, Transaction>(Traversal param) {
#   state Arc arc
#   oldValue = arc
#   cmd = param.cmd
#   arc = isZero[cmd] ? oldValue : isOne[cmd] ? arcLeafSet<Hash, Transaction>(oldValue, param.value) : isMin[cmd] ? arcLeafRemove<Hash, Transaction>(oldValue) : null
#   return oldValue.value
# }
  arcLeaf_243_8019:
    returnType: 
      ConstTypeName:
        typeName: Transaction
        size: 8019
        fields:
          signature: 
            size: '6561'
            offset: '0'
          extraDataDigest: 
            size: '243'
            offset: '6561'
          address: 
            size: '243'
            offset: '6804'
          value: 
            size: '81'
            offset: '7047'
          issuanceTimestamp: 
            size: '27'
            offset: '7128'
          timelockLowerBound: 
            size: '27'
            offset: '7155'
          timelockUpperBound: 
            size: '27'
            offset: '7182'
          bundle: 
            size: '81'
            offset: '7209'
          trunk: 
            size: '243'
            offset: '7290'
          branch: 
            size: '243'
            offset: '7533'
          tag: 
            size: '81'
            offset: '7776'
          attachment: 
            size: '81'
            offset: '7857'
          nonce: 
            size: '81'
            offset: '7938'
    params:
      - 
        argName: param
        size: 8263
        type: 
          ConstTypeName:
            typeName: Traversal
            size: 8263
            fields:
              cmd: 
                size: '1'
                offset: '0'
              key: 
                size: '243'
                offset: '1'
              value: 
                size: '8019'
                offset: '244'
    state: 
      arc: 
        size: 8046
        type: Arc
    assigns: 
      oldValue:
        SliceExpr:
          source: 'arc'
          var: arc
          offset: 0
          size: 8046
      cmd:
        SliceExpr:
          source: 'param.cmd'
          var: param
          offset: 0
          size: 1
          fields: 
            - cmd
      arc:
        CondExpr:
          source: 'isZero[cmd] ? oldValue : isOne[cmd] ? arcLeafSet<Hash, Transaction>(oldValue, param.value) : isMin[cmd] ? arcLeafRemove<Hash, Transaction>(oldValue) : null'
          if: 
            LutExpr:
              name: isZero
              args: 
                - 
                  SliceExpr:
                    source: 'cmd'
                    var: cmd
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'oldValue'
              var: oldValue
              offset: 0
              size: 8046
          else:
            CondExpr:
              source: 'isOne[cmd] ? arcLeafSet<Hash, Transaction>(oldValue, param.value) : isMin[cmd] ? arcLeafRemove<Hash, Transaction>(oldValue) : null'
              if: 
                LutExpr:
                  name: isOne
                  args: 
                    - 
                      SliceExpr:
                        source: 'cmd'
                        var: cmd
                        offset: 0
                        size: 1
              then: 
                FuncExpr:
                  source: 'arcLeafSet<Hash, Transaction>(oldValue, param.value)'
                  name: arcLeafSet_243_8019
                  args:
                  - 
                    SliceExpr:
                      source: 'oldValue'
                      var: oldValue
                      offset: 0
                      size: 8046
                  - 
                    SliceExpr:
                      source: 'param.value'
                      var: param
                      offset: 244
                      size: 8019
                      fields: 
                        - value
              else:
                CondExpr:
                  source: 'isMin[cmd] ? arcLeafRemove<Hash, Transaction>(oldValue) : null'
                  if: 
                    LutExpr:
                      name: isMin
                      args: 
                        - 
                          SliceExpr:
                            source: 'cmd'
                            var: cmd
                            offset: 0
                            size: 1
                  then: 
                    FuncExpr:
                      source: 'arcLeafRemove<Hash, Transaction>(oldValue)'
                      name: arcLeafRemove_243_8019
                      args:
                      - 
                        SliceExpr:
                          source: 'oldValue'
                          var: oldValue
                          offset: 0
                          size: 8046
                  else:
                    NullExpr: ''
    return: 
    # oldValue.value
      SliceExpr:
        source: 'oldValue.value'
        var: oldValue
        offset: 0
        size: 8019
        fields: 
          - value
# 
# func Arc arcLeafSet<Hash, Transaction>(Arc arc, Transaction value) {
#   return Arc{
#     value = value
#     count = incr<Int>(arc.count)
#   }
# }
  arcLeafSet_243_8019:
    returnType: 
      ConstTypeName:
        typeName: Arc
        size: 8046
        fields:
          value: 
            size: '8019'
            offset: '0'
          count: 
            size: '27'
            offset: '8019'
    params:
      - 
        argName: arc
        size: 8046
        type: 
          ConstTypeName:
            typeName: Arc
            size: 8046
            fields:
              value: 
                size: '8019'
                offset: '0'
              count: 
                size: '27'
                offset: '8019'
      - 
        argName: value
        size: 8019
        type: 
          ConstTypeName:
            typeName: Transaction
            size: 8019
            fields:
              signature: 
                size: '6561'
                offset: '0'
              extraDataDigest: 
                size: '243'
                offset: '6561'
              address: 
                size: '243'
                offset: '6804'
              value: 
                size: '81'
                offset: '7047'
              issuanceTimestamp: 
                size: '27'
                offset: '7128'
              timelockLowerBound: 
                size: '27'
                offset: '7155'
              timelockUpperBound: 
                size: '27'
                offset: '7182'
              bundle: 
                size: '81'
                offset: '7209'
              trunk: 
                size: '243'
                offset: '7290'
              branch: 
                size: '243'
                offset: '7533'
              tag: 
                size: '81'
                offset: '7776'
              attachment: 
                size: '81'
                offset: '7857'
              nonce: 
                size: '81'
                offset: '7938'
    return: 
    # Arc{
    #   value = value
    #   count = incr<Int>(arc.count)
    # }
      TypeExpr:
        source: 'Arc{ /   value = value /   count = incr<Int>(arc.count) / }'
        type: 
          ConstTypeName:
            typeName: Arc
            size: 8046
            fields:
              value: 
                size: '8019'
                offset: '0'
              count: 
                size: '27'
                offset: '8019'
        fieldValues: 
          value:
            SliceExpr:
              source: 'value'
              var: value
              offset: 0
              size: 8019
          count:
            FuncExpr:
              source: 'incr<Int>(arc.count)'
              name: incr_27
              args:
              - 
                SliceExpr:
                  source: 'arc.count'
                  var: arc
                  offset: 8019
                  size: 27
                  fields: 
                    - count
# 
# func Arc arcLeafRemove<Hash, Transaction>(Arc arc) {
#   count = decr<Int>(arc.count)
#   sign = sign<Int>(count)
#   return isZero[sign] ? 0 : isPositive[sign] ? Arc{
#     value = arc.value
#     count = count
#   } : null
# }
  arcLeafRemove_243_8019:
    returnType: 
      ConstTypeName:
        typeName: Arc
        size: 8046
        fields:
          value: 
            size: '8019'
            offset: '0'
          count: 
            size: '27'
            offset: '8019'
    params:
      - 
        argName: arc
        size: 8046
        type: 
          ConstTypeName:
            typeName: Arc
            size: 8046
            fields:
              value: 
                size: '8019'
                offset: '0'
              count: 
                size: '27'
                offset: '8019'
    assigns: 
      count:
        FuncExpr:
          source: 'decr<Int>(arc.count)'
          name: decr_27
          args:
          - 
            SliceExpr:
              source: 'arc.count'
              var: arc
              offset: 8019
              size: 27
              fields: 
                - count
      sign:
        FuncExpr:
          source: 'sign<Int>(count)'
          name: sign_27
          args:
          - 
            SliceExpr:
              source: 'count'
              var: count
              offset: 0
              size: 27
    return: 
    # isZero[sign] ? 0 : isPositive[sign] ? Arc{
    #   value = arc.value
    #   count = count
    # } : null
      CondExpr:
        source: 'isZero[sign] ? 0 : isPositive[sign] ? Arc{
  value = arc.value
  count = count
} : null'
        if: 
          LutExpr:
            name: isZero
            args: 
              - 
                SliceExpr:
                  source: 'sign'
                  var: sign
                  offset: 0
                  size: 1
        then: 
          ValueExpr:
              value: '0'
              trits
              trytes
        else:
          CondExpr:
            source: 'isPositive[sign] ? Arc{
  value = arc.value
  count = count
} : null'
            if: 
              LutExpr:
                name: isPositive
                args: 
                  - 
                    SliceExpr:
                      source: 'sign'
                      var: sign
                      offset: 0
                      size: 1
            then: 
              TypeExpr:
                source: 'Arc{ /   value = arc.value /   count = count / }'
                type: 
                  ConstTypeName:
                    typeName: Arc
                    size: 8046
                    fields:
                      value: 
                        size: '8019'
                        offset: '0'
                      count: 
                        size: '27'
                        offset: '8019'
                fieldValues: 
                  value:
                    SliceExpr:
                      source: 'arc.value'
                      var: arc
                      offset: 0
                      size: 8019
                      fields: 
                        - value
                  count:
                    SliceExpr:
                      source: 'count'
                      var: count
                      offset: 0
                      size: 27
            else:
              NullExpr: ''
# 
# func Trit sign<Hash>(Hash val) {
#   val0 = sign<A>(val[0 : A])
#   val1 = sign<B>(val[A : B])
#   val2 = sign<C>(val[A + B : C])
#   return sign[val0, val1, val2]
# }
  sign_243:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
    assigns: 
      val0:
        FuncExpr:
          source: 'sign<A>(val[0 : A])'
          name: sign_81
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 81
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 81
      val1:
        FuncExpr:
          source: 'sign<B>(val[A : B])'
          name: sign_81
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 81
              size: 81
              start:
                ConstTypeName:
                  typeName: A
                  size: 81
              end:
                ConstTypeName:
                  typeName: B
                  size: 81
      val2:
        FuncExpr:
          source: 'sign<C>(val[A + B : C])'
          name: sign_81
          args:
          - 
            SliceExpr:
              source: 'val[A + B : C]'
              var: val
              offset: 162
              size: 81
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 81
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 81
              end:
                ConstTypeName:
                  typeName: C
                  size: 81
    return: 
    # sign[val0, val1, val2]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func Trit sign<A>(A val) {
#   val0 = sign<A>(val[0 : A])
#   val1 = sign<B>(val[A : B])
#   val2 = sign<C>(val[A + B : C])
#   return sign[val0, val1, val2]
# }
  sign_81:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: A
            size: 81
    assigns: 
      val0:
        FuncExpr:
          source: 'sign<A>(val[0 : A])'
          name: sign_27
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 27
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 27
      val1:
        FuncExpr:
          source: 'sign<B>(val[A : B])'
          name: sign_27
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 27
              size: 27
              start:
                ConstTypeName:
                  typeName: A
                  size: 27
              end:
                ConstTypeName:
                  typeName: B
                  size: 27
      val2:
        FuncExpr:
          source: 'sign<C>(val[A + B : C])'
          name: sign_27
          args:
          - 
            SliceExpr:
              source: 'val[A + B : C]'
              var: val
              offset: 54
              size: 27
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 27
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 27
              end:
                ConstTypeName:
                  typeName: C
                  size: 27
    return: 
    # sign[val0, val1, val2]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func Trit sign<A>(A val) {
#   val0 = sign<A>(val[0 : A])
#   val1 = sign<B>(val[A : B])
#   val2 = sign<C>(val[A + B : C])
#   return sign[val0, val1, val2]
# }
  sign_27:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: A
            size: 27
    assigns: 
      val0:
        FuncExpr:
          source: 'sign<A>(val[0 : A])'
          name: sign_9
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
      val1:
        FuncExpr:
          source: 'sign<B>(val[A : B])'
          name: sign_9
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
      val2:
        FuncExpr:
          source: 'sign<C>(val[A + B : C])'
          name: sign_9
          args:
          - 
            SliceExpr:
              source: 'val[A + B : C]'
              var: val
              offset: 18
              size: 9
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 9
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 9
              end:
                ConstTypeName:
                  typeName: C
                  size: 9
    return: 
    # sign[val0, val1, val2]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func Trit sign<A>(A val) {
#   val0 = sign<A>(val[0 : A])
#   val1 = sign<B>(val[A : B])
#   val2 = sign<C>(val[A + B : C])
#   return sign[val0, val1, val2]
# }
  sign_9:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: A
            size: 9
    assigns: 
      val0:
        FuncExpr:
          source: 'sign<A>(val[0 : A])'
          name: sign_3
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
      val1:
        FuncExpr:
          source: 'sign<B>(val[A : B])'
          name: sign_3
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
      val2:
        FuncExpr:
          source: 'sign<C>(val[A + B : C])'
          name: sign_3
          args:
          - 
            SliceExpr:
              source: 'val[A + B : C]'
              var: val
              offset: 6
              size: 3
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 3
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 3
              end:
                ConstTypeName:
                  typeName: C
                  size: 3
    return: 
    # sign[val0, val1, val2]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func Trit sign<A>(A val) {
#   val0 = sign<A>(val[0 : A])
#   val1 = sign<B>(val[A : B])
#   val2 = sign<C>(val[A + B : C])
#   return sign[val0, val1, val2]
# }
  sign_3:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: val
        size: 3
        type: 
          ConstTypeName:
            typeName: A
            size: 3
    assigns: 
      val0:
        FuncExpr:
          source: 'sign<A>(val[0 : A])'
          name: sign_1
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 1
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 1
      val1:
        FuncExpr:
          source: 'sign<B>(val[A : B])'
          name: sign_1
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 1
              size: 1
              start:
                ConstTypeName:
                  typeName: A
                  size: 1
              end:
                ConstTypeName:
                  typeName: B
                  size: 1
      val2:
        FuncExpr:
          source: 'sign<C>(val[A + B : C])'
          name: sign_1
          args:
          - 
            SliceExpr:
              source: 'val[A + B : C]'
              var: val
              offset: 2
              size: 1
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 1
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 1
              end:
                ConstTypeName:
                  typeName: C
                  size: 1
    return: 
    # sign[val0, val1, val2]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func Int incr<Int>(Int val) {
#   halfSum = halfAdd<Int>(val, 1)
#   return halfSum.value
# }
  incr_27:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
    assigns: 
      halfSum:
        FuncExpr:
          source: 'halfAdd<Int>(val, 1)'
          name: halfAdd_27
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 27
          - 
            ValueExpr:
                value: '1'
                trits: '1'
                trytes: 'A'
    return: 
    # halfSum.value
      SliceExpr:
        source: 'halfSum.value'
        var: halfSum
        offset: 0
        size: 27
        fields: 
          - value
# 
# func TCarry halfAdd<Int>(Int val, Carry carry) {
#   add0 = halfAdd<A>(val[0 : A], carry)
#   add1 = halfAdd<B>(val[A : B], add0.carry)
#   add2 = halfAdd<C>(val[A + B : C], add1.carry)
#   return add0.value & add1.value & add2
# }
  halfAdd_27:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 28
        fields:
          value: 
            size: '27'
            offset: '0'
          carry: 
            size: '1'
            offset: '27'
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'halfAdd<A>(val[0 : A], carry)'
          name: halfAdd_9
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'halfAdd<B>(val[A : B], add0.carry)'
          name: halfAdd_9
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 9
              size: 1
              fields: 
                - carry
      add2:
        FuncExpr:
          source: 'halfAdd<C>(val[A + B : C], add1.carry)'
          name: halfAdd_9
          args:
          - 
            SliceExpr:
              source: 'val[A + B : C]'
              var: val
              offset: 18
              size: 9
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 9
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 9
              end:
                ConstTypeName:
                  typeName: C
                  size: 9
          - 
            SliceExpr:
              source: 'add1.carry'
              var: add1
              offset: 9
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1.value & add2
      ConcatExpr:
        source: 'add0.value & add1.value & add2'
        lhs: 
          ConcatExpr:
            source: 'add0.value & add1.value'
            lhs: 
              SliceExpr:
                source: 'add0.value'
                var: add0
                offset: 0
                size: 9
                fields: 
                  - value
            rhs: 
              SliceExpr:
                source: 'add1.value'
                var: add1
                offset: 0
                size: 9
                fields: 
                  - value
        rhs: 
          SliceExpr:
            source: 'add2'
            var: add2
            offset: 0
            size: 10
# 
# func TCarry halfAdd<A>(A val, Carry carry) {
#   add0 = halfAdd<A>(val[0 : A], carry)
#   add1 = halfAdd<B>(val[A : B], add0.carry)
#   add2 = halfAdd<C>(val[A + B : C], add1.carry)
#   return add0.value & add1.value & add2
# }
  halfAdd_9:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 10
        fields:
          value: 
            size: '9'
            offset: '0'
          carry: 
            size: '1'
            offset: '9'
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: A
            size: 9
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'halfAdd<A>(val[0 : A], carry)'
          name: halfAdd_3
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'halfAdd<B>(val[A : B], add0.carry)'
          name: halfAdd_3
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 3
              size: 1
              fields: 
                - carry
      add2:
        FuncExpr:
          source: 'halfAdd<C>(val[A + B : C], add1.carry)'
          name: halfAdd_3
          args:
          - 
            SliceExpr:
              source: 'val[A + B : C]'
              var: val
              offset: 6
              size: 3
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 3
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 3
              end:
                ConstTypeName:
                  typeName: C
                  size: 3
          - 
            SliceExpr:
              source: 'add1.carry'
              var: add1
              offset: 3
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1.value & add2
      ConcatExpr:
        source: 'add0.value & add1.value & add2'
        lhs: 
          ConcatExpr:
            source: 'add0.value & add1.value'
            lhs: 
              SliceExpr:
                source: 'add0.value'
                var: add0
                offset: 0
                size: 3
                fields: 
                  - value
            rhs: 
              SliceExpr:
                source: 'add1.value'
                var: add1
                offset: 0
                size: 3
                fields: 
                  - value
        rhs: 
          SliceExpr:
            source: 'add2'
            var: add2
            offset: 0
            size: 4
# 
# func TCarry halfAdd<A>(A val, Carry carry) {
#   add0 = halfAdd<A>(val[0 : A], carry)
#   add1 = halfAdd<B>(val[A : B], add0.carry)
#   add2 = halfAdd<C>(val[A + B : C], add1.carry)
#   return add0.value & add1.value & add2
# }
  halfAdd_3:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 4
        fields:
          value: 
            size: '3'
            offset: '0'
          carry: 
            size: '1'
            offset: '3'
    params:
      - 
        argName: val
        size: 3
        type: 
          ConstTypeName:
            typeName: A
            size: 3
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'halfAdd<A>(val[0 : A], carry)'
          name: halfAdd_1
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 1
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 1
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'halfAdd<B>(val[A : B], add0.carry)'
          name: halfAdd_1
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 1
              size: 1
              start:
                ConstTypeName:
                  typeName: A
                  size: 1
              end:
                ConstTypeName:
                  typeName: B
                  size: 1
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 1
              size: 1
              fields: 
                - carry
      add2:
        FuncExpr:
          source: 'halfAdd<C>(val[A + B : C], add1.carry)'
          name: halfAdd_1
          args:
          - 
            SliceExpr:
              source: 'val[A + B : C]'
              var: val
              offset: 2
              size: 1
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 1
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 1
              end:
                ConstTypeName:
                  typeName: C
                  size: 1
          - 
            SliceExpr:
              source: 'add1.carry'
              var: add1
              offset: 1
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1.value & add2
      ConcatExpr:
        source: 'add0.value & add1.value & add2'
        lhs: 
          ConcatExpr:
            source: 'add0.value & add1.value'
            lhs: 
              SliceExpr:
                source: 'add0.value'
                var: add0
                offset: 0
                size: 1
                fields: 
                  - value
            rhs: 
              SliceExpr:
                source: 'add1.value'
                var: add1
                offset: 0
                size: 1
                fields: 
                  - value
        rhs: 
          SliceExpr:
            source: 'add2'
            var: add2
            offset: 0
            size: 2
# 
# func Int decr<Int>(Int val) {
#   halfSum = halfAdd<Int>(val, -)
#   return halfSum.value
# }
  decr_27:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
    assigns: 
      halfSum:
        FuncExpr:
          source: 'halfAdd<Int>(val, -)'
          name: halfAdd_27
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 27
          - 
            ValueExpr:
                value: '-'
                trits: '-'
                trytes: 'Z'
    return: 
    # halfSum.value
      SliceExpr:
        source: 'halfSum.value'
        var: halfSum
        offset: 0
        size: 27
        fields: 
          - value
# 
# func Hash lshift<Hash>(Hash val) {
#   return val[1 : Hash - 1] & 0
# }
  lshift_243:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
    return: 
    # val[1 : Hash - 1] & 0
      ConcatExpr:
        source: 'val[1 : Hash - 1] & 0'
        lhs: 
          SliceExpr:
            source: 'val[1 : Hash - 1]'
            var: val
            offset: 1
            size: 242
            start:
              ConstNumber:
                value: 1
            end:
              ConstExpr:
                operator: '-'
                lhs: 
                  ConstTypeName:
                    typeName: Hash
                    size: 243
                rhs: 
                  ConstNumber:
                    value: 1
        rhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
# 
# func Trit as<Trit>(Trit val) {
#   return val
# }
  as_1:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: val
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 1
# 
# func Tryte as<Tryte>(Tryte val) {
#   return val
# }
  as_3:
    returnType: 
      ConstTypeName:
        typeName: Tryte
        size: 3
    params:
      - 
        argName: val
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 3
# 
# func Tiny as<Tiny>(Tiny val) {
#   return val
# }
  as_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 9
# 
# func Int as<Int>(Int val) {
#   return val
# }
  as_27:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 27
# 
# func Huge as<Huge>(Huge val) {
#   return val
# }
  as_81:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 81
# 
# func Bool equal<Int>(Int lhs, Int rhs) {
#   val0 = equal<A>(lhs[0 : A], rhs[0 : A])
#   val1 = equal<B>(lhs[A : B], rhs[A : B])
#   val2 = equal<C>(lhs[A + B : C], rhs[A + B : C])
#   return and3[val0, val1, val2]
# }
  equal_27:
    returnType: 
      ConstTypeName:
        typeName: Bool
        size: 1
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
    assigns: 
      val0:
        FuncExpr:
          source: 'equal<A>(lhs[0 : A], rhs[0 : A])'
          name: equal_9
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
      val1:
        FuncExpr:
          source: 'equal<B>(lhs[A : B], rhs[A : B])'
          name: equal_9
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
      val2:
        FuncExpr:
          source: 'equal<C>(lhs[A + B : C], rhs[A + B : C])'
          name: equal_9
          args:
          - 
            SliceExpr:
              source: 'lhs[A + B : C]'
              var: lhs
              offset: 18
              size: 9
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 9
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 9
              end:
                ConstTypeName:
                  typeName: C
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[A + B : C]'
              var: rhs
              offset: 18
              size: 9
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 9
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 9
              end:
                ConstTypeName:
                  typeName: C
                  size: 9
    return: 
    # and3[val0, val1, val2]
      LutExpr:
        name: and3
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func Bool equal<A>(A lhs, A rhs) {
#   val0 = equal<A>(lhs[0 : A], rhs[0 : A])
#   val1 = equal<B>(lhs[A : B], rhs[A : B])
#   val2 = equal<C>(lhs[A + B : C], rhs[A + B : C])
#   return and3[val0, val1, val2]
# }
  equal_9:
    returnType: 
      ConstTypeName:
        typeName: Bool
        size: 1
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: A
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: A
            size: 9
    assigns: 
      val0:
        FuncExpr:
          source: 'equal<A>(lhs[0 : A], rhs[0 : A])'
          name: equal_3
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
      val1:
        FuncExpr:
          source: 'equal<B>(lhs[A : B], rhs[A : B])'
          name: equal_3
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
      val2:
        FuncExpr:
          source: 'equal<C>(lhs[A + B : C], rhs[A + B : C])'
          name: equal_3
          args:
          - 
            SliceExpr:
              source: 'lhs[A + B : C]'
              var: lhs
              offset: 6
              size: 3
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 3
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 3
              end:
                ConstTypeName:
                  typeName: C
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[A + B : C]'
              var: rhs
              offset: 6
              size: 3
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 3
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 3
              end:
                ConstTypeName:
                  typeName: C
                  size: 3
    return: 
    # and3[val0, val1, val2]
      LutExpr:
        name: and3
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func Bool equal<A>(A lhs, A rhs) {
#   val0 = equal<A>(lhs[0 : A], rhs[0 : A])
#   val1 = equal<B>(lhs[A : B], rhs[A : B])
#   val2 = equal<C>(lhs[A + B : C], rhs[A + B : C])
#   return and3[val0, val1, val2]
# }
  equal_3:
    returnType: 
      ConstTypeName:
        typeName: Bool
        size: 1
    params:
      - 
        argName: lhs
        size: 3
        type: 
          ConstTypeName:
            typeName: A
            size: 3
      - 
        argName: rhs
        size: 3
        type: 
          ConstTypeName:
            typeName: A
            size: 3
    assigns: 
      val0:
        FuncExpr:
          source: 'equal<A>(lhs[0 : A], rhs[0 : A])'
          name: equal_1
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 1
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 1
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 1
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 1
      val1:
        FuncExpr:
          source: 'equal<B>(lhs[A : B], rhs[A : B])'
          name: equal_1
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 1
              size: 1
              start:
                ConstTypeName:
                  typeName: A
                  size: 1
              end:
                ConstTypeName:
                  typeName: B
                  size: 1
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 1
              size: 1
              start:
                ConstTypeName:
                  typeName: A
                  size: 1
              end:
                ConstTypeName:
                  typeName: B
                  size: 1
      val2:
        FuncExpr:
          source: 'equal<C>(lhs[A + B : C], rhs[A + B : C])'
          name: equal_1
          args:
          - 
            SliceExpr:
              source: 'lhs[A + B : C]'
              var: lhs
              offset: 2
              size: 1
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 1
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 1
              end:
                ConstTypeName:
                  typeName: C
                  size: 1
          - 
            SliceExpr:
              source: 'rhs[A + B : C]'
              var: rhs
              offset: 2
              size: 1
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 1
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 1
              end:
                ConstTypeName:
                  typeName: C
                  size: 1
    return: 
    # and3[val0, val1, val2]
      LutExpr:
        name: and3
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func Tryte lshift<Tryte>(Tryte val) {
#   return val[1 : Tryte - 1] & 0
# }
  lshift_3:
    returnType: 
      ConstTypeName:
        typeName: Tryte
        size: 3
    params:
      - 
        argName: val
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
    return: 
    # val[1 : Tryte - 1] & 0
      ConcatExpr:
        source: 'val[1 : Tryte - 1] & 0'
        lhs: 
          SliceExpr:
            source: 'val[1 : Tryte - 1]'
            var: val
            offset: 1
            size: 2
            start:
              ConstNumber:
                value: 1
            end:
              ConstExpr:
                operator: '-'
                lhs: 
                  ConstTypeName:
                    typeName: Tryte
                    size: 3
                rhs: 
                  ConstNumber:
                    value: 1
        rhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
# 
# func Int pow3<Int>(Tiny power) {
#   return notNegative[sign<Tiny>(power)] ? pow3loop<Int>(1, power) : null
# }
  pow3_27:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: power
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    return: 
    # notNegative[sign<Tiny>(power)] ? pow3loop<Int>(1, power) : null
      CondExpr:
        source: 'notNegative[sign<Tiny>(power)] ? pow3loop<Int>(1, power) : null'
        if: 
          LutExpr:
            name: notNegative
            args: 
              - 
                FuncExpr:
                  source: 'sign<Tiny>(power)'
                  name: sign_9
                  args:
                  - 
                    SliceExpr:
                      source: 'power'
                      var: power
                      offset: 0
                      size: 9
        then: 
          FuncExpr:
            source: 'pow3loop<Int>(1, power)'
            name: pow3loop_27
            args:
            - 
              ValueExpr:
                  value: '1'
                  trits: '100000000000000000000000000'
                  trytes: 'A99999999'
            - 
              SliceExpr:
                source: 'power'
                var: power
                offset: 0
                size: 9
        else:
          NullExpr: ''
# 
# func Int pow3loop<Int>(Int val, Tiny power) {
#   return isZero[sign<Tiny>(power)] ? val : pow3loop<Int>(rshift<Int>(val), decr<Tiny>(power))
# }
  pow3loop_27:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: power
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    return: 
    # isZero[sign<Tiny>(power)] ? val : pow3loop<Int>(rshift<Int>(val), decr<Tiny>(power))
      CondExpr:
        source: 'isZero[sign<Tiny>(power)] ? val : pow3loop<Int>(rshift<Int>(val), decr<Tiny>(power))'
        if: 
          LutExpr:
            name: isZero
            args: 
              - 
                FuncExpr:
                  source: 'sign<Tiny>(power)'
                  name: sign_9
                  args:
                  - 
                    SliceExpr:
                      source: 'power'
                      var: power
                      offset: 0
                      size: 9
        then: 
          SliceExpr:
            source: 'val'
            var: val
            offset: 0
            size: 27
        else:
          FuncExpr:
            source: 'pow3loop<Int>(rshift<Int>(val), decr<Tiny>(power))'
            name: pow3loop_27
            args:
            - 
              FuncExpr:
                source: 'rshift<Int>(val)'
                name: rshift_27
                args:
                - 
                  SliceExpr:
                    source: 'val'
                    var: val
                    offset: 0
                    size: 27
            - 
              FuncExpr:
                source: 'decr<Tiny>(power)'
                name: decr_9
                args:
                - 
                  SliceExpr:
                    source: 'power'
                    var: power
                    offset: 0
                    size: 9
# 
# func Int rshift<Int>(Int val) {
#   return 0 & val[0 : Int - 1]
# }
  rshift_27:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
    return: 
    # 0 & val[0 : Int - 1]
      ConcatExpr:
        source: '0 & val[0 : Int - 1]'
        lhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        rhs: 
          SliceExpr:
            source: 'val[0 : Int - 1]'
            var: val
            offset: 0
            size: 26
            start:
              ConstNumber:
                value: 0
            end:
              ConstExpr:
                operator: '-'
                lhs: 
                  ConstTypeName:
                    typeName: Int
                    size: 27
                rhs: 
                  ConstNumber:
                    value: 1
# 
# func Tiny decr<Tiny>(Tiny val) {
#   halfSum = halfAdd<Tiny>(val, -)
#   return halfSum.value
# }
  decr_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      halfSum:
        FuncExpr:
          source: 'halfAdd<Tiny>(val, -)'
          name: halfAdd_9
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 9
          - 
            ValueExpr:
                value: '-'
                trits: '-'
                trytes: 'Z'
    return: 
    # halfSum.value
      SliceExpr:
        source: 'halfSum.value'
        var: halfSum
        offset: 0
        size: 9
        fields: 
          - value
# 
# func Tiny log3<Int>(Int val) {
#   return sign<Int>(val) ? log3check<Int>(val, 3, 0) : null
# }
  log3_27:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
    return: 
    # sign<Int>(val) ? log3check<Int>(val, 3, 0) : null
      CondExpr:
        source: 'sign<Int>(val) ? log3check<Int>(val, 3, 0) : null'
        if: 
          FuncExpr:
            source: 'sign<Int>(val)'
            name: sign_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
        then: 
          FuncExpr:
            source: 'log3check<Int>(val, 3, 0)'
            name: log3check_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              ValueExpr:
                  value: '3'
                  trits: '010000000000000000000000000'
                  trytes: 'C99999999'
            - 
              ValueExpr:
                  value: '0'
                  trits: '000000000'
                  trytes: '999'
        else:
          NullExpr: ''
# 
# func Tiny log3check<Int>(Int val, Int power, Tiny log) {
#   done = isLess[cmp<Int>(val, power)]
#   return done ? log : log3checkMore<Int>(val, power, log)
# }
  log3check_27:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: power
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: log
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      done:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Int>(val, power)'
                name: cmp_27
                args:
                - 
                  SliceExpr:
                    source: 'val'
                    var: val
                    offset: 0
                    size: 27
                - 
                  SliceExpr:
                    source: 'power'
                    var: power
                    offset: 0
                    size: 27
    return: 
    # done ? log : log3checkMore<Int>(val, power, log)
      CondExpr:
        source: 'done ? log : log3checkMore<Int>(val, power, log)'
        if: 
          SliceExpr:
            source: 'done'
            var: done
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'log'
            var: log
            offset: 0
            size: 9
        else:
          FuncExpr:
            source: 'log3checkMore<Int>(val, power, log)'
            name: log3checkMore_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'power'
                var: power
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'log'
                var: log
                offset: 0
                size: 9
# 
# func Tiny log3checkMore<Int>(Int val, Int power, Tiny log) {
#   done = isZero[sign<Int>(power)]
#   return done ? log : log3checkNext<Int>(val, power, log)
# }
  log3checkMore_27:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: power
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: log
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      done:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Int>(power)'
                name: sign_27
                args:
                - 
                  SliceExpr:
                    source: 'power'
                    var: power
                    offset: 0
                    size: 27
    return: 
    # done ? log : log3checkNext<Int>(val, power, log)
      CondExpr:
        source: 'done ? log : log3checkNext<Int>(val, power, log)'
        if: 
          SliceExpr:
            source: 'done'
            var: done
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'log'
            var: log
            offset: 0
            size: 9
        else:
          FuncExpr:
            source: 'log3checkNext<Int>(val, power, log)'
            name: log3checkNext_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'power'
                var: power
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'log'
                var: log
                offset: 0
                size: 9
# 
# func Tiny log3checkNext<Int>(Int val, Int power, Tiny log) {
#   return log3check<Int>(val, rshift<Int>(power), incr<Tiny>(log))
# }
  log3checkNext_27:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: power
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: log
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    return: 
    # log3check<Int>(val, rshift<Int>(power), incr<Tiny>(log))
      FuncExpr:
        source: 'log3check<Int>(val, rshift<Int>(power), incr<Tiny>(log))'
        name: log3check_27
        args:
        - 
          SliceExpr:
            source: 'val'
            var: val
            offset: 0
            size: 27
        - 
          FuncExpr:
            source: 'rshift<Int>(power)'
            name: rshift_27
            args:
            - 
              SliceExpr:
                source: 'power'
                var: power
                offset: 0
                size: 27
        - 
          FuncExpr:
            source: 'incr<Tiny>(log)'
            name: incr_9
            args:
            - 
              SliceExpr:
                source: 'log'
                var: log
                offset: 0
                size: 9
# 
# func Trit cmp<Int>(Int lhs, Int rhs) {
#   val0 = cmp<A>(lhs[0 : A], rhs[0 : A])
#   val1 = cmp<B>(lhs[A : B], rhs[A : B])
#   val2 = cmp<C>(lhs[A + B : C], rhs[A + B : C])
#   return sign[val0, val1, val2]
# }
  cmp_27:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
    assigns: 
      val0:
        FuncExpr:
          source: 'cmp<A>(lhs[0 : A], rhs[0 : A])'
          name: cmp_9
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
      val1:
        FuncExpr:
          source: 'cmp<B>(lhs[A : B], rhs[A : B])'
          name: cmp_9
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
      val2:
        FuncExpr:
          source: 'cmp<C>(lhs[A + B : C], rhs[A + B : C])'
          name: cmp_9
          args:
          - 
            SliceExpr:
              source: 'lhs[A + B : C]'
              var: lhs
              offset: 18
              size: 9
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 9
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 9
              end:
                ConstTypeName:
                  typeName: C
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[A + B : C]'
              var: rhs
              offset: 18
              size: 9
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 9
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 9
              end:
                ConstTypeName:
                  typeName: C
                  size: 9
    return: 
    # sign[val0, val1, val2]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func Trit cmp<A>(A lhs, A rhs) {
#   val0 = cmp<A>(lhs[0 : A], rhs[0 : A])
#   val1 = cmp<B>(lhs[A : B], rhs[A : B])
#   val2 = cmp<C>(lhs[A + B : C], rhs[A + B : C])
#   return sign[val0, val1, val2]
# }
  cmp_9:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: A
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: A
            size: 9
    assigns: 
      val0:
        FuncExpr:
          source: 'cmp<A>(lhs[0 : A], rhs[0 : A])'
          name: cmp_3
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
      val1:
        FuncExpr:
          source: 'cmp<B>(lhs[A : B], rhs[A : B])'
          name: cmp_3
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
      val2:
        FuncExpr:
          source: 'cmp<C>(lhs[A + B : C], rhs[A + B : C])'
          name: cmp_3
          args:
          - 
            SliceExpr:
              source: 'lhs[A + B : C]'
              var: lhs
              offset: 6
              size: 3
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 3
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 3
              end:
                ConstTypeName:
                  typeName: C
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[A + B : C]'
              var: rhs
              offset: 6
              size: 3
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 3
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 3
              end:
                ConstTypeName:
                  typeName: C
                  size: 3
    return: 
    # sign[val0, val1, val2]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func Trit cmp<A>(A lhs, A rhs) {
#   val0 = cmp<A>(lhs[0 : A], rhs[0 : A])
#   val1 = cmp<B>(lhs[A : B], rhs[A : B])
#   val2 = cmp<C>(lhs[A + B : C], rhs[A + B : C])
#   return sign[val0, val1, val2]
# }
  cmp_3:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: lhs
        size: 3
        type: 
          ConstTypeName:
            typeName: A
            size: 3
      - 
        argName: rhs
        size: 3
        type: 
          ConstTypeName:
            typeName: A
            size: 3
    assigns: 
      val0:
        FuncExpr:
          source: 'cmp<A>(lhs[0 : A], rhs[0 : A])'
          name: cmp_1
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 1
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 1
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 1
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 1
      val1:
        FuncExpr:
          source: 'cmp<B>(lhs[A : B], rhs[A : B])'
          name: cmp_1
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 1
              size: 1
              start:
                ConstTypeName:
                  typeName: A
                  size: 1
              end:
                ConstTypeName:
                  typeName: B
                  size: 1
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 1
              size: 1
              start:
                ConstTypeName:
                  typeName: A
                  size: 1
              end:
                ConstTypeName:
                  typeName: B
                  size: 1
      val2:
        FuncExpr:
          source: 'cmp<C>(lhs[A + B : C], rhs[A + B : C])'
          name: cmp_1
          args:
          - 
            SliceExpr:
              source: 'lhs[A + B : C]'
              var: lhs
              offset: 2
              size: 1
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 1
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 1
              end:
                ConstTypeName:
                  typeName: C
                  size: 1
          - 
            SliceExpr:
              source: 'rhs[A + B : C]'
              var: rhs
              offset: 2
              size: 1
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 1
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 1
              end:
                ConstTypeName:
                  typeName: C
                  size: 1
    return: 
    # sign[val0, val1, val2]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func Tiny incr<Tiny>(Tiny val) {
#   halfSum = halfAdd<Tiny>(val, 1)
#   return halfSum.value
# }
  incr_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      halfSum:
        FuncExpr:
          source: 'halfAdd<Tiny>(val, 1)'
          name: halfAdd_9
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 9
          - 
            ValueExpr:
                value: '1'
                trits: '1'
                trytes: 'A'
    return: 
    # halfSum.value
      SliceExpr:
        source: 'halfSum.value'
        var: halfSum
        offset: 0
        size: 9
        fields: 
          - value
# 
# func Tryte lshiftN<Tryte>(Tryte val, Tiny n) {
#   flip = isNegative[sign<Tiny>(n)]
#   return flip ? rshiftNLimit<Tryte>(val, neg<Tiny>(n)) : lshiftNLimit<Tryte>(val, n)
# }
  lshiftN_3:
    returnType: 
      ConstTypeName:
        typeName: Tryte
        size: 3
    params:
      - 
        argName: val
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      flip:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(n)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
    return: 
    # flip ? rshiftNLimit<Tryte>(val, neg<Tiny>(n)) : lshiftNLimit<Tryte>(val, n)
      CondExpr:
        source: 'flip ? rshiftNLimit<Tryte>(val, neg<Tiny>(n)) : lshiftNLimit<Tryte>(val, n)'
        if: 
          SliceExpr:
            source: 'flip'
            var: flip
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftNLimit<Tryte>(val, neg<Tiny>(n))'
            name: rshiftNLimit_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 3
            - 
              FuncExpr:
                source: 'neg<Tiny>(n)'
                name: neg_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
        else:
          FuncExpr:
            source: 'lshiftNLimit<Tryte>(val, n)'
            name: lshiftNLimit_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 3
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Tryte lshiftNLimit<Tryte>(Tryte val, Tiny n) {
#   zero = notLess[cmp<Tiny>(n, 3)]
#   return zero ? 0 : lshiftN2<Tryte, P>(val, n)
# }
  lshiftNLimit_3:
    returnType: 
      ConstTypeName:
        typeName: Tryte
        size: 3
    params:
      - 
        argName: val
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      zero:
        LutExpr:
          name: notLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 3)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '3'
                      trits: '010000000'
                      trytes: 'C99'
    return: 
    # zero ? 0 : lshiftN2<Tryte, P>(val, n)
      CondExpr:
        source: 'zero ? 0 : lshiftN2<Tryte, P>(val, n)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000'
              trytes: '9'
        else:
          FuncExpr:
            source: 'lshiftN2<Tryte, P>(val, n)'
            name: lshiftN2_3_1
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 3
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Tryte rshiftN<Tryte>(Tryte val, Tiny n) {
#   flip = isNegative[sign<Tiny>(n)]
#   return flip ? lshiftNLimit<Tryte>(val, neg<Tiny>(n)) : rshiftNLimit<Tryte>(val, n)
# }
  rshiftN_3:
    returnType: 
      ConstTypeName:
        typeName: Tryte
        size: 3
    params:
      - 
        argName: val
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      flip:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(n)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
    return: 
    # flip ? lshiftNLimit<Tryte>(val, neg<Tiny>(n)) : rshiftNLimit<Tryte>(val, n)
      CondExpr:
        source: 'flip ? lshiftNLimit<Tryte>(val, neg<Tiny>(n)) : rshiftNLimit<Tryte>(val, n)'
        if: 
          SliceExpr:
            source: 'flip'
            var: flip
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftNLimit<Tryte>(val, neg<Tiny>(n))'
            name: lshiftNLimit_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 3
            - 
              FuncExpr:
                source: 'neg<Tiny>(n)'
                name: neg_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
        else:
          FuncExpr:
            source: 'rshiftNLimit<Tryte>(val, n)'
            name: rshiftNLimit_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 3
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Tryte rshiftNLimit<Tryte>(Tryte val, Tiny n) {
#   zero = notLess[cmp<Tiny>(n, 3)]
#   return zero ? 0 : rshiftN2<Tryte, P>(val, n)
# }
  rshiftNLimit_3:
    returnType: 
      ConstTypeName:
        typeName: Tryte
        size: 3
    params:
      - 
        argName: val
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      zero:
        LutExpr:
          name: notLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 3)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '3'
                      trits: '010000000'
                      trytes: 'C99'
    return: 
    # zero ? 0 : rshiftN2<Tryte, P>(val, n)
      CondExpr:
        source: 'zero ? 0 : rshiftN2<Tryte, P>(val, n)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000'
              trytes: '9'
        else:
          FuncExpr:
            source: 'rshiftN2<Tryte, P>(val, n)'
            name: rshiftN2_3_1
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 3
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Tryte rshiftN2<Tryte, Trit>(Tryte val, Tiny n) {
#   n0 = n[0]
#   zero = isZero[n0] ? val : null
#   one = n0 ? 0 & val[0 : Tryte - 1] : null
#   two = isMin[n0] ? 0 & 0 & val[0 : Tryte - 2] : null
#   return zero | one | two
# }
  rshiftN2_3_1:
    returnType: 
      ConstTypeName:
        typeName: Tryte
        size: 3
    params:
      - 
        argName: val
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      n0:
        SliceExpr:
          source: 'n[0]'
          var: n
          offset: 0
          size: 1
          start:
            ConstNumber:
              value: 0
      zero:
        CondExpr:
          source: 'isZero[n0] ? val : null'
          if: 
            LutExpr:
              name: isZero
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 3
          else:
            NullExpr: ''
      one:
        CondExpr:
          source: 'n0 ? 0 & val[0 : Tryte - 1] : null'
          if: 
            SliceExpr:
              source: 'n0'
              var: n0
              offset: 0
              size: 1
          then: 
            ConcatExpr:
              source: '0 & val[0 : Tryte - 1]'
              lhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
              rhs: 
                SliceExpr:
                  source: 'val[0 : Tryte - 1]'
                  var: val
                  offset: 0
                  size: 2
                  start:
                    ConstNumber:
                      value: 0
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Tryte
                          size: 3
                      rhs: 
                        ConstNumber:
                          value: 1
          else:
            NullExpr: ''
      two:
        CondExpr:
          source: 'isMin[n0] ? 0 & 0 & val[0 : Tryte - 2] : null'
          if: 
            LutExpr:
              name: isMin
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            ConcatExpr:
              source: '0 & 0 & val[0 : Tryte - 2]'
              lhs: 
                ConcatExpr:
                  source: '0 & 0'
                  lhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
                  rhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
              rhs: 
                SliceExpr:
                  source: 'val[0 : Tryte - 2]'
                  var: val
                  offset: 0
                  size: 1
                  start:
                    ConstNumber:
                      value: 0
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Tryte
                          size: 3
                      rhs: 
                        ConstNumber:
                          value: 2
          else:
            NullExpr: ''
    return: 
    # zero | one | two
      MergeExpr:
        source: 'zero | one | two'
        lhs: 
          MergeExpr:
            source: 'zero | one'
            lhs: 
              SliceExpr:
                source: 'zero'
                var: zero
                offset: 0
                size: 3
            rhs: 
              SliceExpr:
                source: 'one'
                var: one
                offset: 0
                size: 3
        rhs: 
          SliceExpr:
            source: 'two'
            var: two
            offset: 0
            size: 3
# 
# func Tiny neg<Tiny>(Tiny val) {
#   val0 = neg<A>(val[0 : A])
#   val1 = neg<B>(val[A : B])
#   val2 = neg<C>(val[A + B : C])
#   return val0 & val1 & val2
# }
  neg_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      val0:
        FuncExpr:
          source: 'neg<A>(val[0 : A])'
          name: neg_3
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
      val1:
        FuncExpr:
          source: 'neg<B>(val[A : B])'
          name: neg_3
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
      val2:
        FuncExpr:
          source: 'neg<C>(val[A + B : C])'
          name: neg_3
          args:
          - 
            SliceExpr:
              source: 'val[A + B : C]'
              var: val
              offset: 6
              size: 3
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 3
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 3
              end:
                ConstTypeName:
                  typeName: C
                  size: 3
    return: 
    # val0 & val1 & val2
      ConcatExpr:
        source: 'val0 & val1 & val2'
        lhs: 
          ConcatExpr:
            source: 'val0 & val1'
            lhs: 
              SliceExpr:
                source: 'val0'
                var: val0
                offset: 0
                size: 3
            rhs: 
              SliceExpr:
                source: 'val1'
                var: val1
                offset: 0
                size: 3
        rhs: 
          SliceExpr:
            source: 'val2'
            var: val2
            offset: 0
            size: 3
# 
# func A neg<A>(A val) {
#   val0 = neg<A>(val[0 : A])
#   val1 = neg<B>(val[A : B])
#   val2 = neg<C>(val[A + B : C])
#   return val0 & val1 & val2
# }
  neg_3:
    returnType: 
      ConstTypeName:
        typeName: A
        size: 3
    params:
      - 
        argName: val
        size: 3
        type: 
          ConstTypeName:
            typeName: A
            size: 3
    assigns: 
      val0:
        FuncExpr:
          source: 'neg<A>(val[0 : A])'
          name: neg_1
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 1
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 1
      val1:
        FuncExpr:
          source: 'neg<B>(val[A : B])'
          name: neg_1
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 1
              size: 1
              start:
                ConstTypeName:
                  typeName: A
                  size: 1
              end:
                ConstTypeName:
                  typeName: B
                  size: 1
      val2:
        FuncExpr:
          source: 'neg<C>(val[A + B : C])'
          name: neg_1
          args:
          - 
            SliceExpr:
              source: 'val[A + B : C]'
              var: val
              offset: 2
              size: 1
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 1
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 1
              end:
                ConstTypeName:
                  typeName: C
                  size: 1
    return: 
    # val0 & val1 & val2
      ConcatExpr:
        source: 'val0 & val1 & val2'
        lhs: 
          ConcatExpr:
            source: 'val0 & val1'
            lhs: 
              SliceExpr:
                source: 'val0'
                var: val0
                offset: 0
                size: 1
            rhs: 
              SliceExpr:
                source: 'val1'
                var: val1
                offset: 0
                size: 1
        rhs: 
          SliceExpr:
            source: 'val2'
            var: val2
            offset: 0
            size: 1
# 
# func Tryte lshiftN2<Tryte, Trit>(Tryte val, Tiny n) {
#   n0 = n[0]
#   zero = isZero[n0] ? val : null
#   one = n0 ? val[1 : Tryte - 1] & 0 : null
#   two = isMin[n0] ? val[2 : Tryte - 2] & 0 & 0 : null
#   return zero | one | two
# }
  lshiftN2_3_1:
    returnType: 
      ConstTypeName:
        typeName: Tryte
        size: 3
    params:
      - 
        argName: val
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      n0:
        SliceExpr:
          source: 'n[0]'
          var: n
          offset: 0
          size: 1
          start:
            ConstNumber:
              value: 0
      zero:
        CondExpr:
          source: 'isZero[n0] ? val : null'
          if: 
            LutExpr:
              name: isZero
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 3
          else:
            NullExpr: ''
      one:
        CondExpr:
          source: 'n0 ? val[1 : Tryte - 1] & 0 : null'
          if: 
            SliceExpr:
              source: 'n0'
              var: n0
              offset: 0
              size: 1
          then: 
            ConcatExpr:
              source: 'val[1 : Tryte - 1] & 0'
              lhs: 
                SliceExpr:
                  source: 'val[1 : Tryte - 1]'
                  var: val
                  offset: 1
                  size: 2
                  start:
                    ConstNumber:
                      value: 1
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Tryte
                          size: 3
                      rhs: 
                        ConstNumber:
                          value: 1
              rhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
          else:
            NullExpr: ''
      two:
        CondExpr:
          source: 'isMin[n0] ? val[2 : Tryte - 2] & 0 & 0 : null'
          if: 
            LutExpr:
              name: isMin
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            ConcatExpr:
              source: 'val[2 : Tryte - 2] & 0 & 0'
              lhs: 
                ConcatExpr:
                  source: 'val[2 : Tryte - 2] & 0'
                  lhs: 
                    SliceExpr:
                      source: 'val[2 : Tryte - 2]'
                      var: val
                      offset: 2
                      size: 1
                      start:
                        ConstNumber:
                          value: 2
                      end:
                        ConstExpr:
                          operator: '-'
                          lhs: 
                            ConstTypeName:
                              typeName: Tryte
                              size: 3
                          rhs: 
                            ConstNumber:
                              value: 2
                  rhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
              rhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
          else:
            NullExpr: ''
    return: 
    # zero | one | two
      MergeExpr:
        source: 'zero | one | two'
        lhs: 
          MergeExpr:
            source: 'zero | one'
            lhs: 
              SliceExpr:
                source: 'zero'
                var: zero
                offset: 0
                size: 3
            rhs: 
              SliceExpr:
                source: 'one'
                var: one
                offset: 0
                size: 3
        rhs: 
          SliceExpr:
            source: 'two'
            var: two
            offset: 0
            size: 3
# 
# func Tiny lshiftN<Tiny>(Tiny val, Tiny n) {
#   flip = isNegative[sign<Tiny>(n)]
#   return flip ? rshiftNLimit<Tiny>(val, neg<Tiny>(n)) : lshiftNLimit<Tiny>(val, n)
# }
  lshiftN_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      flip:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(n)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
    return: 
    # flip ? rshiftNLimit<Tiny>(val, neg<Tiny>(n)) : lshiftNLimit<Tiny>(val, n)
      CondExpr:
        source: 'flip ? rshiftNLimit<Tiny>(val, neg<Tiny>(n)) : lshiftNLimit<Tiny>(val, n)'
        if: 
          SliceExpr:
            source: 'flip'
            var: flip
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftNLimit<Tiny>(val, neg<Tiny>(n))'
            name: rshiftNLimit_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 9
            - 
              FuncExpr:
                source: 'neg<Tiny>(n)'
                name: neg_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
        else:
          FuncExpr:
            source: 'lshiftNLimit<Tiny>(val, n)'
            name: lshiftNLimit_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 9
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Tiny lshiftNLimit<Tiny>(Tiny val, Tiny n) {
#   zero = notLess[cmp<Tiny>(n, 9)]
#   return zero ? 0 : lshiftN2<Tiny, P>(val, n)
# }
  lshiftNLimit_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      zero:
        LutExpr:
          name: notLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 9)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '9'
                      trits: '001000000'
                      trytes: 'I99'
    return: 
    # zero ? 0 : lshiftN2<Tiny, P>(val, n)
      CondExpr:
        source: 'zero ? 0 : lshiftN2<Tiny, P>(val, n)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        else:
          FuncExpr:
            source: 'lshiftN2<Tiny, P>(val, n)'
            name: lshiftN2_9_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 9
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Tiny rshiftN<Tiny>(Tiny val, Tiny n) {
#   flip = isNegative[sign<Tiny>(n)]
#   return flip ? lshiftNLimit<Tiny>(val, neg<Tiny>(n)) : rshiftNLimit<Tiny>(val, n)
# }
  rshiftN_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      flip:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(n)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
    return: 
    # flip ? lshiftNLimit<Tiny>(val, neg<Tiny>(n)) : rshiftNLimit<Tiny>(val, n)
      CondExpr:
        source: 'flip ? lshiftNLimit<Tiny>(val, neg<Tiny>(n)) : rshiftNLimit<Tiny>(val, n)'
        if: 
          SliceExpr:
            source: 'flip'
            var: flip
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftNLimit<Tiny>(val, neg<Tiny>(n))'
            name: lshiftNLimit_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 9
            - 
              FuncExpr:
                source: 'neg<Tiny>(n)'
                name: neg_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
        else:
          FuncExpr:
            source: 'rshiftNLimit<Tiny>(val, n)'
            name: rshiftNLimit_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 9
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Tiny rshiftNLimit<Tiny>(Tiny val, Tiny n) {
#   zero = notLess[cmp<Tiny>(n, 9)]
#   return zero ? 0 : rshiftN2<Tiny, P>(val, n)
# }
  rshiftNLimit_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      zero:
        LutExpr:
          name: notLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 9)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '9'
                      trits: '001000000'
                      trytes: 'I99'
    return: 
    # zero ? 0 : rshiftN2<Tiny, P>(val, n)
      CondExpr:
        source: 'zero ? 0 : rshiftN2<Tiny, P>(val, n)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        else:
          FuncExpr:
            source: 'rshiftN2<Tiny, P>(val, n)'
            name: rshiftN2_9_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 9
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Tiny rshiftN2<Tiny, P>(Tiny val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 3)]
#   return less ? rshiftN2<Tiny, Q>(val, n) : rshiftN2Shift<Tiny, P>(val, n)
# }
  rshiftN2_9_3:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 3)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '3'
                      trits: '010000000'
                      trytes: 'C99'
    return: 
    # less ? rshiftN2<Tiny, Q>(val, n) : rshiftN2Shift<Tiny, P>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Tiny, Q>(val, n) : rshiftN2Shift<Tiny, P>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Tiny, Q>(val, n)'
            name: rshiftN2_9_1
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 9
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Tiny, P>(val, n)'
            name: rshiftN2Shift_9_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 9
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Tiny rshiftN2Shift<Tiny, P>(Tiny val, Tiny n) {
#   newVal = as<P>(0) & val[0 : Tiny - P]
#   newN = sub<Tiny>(n, 3)
#   return rshiftN2<Tiny, P>(newVal, newN)
# }
  rshiftN2Shift_9_3:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<P>(0) & val[0 : Tiny - P]'
          lhs: 
            FuncExpr:
              source: 'as<P>(0)'
              name: as_3
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000'
                    trytes: '9'
          rhs: 
            SliceExpr:
              source: 'val[0 : Tiny - P]'
              var: val
              offset: 0
              size: 6
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Tiny
                      size: 9
                  rhs: 
                    ConstTypeName:
                      typeName: P
                      size: 3
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 3)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '3'
                trits: '010000000'
                trytes: 'C99'
    return: 
    # rshiftN2<Tiny, P>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Tiny, P>(newVal, newN)'
        name: rshiftN2_9_3
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 9
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Tiny rshiftN2<Tiny, Trit>(Tiny val, Tiny n) {
#   n0 = n[0]
#   zero = isZero[n0] ? val : null
#   one = n0 ? 0 & val[0 : Tiny - 1] : null
#   two = isMin[n0] ? 0 & 0 & val[0 : Tiny - 2] : null
#   return zero | one | two
# }
  rshiftN2_9_1:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      n0:
        SliceExpr:
          source: 'n[0]'
          var: n
          offset: 0
          size: 1
          start:
            ConstNumber:
              value: 0
      zero:
        CondExpr:
          source: 'isZero[n0] ? val : null'
          if: 
            LutExpr:
              name: isZero
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 9
          else:
            NullExpr: ''
      one:
        CondExpr:
          source: 'n0 ? 0 & val[0 : Tiny - 1] : null'
          if: 
            SliceExpr:
              source: 'n0'
              var: n0
              offset: 0
              size: 1
          then: 
            ConcatExpr:
              source: '0 & val[0 : Tiny - 1]'
              lhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
              rhs: 
                SliceExpr:
                  source: 'val[0 : Tiny - 1]'
                  var: val
                  offset: 0
                  size: 8
                  start:
                    ConstNumber:
                      value: 0
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Tiny
                          size: 9
                      rhs: 
                        ConstNumber:
                          value: 1
          else:
            NullExpr: ''
      two:
        CondExpr:
          source: 'isMin[n0] ? 0 & 0 & val[0 : Tiny - 2] : null'
          if: 
            LutExpr:
              name: isMin
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            ConcatExpr:
              source: '0 & 0 & val[0 : Tiny - 2]'
              lhs: 
                ConcatExpr:
                  source: '0 & 0'
                  lhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
                  rhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
              rhs: 
                SliceExpr:
                  source: 'val[0 : Tiny - 2]'
                  var: val
                  offset: 0
                  size: 7
                  start:
                    ConstNumber:
                      value: 0
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Tiny
                          size: 9
                      rhs: 
                        ConstNumber:
                          value: 2
          else:
            NullExpr: ''
    return: 
    # zero | one | two
      MergeExpr:
        source: 'zero | one | two'
        lhs: 
          MergeExpr:
            source: 'zero | one'
            lhs: 
              SliceExpr:
                source: 'zero'
                var: zero
                offset: 0
                size: 9
            rhs: 
              SliceExpr:
                source: 'one'
                var: one
                offset: 0
                size: 9
        rhs: 
          SliceExpr:
            source: 'two'
            var: two
            offset: 0
            size: 9
# 
# func Tiny sub<Tiny>(Tiny lhs, Tiny rhs) {
#   sum = fullAdd<Tiny>(lhs, neg<Tiny>(rhs), 0)
#   return sum.value
# }
  sub_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<Tiny>(lhs, neg<Tiny>(rhs), 0)'
          name: fullAdd_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
          - 
            FuncExpr:
              source: 'neg<Tiny>(rhs)'
              name: neg_9
              args:
              - 
                SliceExpr:
                  source: 'rhs'
                  var: rhs
                  offset: 0
                  size: 9
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
    return: 
    # sum.value
      SliceExpr:
        source: 'sum.value'
        var: sum
        offset: 0
        size: 9
        fields: 
          - value
# 
# func TCarry fullAdd<Tiny>(Tiny lhs, Tiny rhs, Carry carry) {
#   add0 = fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)
#   add1 = fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)
#   add2 = fullAdd<C>(lhs[A + B : C], rhs[A + B : C], add1.carry)
#   return add0.value & add1.value & add2
# }
  fullAdd_9:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 10
        fields:
          value: 
            size: '9'
            offset: '0'
          carry: 
            size: '1'
            offset: '9'
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)'
          name: fullAdd_3
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)'
          name: fullAdd_3
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 3
              size: 1
              fields: 
                - carry
      add2:
        FuncExpr:
          source: 'fullAdd<C>(lhs[A + B : C], rhs[A + B : C], add1.carry)'
          name: fullAdd_3
          args:
          - 
            SliceExpr:
              source: 'lhs[A + B : C]'
              var: lhs
              offset: 6
              size: 3
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 3
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 3
              end:
                ConstTypeName:
                  typeName: C
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[A + B : C]'
              var: rhs
              offset: 6
              size: 3
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 3
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 3
              end:
                ConstTypeName:
                  typeName: C
                  size: 3
          - 
            SliceExpr:
              source: 'add1.carry'
              var: add1
              offset: 3
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1.value & add2
      ConcatExpr:
        source: 'add0.value & add1.value & add2'
        lhs: 
          ConcatExpr:
            source: 'add0.value & add1.value'
            lhs: 
              SliceExpr:
                source: 'add0.value'
                var: add0
                offset: 0
                size: 3
                fields: 
                  - value
            rhs: 
              SliceExpr:
                source: 'add1.value'
                var: add1
                offset: 0
                size: 3
                fields: 
                  - value
        rhs: 
          SliceExpr:
            source: 'add2'
            var: add2
            offset: 0
            size: 4
# 
# func TCarry fullAdd<A>(A lhs, A rhs, Carry carry) {
#   add0 = fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)
#   add1 = fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)
#   add2 = fullAdd<C>(lhs[A + B : C], rhs[A + B : C], add1.carry)
#   return add0.value & add1.value & add2
# }
  fullAdd_3:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 4
        fields:
          value: 
            size: '3'
            offset: '0'
          carry: 
            size: '1'
            offset: '3'
    params:
      - 
        argName: lhs
        size: 3
        type: 
          ConstTypeName:
            typeName: A
            size: 3
      - 
        argName: rhs
        size: 3
        type: 
          ConstTypeName:
            typeName: A
            size: 3
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)'
          name: fullAdd_1
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 1
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 1
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 1
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 1
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)'
          name: fullAdd_1
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 1
              size: 1
              start:
                ConstTypeName:
                  typeName: A
                  size: 1
              end:
                ConstTypeName:
                  typeName: B
                  size: 1
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 1
              size: 1
              start:
                ConstTypeName:
                  typeName: A
                  size: 1
              end:
                ConstTypeName:
                  typeName: B
                  size: 1
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 1
              size: 1
              fields: 
                - carry
      add2:
        FuncExpr:
          source: 'fullAdd<C>(lhs[A + B : C], rhs[A + B : C], add1.carry)'
          name: fullAdd_1
          args:
          - 
            SliceExpr:
              source: 'lhs[A + B : C]'
              var: lhs
              offset: 2
              size: 1
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 1
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 1
              end:
                ConstTypeName:
                  typeName: C
                  size: 1
          - 
            SliceExpr:
              source: 'rhs[A + B : C]'
              var: rhs
              offset: 2
              size: 1
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 1
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 1
              end:
                ConstTypeName:
                  typeName: C
                  size: 1
          - 
            SliceExpr:
              source: 'add1.carry'
              var: add1
              offset: 1
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1.value & add2
      ConcatExpr:
        source: 'add0.value & add1.value & add2'
        lhs: 
          ConcatExpr:
            source: 'add0.value & add1.value'
            lhs: 
              SliceExpr:
                source: 'add0.value'
                var: add0
                offset: 0
                size: 1
                fields: 
                  - value
            rhs: 
              SliceExpr:
                source: 'add1.value'
                var: add1
                offset: 0
                size: 1
                fields: 
                  - value
        rhs: 
          SliceExpr:
            source: 'add2'
            var: add2
            offset: 0
            size: 2
# 
# func Tiny lshiftN2<Tiny, P>(Tiny val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 3)]
#   return less ? lshiftN2<Tiny, Q>(val, n) : lshiftN2Shift<Tiny, P>(val, n)
# }
  lshiftN2_9_3:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 3)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '3'
                      trits: '010000000'
                      trytes: 'C99'
    return: 
    # less ? lshiftN2<Tiny, Q>(val, n) : lshiftN2Shift<Tiny, P>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Tiny, Q>(val, n) : lshiftN2Shift<Tiny, P>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Tiny, Q>(val, n)'
            name: lshiftN2_9_1
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 9
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Tiny, P>(val, n)'
            name: lshiftN2Shift_9_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 9
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Tiny lshiftN2Shift<Tiny, P>(Tiny val, Tiny n) {
#   newVal = val[P : Tiny - P] & as<P>(0)
#   newN = sub<Tiny>(n, 3)
#   return lshiftN2<Tiny, P>(newVal, newN)
# }
  lshiftN2Shift_9_3:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[P : Tiny - P] & as<P>(0)'
          lhs: 
            SliceExpr:
              source: 'val[P : Tiny - P]'
              var: val
              offset: 3
              size: 6
              start:
                ConstTypeName:
                  typeName: P
                  size: 3
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Tiny
                      size: 9
                  rhs: 
                    ConstTypeName:
                      typeName: P
                      size: 3
          rhs: 
            FuncExpr:
              source: 'as<P>(0)'
              name: as_3
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000'
                    trytes: '9'
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 3)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '3'
                trits: '010000000'
                trytes: 'C99'
    return: 
    # lshiftN2<Tiny, P>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Tiny, P>(newVal, newN)'
        name: lshiftN2_9_3
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 9
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Tiny lshiftN2<Tiny, Trit>(Tiny val, Tiny n) {
#   n0 = n[0]
#   zero = isZero[n0] ? val : null
#   one = n0 ? val[1 : Tiny - 1] & 0 : null
#   two = isMin[n0] ? val[2 : Tiny - 2] & 0 & 0 : null
#   return zero | one | two
# }
  lshiftN2_9_1:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      n0:
        SliceExpr:
          source: 'n[0]'
          var: n
          offset: 0
          size: 1
          start:
            ConstNumber:
              value: 0
      zero:
        CondExpr:
          source: 'isZero[n0] ? val : null'
          if: 
            LutExpr:
              name: isZero
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 9
          else:
            NullExpr: ''
      one:
        CondExpr:
          source: 'n0 ? val[1 : Tiny - 1] & 0 : null'
          if: 
            SliceExpr:
              source: 'n0'
              var: n0
              offset: 0
              size: 1
          then: 
            ConcatExpr:
              source: 'val[1 : Tiny - 1] & 0'
              lhs: 
                SliceExpr:
                  source: 'val[1 : Tiny - 1]'
                  var: val
                  offset: 1
                  size: 8
                  start:
                    ConstNumber:
                      value: 1
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Tiny
                          size: 9
                      rhs: 
                        ConstNumber:
                          value: 1
              rhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
          else:
            NullExpr: ''
      two:
        CondExpr:
          source: 'isMin[n0] ? val[2 : Tiny - 2] & 0 & 0 : null'
          if: 
            LutExpr:
              name: isMin
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            ConcatExpr:
              source: 'val[2 : Tiny - 2] & 0 & 0'
              lhs: 
                ConcatExpr:
                  source: 'val[2 : Tiny - 2] & 0'
                  lhs: 
                    SliceExpr:
                      source: 'val[2 : Tiny - 2]'
                      var: val
                      offset: 2
                      size: 7
                      start:
                        ConstNumber:
                          value: 2
                      end:
                        ConstExpr:
                          operator: '-'
                          lhs: 
                            ConstTypeName:
                              typeName: Tiny
                              size: 9
                          rhs: 
                            ConstNumber:
                              value: 2
                  rhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
              rhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
          else:
            NullExpr: ''
    return: 
    # zero | one | two
      MergeExpr:
        source: 'zero | one | two'
        lhs: 
          MergeExpr:
            source: 'zero | one'
            lhs: 
              SliceExpr:
                source: 'zero'
                var: zero
                offset: 0
                size: 9
            rhs: 
              SliceExpr:
                source: 'one'
                var: one
                offset: 0
                size: 9
        rhs: 
          SliceExpr:
            source: 'two'
            var: two
            offset: 0
            size: 9
# 
# func Int lshiftN<Int>(Int val, Tiny n) {
#   flip = isNegative[sign<Tiny>(n)]
#   return flip ? rshiftNLimit<Int>(val, neg<Tiny>(n)) : lshiftNLimit<Int>(val, n)
# }
  lshiftN_27:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      flip:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(n)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
    return: 
    # flip ? rshiftNLimit<Int>(val, neg<Tiny>(n)) : lshiftNLimit<Int>(val, n)
      CondExpr:
        source: 'flip ? rshiftNLimit<Int>(val, neg<Tiny>(n)) : lshiftNLimit<Int>(val, n)'
        if: 
          SliceExpr:
            source: 'flip'
            var: flip
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftNLimit<Int>(val, neg<Tiny>(n))'
            name: rshiftNLimit_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              FuncExpr:
                source: 'neg<Tiny>(n)'
                name: neg_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
        else:
          FuncExpr:
            source: 'lshiftNLimit<Int>(val, n)'
            name: lshiftNLimit_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Int lshiftNLimit<Int>(Int val, Tiny n) {
#   zero = notLess[cmp<Tiny>(n, 27)]
#   return zero ? 0 : lshiftN2<Int, P>(val, n)
# }
  lshiftNLimit_27:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      zero:
        LutExpr:
          name: notLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 27)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '27'
                      trits: '000100000'
                      trytes: '9A9'
    return: 
    # zero ? 0 : lshiftN2<Int, P>(val, n)
      CondExpr:
        source: 'zero ? 0 : lshiftN2<Int, P>(val, n)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000'
              trytes: '999999999'
        else:
          FuncExpr:
            source: 'lshiftN2<Int, P>(val, n)'
            name: lshiftN2_27_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Int rshiftN<Int>(Int val, Tiny n) {
#   flip = isNegative[sign<Tiny>(n)]
#   return flip ? lshiftNLimit<Int>(val, neg<Tiny>(n)) : rshiftNLimit<Int>(val, n)
# }
  rshiftN_27:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      flip:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(n)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
    return: 
    # flip ? lshiftNLimit<Int>(val, neg<Tiny>(n)) : rshiftNLimit<Int>(val, n)
      CondExpr:
        source: 'flip ? lshiftNLimit<Int>(val, neg<Tiny>(n)) : rshiftNLimit<Int>(val, n)'
        if: 
          SliceExpr:
            source: 'flip'
            var: flip
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftNLimit<Int>(val, neg<Tiny>(n))'
            name: lshiftNLimit_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              FuncExpr:
                source: 'neg<Tiny>(n)'
                name: neg_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
        else:
          FuncExpr:
            source: 'rshiftNLimit<Int>(val, n)'
            name: rshiftNLimit_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Int rshiftNLimit<Int>(Int val, Tiny n) {
#   zero = notLess[cmp<Tiny>(n, 27)]
#   return zero ? 0 : rshiftN2<Int, P>(val, n)
# }
  rshiftNLimit_27:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      zero:
        LutExpr:
          name: notLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 27)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '27'
                      trits: '000100000'
                      trytes: '9A9'
    return: 
    # zero ? 0 : rshiftN2<Int, P>(val, n)
      CondExpr:
        source: 'zero ? 0 : rshiftN2<Int, P>(val, n)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000'
              trytes: '999999999'
        else:
          FuncExpr:
            source: 'rshiftN2<Int, P>(val, n)'
            name: rshiftN2_27_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Int rshiftN2<Int, P>(Int val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 9)]
#   return less ? rshiftN2<Int, Q>(val, n) : rshiftN2Shift<Int, P>(val, n)
# }
  rshiftN2_27_9:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 9)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '9'
                      trits: '001000000'
                      trytes: 'I99'
    return: 
    # less ? rshiftN2<Int, Q>(val, n) : rshiftN2Shift<Int, P>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Int, Q>(val, n) : rshiftN2Shift<Int, P>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Int, Q>(val, n)'
            name: rshiftN2_27_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Int, P>(val, n)'
            name: rshiftN2Shift_27_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Int rshiftN2Shift<Int, P>(Int val, Tiny n) {
#   newVal = as<P>(0) & val[0 : Int - P]
#   newN = sub<Tiny>(n, 9)
#   return rshiftN2<Int, P>(newVal, newN)
# }
  rshiftN2Shift_27_9:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<P>(0) & val[0 : Int - P]'
          lhs: 
            FuncExpr:
              source: 'as<P>(0)'
              name: as_9
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000'
                    trytes: '999'
          rhs: 
            SliceExpr:
              source: 'val[0 : Int - P]'
              var: val
              offset: 0
              size: 18
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Int
                      size: 27
                  rhs: 
                    ConstTypeName:
                      typeName: P
                      size: 9
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 9)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '9'
                trits: '001000000'
                trytes: 'I99'
    return: 
    # rshiftN2<Int, P>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Int, P>(newVal, newN)'
        name: rshiftN2_27_9
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 27
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Int rshiftN2<Int, Q>(Int val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 3)]
#   return less ? rshiftN2<Int, Q>(val, n) : rshiftN2Shift<Int, Q>(val, n)
# }
  rshiftN2_27_3:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 3)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '3'
                      trits: '010000000'
                      trytes: 'C99'
    return: 
    # less ? rshiftN2<Int, Q>(val, n) : rshiftN2Shift<Int, Q>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Int, Q>(val, n) : rshiftN2Shift<Int, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Int, Q>(val, n)'
            name: rshiftN2_27_1
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Int, Q>(val, n)'
            name: rshiftN2Shift_27_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Int rshiftN2Shift<Int, Q>(Int val, Tiny n) {
#   newVal = as<Q>(0) & val[0 : Int - Q]
#   newN = sub<Tiny>(n, 3)
#   return rshiftN2<Int, Q>(newVal, newN)
# }
  rshiftN2Shift_27_3:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<Q>(0) & val[0 : Int - Q]'
          lhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_3
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000'
                    trytes: '9'
          rhs: 
            SliceExpr:
              source: 'val[0 : Int - Q]'
              var: val
              offset: 0
              size: 24
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Int
                      size: 27
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 3
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 3)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '3'
                trits: '010000000'
                trytes: 'C99'
    return: 
    # rshiftN2<Int, Q>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Int, Q>(newVal, newN)'
        name: rshiftN2_27_3
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 27
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Int rshiftN2<Int, Trit>(Int val, Tiny n) {
#   n0 = n[0]
#   zero = isZero[n0] ? val : null
#   one = n0 ? 0 & val[0 : Int - 1] : null
#   two = isMin[n0] ? 0 & 0 & val[0 : Int - 2] : null
#   return zero | one | two
# }
  rshiftN2_27_1:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      n0:
        SliceExpr:
          source: 'n[0]'
          var: n
          offset: 0
          size: 1
          start:
            ConstNumber:
              value: 0
      zero:
        CondExpr:
          source: 'isZero[n0] ? val : null'
          if: 
            LutExpr:
              name: isZero
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 27
          else:
            NullExpr: ''
      one:
        CondExpr:
          source: 'n0 ? 0 & val[0 : Int - 1] : null'
          if: 
            SliceExpr:
              source: 'n0'
              var: n0
              offset: 0
              size: 1
          then: 
            ConcatExpr:
              source: '0 & val[0 : Int - 1]'
              lhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
              rhs: 
                SliceExpr:
                  source: 'val[0 : Int - 1]'
                  var: val
                  offset: 0
                  size: 26
                  start:
                    ConstNumber:
                      value: 0
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Int
                          size: 27
                      rhs: 
                        ConstNumber:
                          value: 1
          else:
            NullExpr: ''
      two:
        CondExpr:
          source: 'isMin[n0] ? 0 & 0 & val[0 : Int - 2] : null'
          if: 
            LutExpr:
              name: isMin
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            ConcatExpr:
              source: '0 & 0 & val[0 : Int - 2]'
              lhs: 
                ConcatExpr:
                  source: '0 & 0'
                  lhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
                  rhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
              rhs: 
                SliceExpr:
                  source: 'val[0 : Int - 2]'
                  var: val
                  offset: 0
                  size: 25
                  start:
                    ConstNumber:
                      value: 0
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Int
                          size: 27
                      rhs: 
                        ConstNumber:
                          value: 2
          else:
            NullExpr: ''
    return: 
    # zero | one | two
      MergeExpr:
        source: 'zero | one | two'
        lhs: 
          MergeExpr:
            source: 'zero | one'
            lhs: 
              SliceExpr:
                source: 'zero'
                var: zero
                offset: 0
                size: 27
            rhs: 
              SliceExpr:
                source: 'one'
                var: one
                offset: 0
                size: 27
        rhs: 
          SliceExpr:
            source: 'two'
            var: two
            offset: 0
            size: 27
# 
# func Int lshiftN2<Int, P>(Int val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 9)]
#   return less ? lshiftN2<Int, Q>(val, n) : lshiftN2Shift<Int, P>(val, n)
# }
  lshiftN2_27_9:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 9)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '9'
                      trits: '001000000'
                      trytes: 'I99'
    return: 
    # less ? lshiftN2<Int, Q>(val, n) : lshiftN2Shift<Int, P>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Int, Q>(val, n) : lshiftN2Shift<Int, P>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Int, Q>(val, n)'
            name: lshiftN2_27_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Int, P>(val, n)'
            name: lshiftN2Shift_27_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Int lshiftN2Shift<Int, P>(Int val, Tiny n) {
#   newVal = val[P : Int - P] & as<P>(0)
#   newN = sub<Tiny>(n, 9)
#   return lshiftN2<Int, P>(newVal, newN)
# }
  lshiftN2Shift_27_9:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[P : Int - P] & as<P>(0)'
          lhs: 
            SliceExpr:
              source: 'val[P : Int - P]'
              var: val
              offset: 9
              size: 18
              start:
                ConstTypeName:
                  typeName: P
                  size: 9
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Int
                      size: 27
                  rhs: 
                    ConstTypeName:
                      typeName: P
                      size: 9
          rhs: 
            FuncExpr:
              source: 'as<P>(0)'
              name: as_9
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000'
                    trytes: '999'
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 9)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '9'
                trits: '001000000'
                trytes: 'I99'
    return: 
    # lshiftN2<Int, P>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Int, P>(newVal, newN)'
        name: lshiftN2_27_9
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 27
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Int lshiftN2<Int, Q>(Int val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 3)]
#   return less ? lshiftN2<Int, Q>(val, n) : lshiftN2Shift<Int, Q>(val, n)
# }
  lshiftN2_27_3:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 3)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '3'
                      trits: '010000000'
                      trytes: 'C99'
    return: 
    # less ? lshiftN2<Int, Q>(val, n) : lshiftN2Shift<Int, Q>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Int, Q>(val, n) : lshiftN2Shift<Int, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Int, Q>(val, n)'
            name: lshiftN2_27_1
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Int, Q>(val, n)'
            name: lshiftN2Shift_27_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Int lshiftN2Shift<Int, Q>(Int val, Tiny n) {
#   newVal = val[Q : Int - Q] & as<Q>(0)
#   newN = sub<Tiny>(n, 3)
#   return lshiftN2<Int, Q>(newVal, newN)
# }
  lshiftN2Shift_27_3:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[Q : Int - Q] & as<Q>(0)'
          lhs: 
            SliceExpr:
              source: 'val[Q : Int - Q]'
              var: val
              offset: 3
              size: 24
              start:
                ConstTypeName:
                  typeName: Q
                  size: 3
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Int
                      size: 27
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 3
          rhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_3
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000'
                    trytes: '9'
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 3)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '3'
                trits: '010000000'
                trytes: 'C99'
    return: 
    # lshiftN2<Int, Q>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Int, Q>(newVal, newN)'
        name: lshiftN2_27_3
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 27
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Int lshiftN2<Int, Trit>(Int val, Tiny n) {
#   n0 = n[0]
#   zero = isZero[n0] ? val : null
#   one = n0 ? val[1 : Int - 1] & 0 : null
#   two = isMin[n0] ? val[2 : Int - 2] & 0 & 0 : null
#   return zero | one | two
# }
  lshiftN2_27_1:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      n0:
        SliceExpr:
          source: 'n[0]'
          var: n
          offset: 0
          size: 1
          start:
            ConstNumber:
              value: 0
      zero:
        CondExpr:
          source: 'isZero[n0] ? val : null'
          if: 
            LutExpr:
              name: isZero
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 27
          else:
            NullExpr: ''
      one:
        CondExpr:
          source: 'n0 ? val[1 : Int - 1] & 0 : null'
          if: 
            SliceExpr:
              source: 'n0'
              var: n0
              offset: 0
              size: 1
          then: 
            ConcatExpr:
              source: 'val[1 : Int - 1] & 0'
              lhs: 
                SliceExpr:
                  source: 'val[1 : Int - 1]'
                  var: val
                  offset: 1
                  size: 26
                  start:
                    ConstNumber:
                      value: 1
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Int
                          size: 27
                      rhs: 
                        ConstNumber:
                          value: 1
              rhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
          else:
            NullExpr: ''
      two:
        CondExpr:
          source: 'isMin[n0] ? val[2 : Int - 2] & 0 & 0 : null'
          if: 
            LutExpr:
              name: isMin
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            ConcatExpr:
              source: 'val[2 : Int - 2] & 0 & 0'
              lhs: 
                ConcatExpr:
                  source: 'val[2 : Int - 2] & 0'
                  lhs: 
                    SliceExpr:
                      source: 'val[2 : Int - 2]'
                      var: val
                      offset: 2
                      size: 25
                      start:
                        ConstNumber:
                          value: 2
                      end:
                        ConstExpr:
                          operator: '-'
                          lhs: 
                            ConstTypeName:
                              typeName: Int
                              size: 27
                          rhs: 
                            ConstNumber:
                              value: 2
                  rhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
              rhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
          else:
            NullExpr: ''
    return: 
    # zero | one | two
      MergeExpr:
        source: 'zero | one | two'
        lhs: 
          MergeExpr:
            source: 'zero | one'
            lhs: 
              SliceExpr:
                source: 'zero'
                var: zero
                offset: 0
                size: 27
            rhs: 
              SliceExpr:
                source: 'one'
                var: one
                offset: 0
                size: 27
        rhs: 
          SliceExpr:
            source: 'two'
            var: two
            offset: 0
            size: 27
# 
# func Huge lshiftN<Huge>(Huge val, Tiny n) {
#   flip = isNegative[sign<Tiny>(n)]
#   return flip ? rshiftNLimit<Huge>(val, neg<Tiny>(n)) : lshiftNLimit<Huge>(val, n)
# }
  lshiftN_81:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      flip:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(n)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
    return: 
    # flip ? rshiftNLimit<Huge>(val, neg<Tiny>(n)) : lshiftNLimit<Huge>(val, n)
      CondExpr:
        source: 'flip ? rshiftNLimit<Huge>(val, neg<Tiny>(n)) : lshiftNLimit<Huge>(val, n)'
        if: 
          SliceExpr:
            source: 'flip'
            var: flip
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftNLimit<Huge>(val, neg<Tiny>(n))'
            name: rshiftNLimit_81
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              FuncExpr:
                source: 'neg<Tiny>(n)'
                name: neg_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
        else:
          FuncExpr:
            source: 'lshiftNLimit<Huge>(val, n)'
            name: lshiftNLimit_81
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Huge lshiftNLimit<Huge>(Huge val, Tiny n) {
#   zero = notLess[cmp<Tiny>(n, 81)]
#   return zero ? 0 : lshiftN2<Huge, P>(val, n)
# }
  lshiftNLimit_81:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      zero:
        LutExpr:
          name: notLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 81)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '81'
                      trits: '000010000'
                      trytes: '9C9'
    return: 
    # zero ? 0 : lshiftN2<Huge, P>(val, n)
      CondExpr:
        source: 'zero ? 0 : lshiftN2<Huge, P>(val, n)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: '999999999999999999999999999'
        else:
          FuncExpr:
            source: 'lshiftN2<Huge, P>(val, n)'
            name: lshiftN2_81_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Huge rshiftN<Huge>(Huge val, Tiny n) {
#   flip = isNegative[sign<Tiny>(n)]
#   return flip ? lshiftNLimit<Huge>(val, neg<Tiny>(n)) : rshiftNLimit<Huge>(val, n)
# }
  rshiftN_81:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      flip:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(n)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
    return: 
    # flip ? lshiftNLimit<Huge>(val, neg<Tiny>(n)) : rshiftNLimit<Huge>(val, n)
      CondExpr:
        source: 'flip ? lshiftNLimit<Huge>(val, neg<Tiny>(n)) : rshiftNLimit<Huge>(val, n)'
        if: 
          SliceExpr:
            source: 'flip'
            var: flip
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftNLimit<Huge>(val, neg<Tiny>(n))'
            name: lshiftNLimit_81
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              FuncExpr:
                source: 'neg<Tiny>(n)'
                name: neg_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
        else:
          FuncExpr:
            source: 'rshiftNLimit<Huge>(val, n)'
            name: rshiftNLimit_81
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Huge rshiftNLimit<Huge>(Huge val, Tiny n) {
#   zero = notLess[cmp<Tiny>(n, 81)]
#   return zero ? 0 : rshiftN2<Huge, P>(val, n)
# }
  rshiftNLimit_81:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      zero:
        LutExpr:
          name: notLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 81)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '81'
                      trits: '000010000'
                      trytes: '9C9'
    return: 
    # zero ? 0 : rshiftN2<Huge, P>(val, n)
      CondExpr:
        source: 'zero ? 0 : rshiftN2<Huge, P>(val, n)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: '999999999999999999999999999'
        else:
          FuncExpr:
            source: 'rshiftN2<Huge, P>(val, n)'
            name: rshiftN2_81_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Huge rshiftN2<Huge, P>(Huge val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 27)]
#   return less ? rshiftN2<Huge, Q>(val, n) : rshiftN2Shift<Huge, P>(val, n)
# }
  rshiftN2_81_27:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 27)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '27'
                      trits: '000100000'
                      trytes: '9A9'
    return: 
    # less ? rshiftN2<Huge, Q>(val, n) : rshiftN2Shift<Huge, P>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Huge, Q>(val, n) : rshiftN2Shift<Huge, P>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Huge, Q>(val, n)'
            name: rshiftN2_81_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Huge, P>(val, n)'
            name: rshiftN2Shift_81_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Huge rshiftN2Shift<Huge, P>(Huge val, Tiny n) {
#   newVal = as<P>(0) & val[0 : Huge - P]
#   newN = sub<Tiny>(n, 27)
#   return rshiftN2<Huge, P>(newVal, newN)
# }
  rshiftN2Shift_81_27:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<P>(0) & val[0 : Huge - P]'
          lhs: 
            FuncExpr:
              source: 'as<P>(0)'
              name: as_27
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000000000000000000000'
                    trytes: '999999999'
          rhs: 
            SliceExpr:
              source: 'val[0 : Huge - P]'
              var: val
              offset: 0
              size: 54
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Huge
                      size: 81
                  rhs: 
                    ConstTypeName:
                      typeName: P
                      size: 27
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 27)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '27'
                trits: '000100000'
                trytes: '9A9'
    return: 
    # rshiftN2<Huge, P>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Huge, P>(newVal, newN)'
        name: rshiftN2_81_27
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 81
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Huge rshiftN2<Huge, Q>(Huge val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 9)]
#   return less ? rshiftN2<Huge, Q>(val, n) : rshiftN2Shift<Huge, Q>(val, n)
# }
  rshiftN2_81_9:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 9)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '9'
                      trits: '001000000'
                      trytes: 'I99'
    return: 
    # less ? rshiftN2<Huge, Q>(val, n) : rshiftN2Shift<Huge, Q>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Huge, Q>(val, n) : rshiftN2Shift<Huge, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Huge, Q>(val, n)'
            name: rshiftN2_81_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Huge, Q>(val, n)'
            name: rshiftN2Shift_81_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Huge rshiftN2Shift<Huge, Q>(Huge val, Tiny n) {
#   newVal = as<Q>(0) & val[0 : Huge - Q]
#   newN = sub<Tiny>(n, 9)
#   return rshiftN2<Huge, Q>(newVal, newN)
# }
  rshiftN2Shift_81_9:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<Q>(0) & val[0 : Huge - Q]'
          lhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_9
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000'
                    trytes: '999'
          rhs: 
            SliceExpr:
              source: 'val[0 : Huge - Q]'
              var: val
              offset: 0
              size: 72
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Huge
                      size: 81
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 9
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 9)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '9'
                trits: '001000000'
                trytes: 'I99'
    return: 
    # rshiftN2<Huge, Q>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Huge, Q>(newVal, newN)'
        name: rshiftN2_81_9
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 81
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Huge rshiftN2<Huge, Q>(Huge val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 3)]
#   return less ? rshiftN2<Huge, Q>(val, n) : rshiftN2Shift<Huge, Q>(val, n)
# }
  rshiftN2_81_3:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 3)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '3'
                      trits: '010000000'
                      trytes: 'C99'
    return: 
    # less ? rshiftN2<Huge, Q>(val, n) : rshiftN2Shift<Huge, Q>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Huge, Q>(val, n) : rshiftN2Shift<Huge, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Huge, Q>(val, n)'
            name: rshiftN2_81_1
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Huge, Q>(val, n)'
            name: rshiftN2Shift_81_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Huge rshiftN2Shift<Huge, Q>(Huge val, Tiny n) {
#   newVal = as<Q>(0) & val[0 : Huge - Q]
#   newN = sub<Tiny>(n, 3)
#   return rshiftN2<Huge, Q>(newVal, newN)
# }
  rshiftN2Shift_81_3:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<Q>(0) & val[0 : Huge - Q]'
          lhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_3
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000'
                    trytes: '9'
          rhs: 
            SliceExpr:
              source: 'val[0 : Huge - Q]'
              var: val
              offset: 0
              size: 78
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Huge
                      size: 81
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 3
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 3)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '3'
                trits: '010000000'
                trytes: 'C99'
    return: 
    # rshiftN2<Huge, Q>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Huge, Q>(newVal, newN)'
        name: rshiftN2_81_3
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 81
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Huge rshiftN2<Huge, Trit>(Huge val, Tiny n) {
#   n0 = n[0]
#   zero = isZero[n0] ? val : null
#   one = n0 ? 0 & val[0 : Huge - 1] : null
#   two = isMin[n0] ? 0 & 0 & val[0 : Huge - 2] : null
#   return zero | one | two
# }
  rshiftN2_81_1:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      n0:
        SliceExpr:
          source: 'n[0]'
          var: n
          offset: 0
          size: 1
          start:
            ConstNumber:
              value: 0
      zero:
        CondExpr:
          source: 'isZero[n0] ? val : null'
          if: 
            LutExpr:
              name: isZero
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 81
          else:
            NullExpr: ''
      one:
        CondExpr:
          source: 'n0 ? 0 & val[0 : Huge - 1] : null'
          if: 
            SliceExpr:
              source: 'n0'
              var: n0
              offset: 0
              size: 1
          then: 
            ConcatExpr:
              source: '0 & val[0 : Huge - 1]'
              lhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
              rhs: 
                SliceExpr:
                  source: 'val[0 : Huge - 1]'
                  var: val
                  offset: 0
                  size: 80
                  start:
                    ConstNumber:
                      value: 0
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Huge
                          size: 81
                      rhs: 
                        ConstNumber:
                          value: 1
          else:
            NullExpr: ''
      two:
        CondExpr:
          source: 'isMin[n0] ? 0 & 0 & val[0 : Huge - 2] : null'
          if: 
            LutExpr:
              name: isMin
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            ConcatExpr:
              source: '0 & 0 & val[0 : Huge - 2]'
              lhs: 
                ConcatExpr:
                  source: '0 & 0'
                  lhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
                  rhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
              rhs: 
                SliceExpr:
                  source: 'val[0 : Huge - 2]'
                  var: val
                  offset: 0
                  size: 79
                  start:
                    ConstNumber:
                      value: 0
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Huge
                          size: 81
                      rhs: 
                        ConstNumber:
                          value: 2
          else:
            NullExpr: ''
    return: 
    # zero | one | two
      MergeExpr:
        source: 'zero | one | two'
        lhs: 
          MergeExpr:
            source: 'zero | one'
            lhs: 
              SliceExpr:
                source: 'zero'
                var: zero
                offset: 0
                size: 81
            rhs: 
              SliceExpr:
                source: 'one'
                var: one
                offset: 0
                size: 81
        rhs: 
          SliceExpr:
            source: 'two'
            var: two
            offset: 0
            size: 81
# 
# func Huge lshiftN2<Huge, P>(Huge val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 27)]
#   return less ? lshiftN2<Huge, Q>(val, n) : lshiftN2Shift<Huge, P>(val, n)
# }
  lshiftN2_81_27:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 27)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '27'
                      trits: '000100000'
                      trytes: '9A9'
    return: 
    # less ? lshiftN2<Huge, Q>(val, n) : lshiftN2Shift<Huge, P>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Huge, Q>(val, n) : lshiftN2Shift<Huge, P>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Huge, Q>(val, n)'
            name: lshiftN2_81_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Huge, P>(val, n)'
            name: lshiftN2Shift_81_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Huge lshiftN2Shift<Huge, P>(Huge val, Tiny n) {
#   newVal = val[P : Huge - P] & as<P>(0)
#   newN = sub<Tiny>(n, 27)
#   return lshiftN2<Huge, P>(newVal, newN)
# }
  lshiftN2Shift_81_27:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[P : Huge - P] & as<P>(0)'
          lhs: 
            SliceExpr:
              source: 'val[P : Huge - P]'
              var: val
              offset: 27
              size: 54
              start:
                ConstTypeName:
                  typeName: P
                  size: 27
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Huge
                      size: 81
                  rhs: 
                    ConstTypeName:
                      typeName: P
                      size: 27
          rhs: 
            FuncExpr:
              source: 'as<P>(0)'
              name: as_27
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000000000000000000000'
                    trytes: '999999999'
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 27)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '27'
                trits: '000100000'
                trytes: '9A9'
    return: 
    # lshiftN2<Huge, P>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Huge, P>(newVal, newN)'
        name: lshiftN2_81_27
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 81
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Huge lshiftN2<Huge, Q>(Huge val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 9)]
#   return less ? lshiftN2<Huge, Q>(val, n) : lshiftN2Shift<Huge, Q>(val, n)
# }
  lshiftN2_81_9:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 9)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '9'
                      trits: '001000000'
                      trytes: 'I99'
    return: 
    # less ? lshiftN2<Huge, Q>(val, n) : lshiftN2Shift<Huge, Q>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Huge, Q>(val, n) : lshiftN2Shift<Huge, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Huge, Q>(val, n)'
            name: lshiftN2_81_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Huge, Q>(val, n)'
            name: lshiftN2Shift_81_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Huge lshiftN2Shift<Huge, Q>(Huge val, Tiny n) {
#   newVal = val[Q : Huge - Q] & as<Q>(0)
#   newN = sub<Tiny>(n, 9)
#   return lshiftN2<Huge, Q>(newVal, newN)
# }
  lshiftN2Shift_81_9:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[Q : Huge - Q] & as<Q>(0)'
          lhs: 
            SliceExpr:
              source: 'val[Q : Huge - Q]'
              var: val
              offset: 9
              size: 72
              start:
                ConstTypeName:
                  typeName: Q
                  size: 9
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Huge
                      size: 81
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 9
          rhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_9
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000'
                    trytes: '999'
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 9)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '9'
                trits: '001000000'
                trytes: 'I99'
    return: 
    # lshiftN2<Huge, Q>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Huge, Q>(newVal, newN)'
        name: lshiftN2_81_9
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 81
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Huge lshiftN2<Huge, Q>(Huge val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 3)]
#   return less ? lshiftN2<Huge, Q>(val, n) : lshiftN2Shift<Huge, Q>(val, n)
# }
  lshiftN2_81_3:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 3)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '3'
                      trits: '010000000'
                      trytes: 'C99'
    return: 
    # less ? lshiftN2<Huge, Q>(val, n) : lshiftN2Shift<Huge, Q>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Huge, Q>(val, n) : lshiftN2Shift<Huge, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Huge, Q>(val, n)'
            name: lshiftN2_81_1
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Huge, Q>(val, n)'
            name: lshiftN2Shift_81_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Huge lshiftN2Shift<Huge, Q>(Huge val, Tiny n) {
#   newVal = val[Q : Huge - Q] & as<Q>(0)
#   newN = sub<Tiny>(n, 3)
#   return lshiftN2<Huge, Q>(newVal, newN)
# }
  lshiftN2Shift_81_3:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[Q : Huge - Q] & as<Q>(0)'
          lhs: 
            SliceExpr:
              source: 'val[Q : Huge - Q]'
              var: val
              offset: 3
              size: 78
              start:
                ConstTypeName:
                  typeName: Q
                  size: 3
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Huge
                      size: 81
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 3
          rhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_3
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000'
                    trytes: '9'
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 3)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '3'
                trits: '010000000'
                trytes: 'C99'
    return: 
    # lshiftN2<Huge, Q>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Huge, Q>(newVal, newN)'
        name: lshiftN2_81_3
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 81
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Huge lshiftN2<Huge, Trit>(Huge val, Tiny n) {
#   n0 = n[0]
#   zero = isZero[n0] ? val : null
#   one = n0 ? val[1 : Huge - 1] & 0 : null
#   two = isMin[n0] ? val[2 : Huge - 2] & 0 & 0 : null
#   return zero | one | two
# }
  lshiftN2_81_1:
    returnType: 
      ConstTypeName:
        typeName: Huge
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: Huge
            size: 81
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      n0:
        SliceExpr:
          source: 'n[0]'
          var: n
          offset: 0
          size: 1
          start:
            ConstNumber:
              value: 0
      zero:
        CondExpr:
          source: 'isZero[n0] ? val : null'
          if: 
            LutExpr:
              name: isZero
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 81
          else:
            NullExpr: ''
      one:
        CondExpr:
          source: 'n0 ? val[1 : Huge - 1] & 0 : null'
          if: 
            SliceExpr:
              source: 'n0'
              var: n0
              offset: 0
              size: 1
          then: 
            ConcatExpr:
              source: 'val[1 : Huge - 1] & 0'
              lhs: 
                SliceExpr:
                  source: 'val[1 : Huge - 1]'
                  var: val
                  offset: 1
                  size: 80
                  start:
                    ConstNumber:
                      value: 1
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Huge
                          size: 81
                      rhs: 
                        ConstNumber:
                          value: 1
              rhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
          else:
            NullExpr: ''
      two:
        CondExpr:
          source: 'isMin[n0] ? val[2 : Huge - 2] & 0 & 0 : null'
          if: 
            LutExpr:
              name: isMin
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            ConcatExpr:
              source: 'val[2 : Huge - 2] & 0 & 0'
              lhs: 
                ConcatExpr:
                  source: 'val[2 : Huge - 2] & 0'
                  lhs: 
                    SliceExpr:
                      source: 'val[2 : Huge - 2]'
                      var: val
                      offset: 2
                      size: 79
                      start:
                        ConstNumber:
                          value: 2
                      end:
                        ConstExpr:
                          operator: '-'
                          lhs: 
                            ConstTypeName:
                              typeName: Huge
                              size: 81
                          rhs: 
                            ConstNumber:
                              value: 2
                  rhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
              rhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
          else:
            NullExpr: ''
    return: 
    # zero | one | two
      MergeExpr:
        source: 'zero | one | two'
        lhs: 
          MergeExpr:
            source: 'zero | one'
            lhs: 
              SliceExpr:
                source: 'zero'
                var: zero
                offset: 0
                size: 81
            rhs: 
              SliceExpr:
                source: 'one'
                var: one
                offset: 0
                size: 81
        rhs: 
          SliceExpr:
            source: 'two'
            var: two
            offset: 0
            size: 81
# 
# func Hash lshiftN<Hash>(Hash val, Tiny n) {
#   flip = isNegative[sign<Tiny>(n)]
#   return flip ? rshiftNLimit<Hash>(val, neg<Tiny>(n)) : lshiftNLimit<Hash>(val, n)
# }
  lshiftN_243:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      flip:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(n)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
    return: 
    # flip ? rshiftNLimit<Hash>(val, neg<Tiny>(n)) : lshiftNLimit<Hash>(val, n)
      CondExpr:
        source: 'flip ? rshiftNLimit<Hash>(val, neg<Tiny>(n)) : lshiftNLimit<Hash>(val, n)'
        if: 
          SliceExpr:
            source: 'flip'
            var: flip
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftNLimit<Hash>(val, neg<Tiny>(n))'
            name: rshiftNLimit_243
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              FuncExpr:
                source: 'neg<Tiny>(n)'
                name: neg_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
        else:
          FuncExpr:
            source: 'lshiftNLimit<Hash>(val, n)'
            name: lshiftNLimit_243
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Hash lshiftNLimit<Hash>(Hash val, Tiny n) {
#   zero = notLess[cmp<Tiny>(n, 243)]
#   return zero ? 0 : lshiftN2<Hash, P>(val, n)
# }
  lshiftNLimit_243:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      zero:
        LutExpr:
          name: notLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 243)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '243'
                      trits: '000001000'
                      trytes: '9I9'
    return: 
    # zero ? 0 : lshiftN2<Hash, P>(val, n)
      CondExpr:
        source: 'zero ? 0 : lshiftN2<Hash, P>(val, n)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: '999999999999999999999999999999999999999999999999999999999999999999999999999999999'
        else:
          FuncExpr:
            source: 'lshiftN2<Hash, P>(val, n)'
            name: lshiftN2_243_81
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Hash rshiftN<Hash>(Hash val, Tiny n) {
#   flip = isNegative[sign<Tiny>(n)]
#   return flip ? lshiftNLimit<Hash>(val, neg<Tiny>(n)) : rshiftNLimit<Hash>(val, n)
# }
  rshiftN_243:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      flip:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(n)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
    return: 
    # flip ? lshiftNLimit<Hash>(val, neg<Tiny>(n)) : rshiftNLimit<Hash>(val, n)
      CondExpr:
        source: 'flip ? lshiftNLimit<Hash>(val, neg<Tiny>(n)) : rshiftNLimit<Hash>(val, n)'
        if: 
          SliceExpr:
            source: 'flip'
            var: flip
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftNLimit<Hash>(val, neg<Tiny>(n))'
            name: lshiftNLimit_243
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              FuncExpr:
                source: 'neg<Tiny>(n)'
                name: neg_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
        else:
          FuncExpr:
            source: 'rshiftNLimit<Hash>(val, n)'
            name: rshiftNLimit_243
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Hash rshiftNLimit<Hash>(Hash val, Tiny n) {
#   zero = notLess[cmp<Tiny>(n, 243)]
#   return zero ? 0 : rshiftN2<Hash, P>(val, n)
# }
  rshiftNLimit_243:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      zero:
        LutExpr:
          name: notLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 243)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '243'
                      trits: '000001000'
                      trytes: '9I9'
    return: 
    # zero ? 0 : rshiftN2<Hash, P>(val, n)
      CondExpr:
        source: 'zero ? 0 : rshiftN2<Hash, P>(val, n)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: '999999999999999999999999999999999999999999999999999999999999999999999999999999999'
        else:
          FuncExpr:
            source: 'rshiftN2<Hash, P>(val, n)'
            name: rshiftN2_243_81
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Hash rshiftN2<Hash, P>(Hash val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 81)]
#   return less ? rshiftN2<Hash, Q>(val, n) : rshiftN2Shift<Hash, P>(val, n)
# }
  rshiftN2_243_81:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 81)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '81'
                      trits: '000010000'
                      trytes: '9C9'
    return: 
    # less ? rshiftN2<Hash, Q>(val, n) : rshiftN2Shift<Hash, P>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Hash, Q>(val, n) : rshiftN2Shift<Hash, P>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Hash, Q>(val, n)'
            name: rshiftN2_243_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Hash, P>(val, n)'
            name: rshiftN2Shift_243_81
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Hash rshiftN2Shift<Hash, P>(Hash val, Tiny n) {
#   newVal = as<P>(0) & val[0 : Hash - P]
#   newN = sub<Tiny>(n, 81)
#   return rshiftN2<Hash, P>(newVal, newN)
# }
  rshiftN2Shift_243_81:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<P>(0) & val[0 : Hash - P]'
          lhs: 
            FuncExpr:
              source: 'as<P>(0)'
              name: as_81
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                    trytes: '999999999999999999999999999'
          rhs: 
            SliceExpr:
              source: 'val[0 : Hash - P]'
              var: val
              offset: 0
              size: 162
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Hash
                      size: 243
                  rhs: 
                    ConstTypeName:
                      typeName: P
                      size: 81
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 81)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '81'
                trits: '000010000'
                trytes: '9C9'
    return: 
    # rshiftN2<Hash, P>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Hash, P>(newVal, newN)'
        name: rshiftN2_243_81
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 243
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Hash rshiftN2<Hash, Q>(Hash val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 27)]
#   return less ? rshiftN2<Hash, Q>(val, n) : rshiftN2Shift<Hash, Q>(val, n)
# }
  rshiftN2_243_27:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 27)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '27'
                      trits: '000100000'
                      trytes: '9A9'
    return: 
    # less ? rshiftN2<Hash, Q>(val, n) : rshiftN2Shift<Hash, Q>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Hash, Q>(val, n) : rshiftN2Shift<Hash, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Hash, Q>(val, n)'
            name: rshiftN2_243_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Hash, Q>(val, n)'
            name: rshiftN2Shift_243_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Hash rshiftN2Shift<Hash, Q>(Hash val, Tiny n) {
#   newVal = as<Q>(0) & val[0 : Hash - Q]
#   newN = sub<Tiny>(n, 27)
#   return rshiftN2<Hash, Q>(newVal, newN)
# }
  rshiftN2Shift_243_27:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<Q>(0) & val[0 : Hash - Q]'
          lhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_27
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000000000000000000000'
                    trytes: '999999999'
          rhs: 
            SliceExpr:
              source: 'val[0 : Hash - Q]'
              var: val
              offset: 0
              size: 216
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Hash
                      size: 243
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 27
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 27)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '27'
                trits: '000100000'
                trytes: '9A9'
    return: 
    # rshiftN2<Hash, Q>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Hash, Q>(newVal, newN)'
        name: rshiftN2_243_27
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 243
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Hash rshiftN2<Hash, Q>(Hash val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 9)]
#   return less ? rshiftN2<Hash, Q>(val, n) : rshiftN2Shift<Hash, Q>(val, n)
# }
  rshiftN2_243_9:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 9)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '9'
                      trits: '001000000'
                      trytes: 'I99'
    return: 
    # less ? rshiftN2<Hash, Q>(val, n) : rshiftN2Shift<Hash, Q>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Hash, Q>(val, n) : rshiftN2Shift<Hash, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Hash, Q>(val, n)'
            name: rshiftN2_243_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Hash, Q>(val, n)'
            name: rshiftN2Shift_243_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Hash rshiftN2Shift<Hash, Q>(Hash val, Tiny n) {
#   newVal = as<Q>(0) & val[0 : Hash - Q]
#   newN = sub<Tiny>(n, 9)
#   return rshiftN2<Hash, Q>(newVal, newN)
# }
  rshiftN2Shift_243_9:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<Q>(0) & val[0 : Hash - Q]'
          lhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_9
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000'
                    trytes: '999'
          rhs: 
            SliceExpr:
              source: 'val[0 : Hash - Q]'
              var: val
              offset: 0
              size: 234
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Hash
                      size: 243
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 9
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 9)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '9'
                trits: '001000000'
                trytes: 'I99'
    return: 
    # rshiftN2<Hash, Q>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Hash, Q>(newVal, newN)'
        name: rshiftN2_243_9
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 243
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Hash rshiftN2<Hash, Q>(Hash val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 3)]
#   return less ? rshiftN2<Hash, Q>(val, n) : rshiftN2Shift<Hash, Q>(val, n)
# }
  rshiftN2_243_3:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 3)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '3'
                      trits: '010000000'
                      trytes: 'C99'
    return: 
    # less ? rshiftN2<Hash, Q>(val, n) : rshiftN2Shift<Hash, Q>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Hash, Q>(val, n) : rshiftN2Shift<Hash, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Hash, Q>(val, n)'
            name: rshiftN2_243_1
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Hash, Q>(val, n)'
            name: rshiftN2Shift_243_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Hash rshiftN2Shift<Hash, Q>(Hash val, Tiny n) {
#   newVal = as<Q>(0) & val[0 : Hash - Q]
#   newN = sub<Tiny>(n, 3)
#   return rshiftN2<Hash, Q>(newVal, newN)
# }
  rshiftN2Shift_243_3:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<Q>(0) & val[0 : Hash - Q]'
          lhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_3
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000'
                    trytes: '9'
          rhs: 
            SliceExpr:
              source: 'val[0 : Hash - Q]'
              var: val
              offset: 0
              size: 240
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Hash
                      size: 243
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 3
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 3)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '3'
                trits: '010000000'
                trytes: 'C99'
    return: 
    # rshiftN2<Hash, Q>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Hash, Q>(newVal, newN)'
        name: rshiftN2_243_3
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 243
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Hash rshiftN2<Hash, Trit>(Hash val, Tiny n) {
#   n0 = n[0]
#   zero = isZero[n0] ? val : null
#   one = n0 ? 0 & val[0 : Hash - 1] : null
#   two = isMin[n0] ? 0 & 0 & val[0 : Hash - 2] : null
#   return zero | one | two
# }
  rshiftN2_243_1:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      n0:
        SliceExpr:
          source: 'n[0]'
          var: n
          offset: 0
          size: 1
          start:
            ConstNumber:
              value: 0
      zero:
        CondExpr:
          source: 'isZero[n0] ? val : null'
          if: 
            LutExpr:
              name: isZero
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 243
          else:
            NullExpr: ''
      one:
        CondExpr:
          source: 'n0 ? 0 & val[0 : Hash - 1] : null'
          if: 
            SliceExpr:
              source: 'n0'
              var: n0
              offset: 0
              size: 1
          then: 
            ConcatExpr:
              source: '0 & val[0 : Hash - 1]'
              lhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
              rhs: 
                SliceExpr:
                  source: 'val[0 : Hash - 1]'
                  var: val
                  offset: 0
                  size: 242
                  start:
                    ConstNumber:
                      value: 0
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Hash
                          size: 243
                      rhs: 
                        ConstNumber:
                          value: 1
          else:
            NullExpr: ''
      two:
        CondExpr:
          source: 'isMin[n0] ? 0 & 0 & val[0 : Hash - 2] : null'
          if: 
            LutExpr:
              name: isMin
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            ConcatExpr:
              source: '0 & 0 & val[0 : Hash - 2]'
              lhs: 
                ConcatExpr:
                  source: '0 & 0'
                  lhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
                  rhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
              rhs: 
                SliceExpr:
                  source: 'val[0 : Hash - 2]'
                  var: val
                  offset: 0
                  size: 241
                  start:
                    ConstNumber:
                      value: 0
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Hash
                          size: 243
                      rhs: 
                        ConstNumber:
                          value: 2
          else:
            NullExpr: ''
    return: 
    # zero | one | two
      MergeExpr:
        source: 'zero | one | two'
        lhs: 
          MergeExpr:
            source: 'zero | one'
            lhs: 
              SliceExpr:
                source: 'zero'
                var: zero
                offset: 0
                size: 243
            rhs: 
              SliceExpr:
                source: 'one'
                var: one
                offset: 0
                size: 243
        rhs: 
          SliceExpr:
            source: 'two'
            var: two
            offset: 0
            size: 243
# 
# func Hash lshiftN2<Hash, P>(Hash val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 81)]
#   return less ? lshiftN2<Hash, Q>(val, n) : lshiftN2Shift<Hash, P>(val, n)
# }
  lshiftN2_243_81:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 81)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '81'
                      trits: '000010000'
                      trytes: '9C9'
    return: 
    # less ? lshiftN2<Hash, Q>(val, n) : lshiftN2Shift<Hash, P>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Hash, Q>(val, n) : lshiftN2Shift<Hash, P>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Hash, Q>(val, n)'
            name: lshiftN2_243_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Hash, P>(val, n)'
            name: lshiftN2Shift_243_81
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Hash lshiftN2Shift<Hash, P>(Hash val, Tiny n) {
#   newVal = val[P : Hash - P] & as<P>(0)
#   newN = sub<Tiny>(n, 81)
#   return lshiftN2<Hash, P>(newVal, newN)
# }
  lshiftN2Shift_243_81:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[P : Hash - P] & as<P>(0)'
          lhs: 
            SliceExpr:
              source: 'val[P : Hash - P]'
              var: val
              offset: 81
              size: 162
              start:
                ConstTypeName:
                  typeName: P
                  size: 81
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Hash
                      size: 243
                  rhs: 
                    ConstTypeName:
                      typeName: P
                      size: 81
          rhs: 
            FuncExpr:
              source: 'as<P>(0)'
              name: as_81
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                    trytes: '999999999999999999999999999'
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 81)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '81'
                trits: '000010000'
                trytes: '9C9'
    return: 
    # lshiftN2<Hash, P>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Hash, P>(newVal, newN)'
        name: lshiftN2_243_81
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 243
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Hash lshiftN2<Hash, Q>(Hash val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 27)]
#   return less ? lshiftN2<Hash, Q>(val, n) : lshiftN2Shift<Hash, Q>(val, n)
# }
  lshiftN2_243_27:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 27)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '27'
                      trits: '000100000'
                      trytes: '9A9'
    return: 
    # less ? lshiftN2<Hash, Q>(val, n) : lshiftN2Shift<Hash, Q>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Hash, Q>(val, n) : lshiftN2Shift<Hash, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Hash, Q>(val, n)'
            name: lshiftN2_243_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Hash, Q>(val, n)'
            name: lshiftN2Shift_243_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Hash lshiftN2Shift<Hash, Q>(Hash val, Tiny n) {
#   newVal = val[Q : Hash - Q] & as<Q>(0)
#   newN = sub<Tiny>(n, 27)
#   return lshiftN2<Hash, Q>(newVal, newN)
# }
  lshiftN2Shift_243_27:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[Q : Hash - Q] & as<Q>(0)'
          lhs: 
            SliceExpr:
              source: 'val[Q : Hash - Q]'
              var: val
              offset: 27
              size: 216
              start:
                ConstTypeName:
                  typeName: Q
                  size: 27
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Hash
                      size: 243
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 27
          rhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_27
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000000000000000000000'
                    trytes: '999999999'
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 27)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '27'
                trits: '000100000'
                trytes: '9A9'
    return: 
    # lshiftN2<Hash, Q>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Hash, Q>(newVal, newN)'
        name: lshiftN2_243_27
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 243
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Hash lshiftN2<Hash, Q>(Hash val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 9)]
#   return less ? lshiftN2<Hash, Q>(val, n) : lshiftN2Shift<Hash, Q>(val, n)
# }
  lshiftN2_243_9:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 9)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '9'
                      trits: '001000000'
                      trytes: 'I99'
    return: 
    # less ? lshiftN2<Hash, Q>(val, n) : lshiftN2Shift<Hash, Q>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Hash, Q>(val, n) : lshiftN2Shift<Hash, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Hash, Q>(val, n)'
            name: lshiftN2_243_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Hash, Q>(val, n)'
            name: lshiftN2Shift_243_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Hash lshiftN2Shift<Hash, Q>(Hash val, Tiny n) {
#   newVal = val[Q : Hash - Q] & as<Q>(0)
#   newN = sub<Tiny>(n, 9)
#   return lshiftN2<Hash, Q>(newVal, newN)
# }
  lshiftN2Shift_243_9:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[Q : Hash - Q] & as<Q>(0)'
          lhs: 
            SliceExpr:
              source: 'val[Q : Hash - Q]'
              var: val
              offset: 9
              size: 234
              start:
                ConstTypeName:
                  typeName: Q
                  size: 9
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Hash
                      size: 243
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 9
          rhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_9
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000'
                    trytes: '999'
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 9)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '9'
                trits: '001000000'
                trytes: 'I99'
    return: 
    # lshiftN2<Hash, Q>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Hash, Q>(newVal, newN)'
        name: lshiftN2_243_9
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 243
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Hash lshiftN2<Hash, Q>(Hash val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 3)]
#   return less ? lshiftN2<Hash, Q>(val, n) : lshiftN2Shift<Hash, Q>(val, n)
# }
  lshiftN2_243_3:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 3)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '3'
                      trits: '010000000'
                      trytes: 'C99'
    return: 
    # less ? lshiftN2<Hash, Q>(val, n) : lshiftN2Shift<Hash, Q>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Hash, Q>(val, n) : lshiftN2Shift<Hash, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Hash, Q>(val, n)'
            name: lshiftN2_243_1
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Hash, Q>(val, n)'
            name: lshiftN2Shift_243_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 243
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Hash lshiftN2Shift<Hash, Q>(Hash val, Tiny n) {
#   newVal = val[Q : Hash - Q] & as<Q>(0)
#   newN = sub<Tiny>(n, 3)
#   return lshiftN2<Hash, Q>(newVal, newN)
# }
  lshiftN2Shift_243_3:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[Q : Hash - Q] & as<Q>(0)'
          lhs: 
            SliceExpr:
              source: 'val[Q : Hash - Q]'
              var: val
              offset: 3
              size: 240
              start:
                ConstTypeName:
                  typeName: Q
                  size: 3
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Hash
                      size: 243
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 3
          rhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_3
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000'
                    trytes: '9'
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 3)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '3'
                trits: '010000000'
                trytes: 'C99'
    return: 
    # lshiftN2<Hash, Q>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Hash, Q>(newVal, newN)'
        name: lshiftN2_243_3
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 243
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Hash lshiftN2<Hash, Trit>(Hash val, Tiny n) {
#   n0 = n[0]
#   zero = isZero[n0] ? val : null
#   one = n0 ? val[1 : Hash - 1] & 0 : null
#   two = isMin[n0] ? val[2 : Hash - 2] & 0 & 0 : null
#   return zero | one | two
# }
  lshiftN2_243_1:
    returnType: 
      ConstTypeName:
        typeName: Hash
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      n0:
        SliceExpr:
          source: 'n[0]'
          var: n
          offset: 0
          size: 1
          start:
            ConstNumber:
              value: 0
      zero:
        CondExpr:
          source: 'isZero[n0] ? val : null'
          if: 
            LutExpr:
              name: isZero
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 243
          else:
            NullExpr: ''
      one:
        CondExpr:
          source: 'n0 ? val[1 : Hash - 1] & 0 : null'
          if: 
            SliceExpr:
              source: 'n0'
              var: n0
              offset: 0
              size: 1
          then: 
            ConcatExpr:
              source: 'val[1 : Hash - 1] & 0'
              lhs: 
                SliceExpr:
                  source: 'val[1 : Hash - 1]'
                  var: val
                  offset: 1
                  size: 242
                  start:
                    ConstNumber:
                      value: 1
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Hash
                          size: 243
                      rhs: 
                        ConstNumber:
                          value: 1
              rhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
          else:
            NullExpr: ''
      two:
        CondExpr:
          source: 'isMin[n0] ? val[2 : Hash - 2] & 0 & 0 : null'
          if: 
            LutExpr:
              name: isMin
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            ConcatExpr:
              source: 'val[2 : Hash - 2] & 0 & 0'
              lhs: 
                ConcatExpr:
                  source: 'val[2 : Hash - 2] & 0'
                  lhs: 
                    SliceExpr:
                      source: 'val[2 : Hash - 2]'
                      var: val
                      offset: 2
                      size: 241
                      start:
                        ConstNumber:
                          value: 2
                      end:
                        ConstExpr:
                          operator: '-'
                          lhs: 
                            ConstTypeName:
                              typeName: Hash
                              size: 243
                          rhs: 
                            ConstNumber:
                              value: 2
                  rhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
              rhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
          else:
            NullExpr: ''
    return: 
    # zero | one | two
      MergeExpr:
        source: 'zero | one | two'
        lhs: 
          MergeExpr:
            source: 'zero | one'
            lhs: 
              SliceExpr:
                source: 'zero'
                var: zero
                offset: 0
                size: 243
            rhs: 
              SliceExpr:
                source: 'one'
                var: one
                offset: 0
                size: 243
        rhs: 
          SliceExpr:
            source: 'two'
            var: two
            offset: 0
            size: 243
# 
# func Signature lshiftN<Signature>(Signature val, Tiny n) {
#   flip = isNegative[sign<Tiny>(n)]
#   return flip ? rshiftNLimit<Signature>(val, neg<Tiny>(n)) : lshiftNLimit<Signature>(val, n)
# }
  lshiftN_6561:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      flip:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(n)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
    return: 
    # flip ? rshiftNLimit<Signature>(val, neg<Tiny>(n)) : lshiftNLimit<Signature>(val, n)
      CondExpr:
        source: 'flip ? rshiftNLimit<Signature>(val, neg<Tiny>(n)) : lshiftNLimit<Signature>(val, n)'
        if: 
          SliceExpr:
            source: 'flip'
            var: flip
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftNLimit<Signature>(val, neg<Tiny>(n))'
            name: rshiftNLimit_6561
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              FuncExpr:
                source: 'neg<Tiny>(n)'
                name: neg_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
        else:
          FuncExpr:
            source: 'lshiftNLimit<Signature>(val, n)'
            name: lshiftNLimit_6561
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature lshiftNLimit<Signature>(Signature val, Tiny n) {
#   zero = notLess[cmp<Tiny>(n, 6561)]
#   return zero ? 0 : lshiftN2<Signature, P>(val, n)
# }
  lshiftNLimit_6561:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      zero:
        LutExpr:
          name: notLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 6561)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '6561'
                      trits: '000000001'
                      trytes: '99I'
    return: 
    # zero ? 0 : lshiftN2<Signature, P>(val, n)
      CondExpr:
        source: 'zero ? 0 : lshiftN2<Signature, P>(val, n)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          ValueExpr:
              value: '0'
              trits
              trytes
        else:
          FuncExpr:
            source: 'lshiftN2<Signature, P>(val, n)'
            name: lshiftN2_6561_2187
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature rshiftN<Signature>(Signature val, Tiny n) {
#   flip = isNegative[sign<Tiny>(n)]
#   return flip ? lshiftNLimit<Signature>(val, neg<Tiny>(n)) : rshiftNLimit<Signature>(val, n)
# }
  rshiftN_6561:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      flip:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(n)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
    return: 
    # flip ? lshiftNLimit<Signature>(val, neg<Tiny>(n)) : rshiftNLimit<Signature>(val, n)
      CondExpr:
        source: 'flip ? lshiftNLimit<Signature>(val, neg<Tiny>(n)) : rshiftNLimit<Signature>(val, n)'
        if: 
          SliceExpr:
            source: 'flip'
            var: flip
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftNLimit<Signature>(val, neg<Tiny>(n))'
            name: lshiftNLimit_6561
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              FuncExpr:
                source: 'neg<Tiny>(n)'
                name: neg_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
        else:
          FuncExpr:
            source: 'rshiftNLimit<Signature>(val, n)'
            name: rshiftNLimit_6561
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature rshiftNLimit<Signature>(Signature val, Tiny n) {
#   zero = notLess[cmp<Tiny>(n, 6561)]
#   return zero ? 0 : rshiftN2<Signature, P>(val, n)
# }
  rshiftNLimit_6561:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      zero:
        LutExpr:
          name: notLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 6561)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '6561'
                      trits: '000000001'
                      trytes: '99I'
    return: 
    # zero ? 0 : rshiftN2<Signature, P>(val, n)
      CondExpr:
        source: 'zero ? 0 : rshiftN2<Signature, P>(val, n)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          ValueExpr:
              value: '0'
              trits
              trytes
        else:
          FuncExpr:
            source: 'rshiftN2<Signature, P>(val, n)'
            name: rshiftN2_6561_2187
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature rshiftN2<Signature, P>(Signature val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 2187)]
#   return less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, P>(val, n)
# }
  rshiftN2_6561_2187:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 2187)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '2187'
                      trits: '000000010'
                      trytes: '99C'
    return: 
    # less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, P>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, P>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Signature, Q>(val, n)'
            name: rshiftN2_6561_729
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Signature, P>(val, n)'
            name: rshiftN2Shift_6561_2187
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature rshiftN2Shift<Signature, P>(Signature val, Tiny n) {
#   newVal = as<P>(0) & val[0 : Signature - P]
#   newN = sub<Tiny>(n, 2187)
#   return rshiftN2<Signature, P>(newVal, newN)
# }
  rshiftN2Shift_6561_2187:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<P>(0) & val[0 : Signature - P]'
          lhs: 
            FuncExpr:
              source: 'as<P>(0)'
              name: as_2187
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits
                    trytes
          rhs: 
            SliceExpr:
              source: 'val[0 : Signature - P]'
              var: val
              offset: 0
              size: 4374
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Signature
                      size: 6561
                  rhs: 
                    ConstTypeName:
                      typeName: P
                      size: 2187
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 2187)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '2187'
                trits: '000000010'
                trytes: '99C'
    return: 
    # rshiftN2<Signature, P>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Signature, P>(newVal, newN)'
        name: rshiftN2_6561_2187
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 6561
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Signature rshiftN2<Signature, Q>(Signature val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 729)]
#   return less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)
# }
  rshiftN2_6561_729:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 729)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '729'
                      trits: '000000100'
                      trytes: '99A'
    return: 
    # less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Signature, Q>(val, n)'
            name: rshiftN2_6561_243
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Signature, Q>(val, n)'
            name: rshiftN2Shift_6561_729
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature rshiftN2Shift<Signature, Q>(Signature val, Tiny n) {
#   newVal = as<Q>(0) & val[0 : Signature - Q]
#   newN = sub<Tiny>(n, 729)
#   return rshiftN2<Signature, Q>(newVal, newN)
# }
  rshiftN2Shift_6561_729:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<Q>(0) & val[0 : Signature - Q]'
          lhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_729
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits
                    trytes: '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
          rhs: 
            SliceExpr:
              source: 'val[0 : Signature - Q]'
              var: val
              offset: 0
              size: 5832
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Signature
                      size: 6561
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 729
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 729)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '729'
                trits: '000000100'
                trytes: '99A'
    return: 
    # rshiftN2<Signature, Q>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Signature, Q>(newVal, newN)'
        name: rshiftN2_6561_729
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 6561
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Signature rshiftN2<Signature, Q>(Signature val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 243)]
#   return less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)
# }
  rshiftN2_6561_243:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 243)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '243'
                      trits: '000001000'
                      trytes: '9I9'
    return: 
    # less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Signature, Q>(val, n)'
            name: rshiftN2_6561_81
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Signature, Q>(val, n)'
            name: rshiftN2Shift_6561_243
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature rshiftN2Shift<Signature, Q>(Signature val, Tiny n) {
#   newVal = as<Q>(0) & val[0 : Signature - Q]
#   newN = sub<Tiny>(n, 243)
#   return rshiftN2<Signature, Q>(newVal, newN)
# }
  rshiftN2Shift_6561_243:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<Q>(0) & val[0 : Signature - Q]'
          lhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_243
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                    trytes: '999999999999999999999999999999999999999999999999999999999999999999999999999999999'
          rhs: 
            SliceExpr:
              source: 'val[0 : Signature - Q]'
              var: val
              offset: 0
              size: 6318
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Signature
                      size: 6561
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 243
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 243)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '243'
                trits: '000001000'
                trytes: '9I9'
    return: 
    # rshiftN2<Signature, Q>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Signature, Q>(newVal, newN)'
        name: rshiftN2_6561_243
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 6561
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Signature rshiftN2<Signature, Q>(Signature val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 81)]
#   return less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)
# }
  rshiftN2_6561_81:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 81)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '81'
                      trits: '000010000'
                      trytes: '9C9'
    return: 
    # less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Signature, Q>(val, n)'
            name: rshiftN2_6561_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Signature, Q>(val, n)'
            name: rshiftN2Shift_6561_81
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature rshiftN2Shift<Signature, Q>(Signature val, Tiny n) {
#   newVal = as<Q>(0) & val[0 : Signature - Q]
#   newN = sub<Tiny>(n, 81)
#   return rshiftN2<Signature, Q>(newVal, newN)
# }
  rshiftN2Shift_6561_81:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<Q>(0) & val[0 : Signature - Q]'
          lhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_81
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                    trytes: '999999999999999999999999999'
          rhs: 
            SliceExpr:
              source: 'val[0 : Signature - Q]'
              var: val
              offset: 0
              size: 6480
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Signature
                      size: 6561
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 81
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 81)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '81'
                trits: '000010000'
                trytes: '9C9'
    return: 
    # rshiftN2<Signature, Q>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Signature, Q>(newVal, newN)'
        name: rshiftN2_6561_81
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 6561
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Signature rshiftN2<Signature, Q>(Signature val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 27)]
#   return less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)
# }
  rshiftN2_6561_27:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 27)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '27'
                      trits: '000100000'
                      trytes: '9A9'
    return: 
    # less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Signature, Q>(val, n)'
            name: rshiftN2_6561_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Signature, Q>(val, n)'
            name: rshiftN2Shift_6561_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature rshiftN2Shift<Signature, Q>(Signature val, Tiny n) {
#   newVal = as<Q>(0) & val[0 : Signature - Q]
#   newN = sub<Tiny>(n, 27)
#   return rshiftN2<Signature, Q>(newVal, newN)
# }
  rshiftN2Shift_6561_27:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<Q>(0) & val[0 : Signature - Q]'
          lhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_27
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000000000000000000000'
                    trytes: '999999999'
          rhs: 
            SliceExpr:
              source: 'val[0 : Signature - Q]'
              var: val
              offset: 0
              size: 6534
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Signature
                      size: 6561
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 27
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 27)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '27'
                trits: '000100000'
                trytes: '9A9'
    return: 
    # rshiftN2<Signature, Q>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Signature, Q>(newVal, newN)'
        name: rshiftN2_6561_27
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 6561
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Signature rshiftN2<Signature, Q>(Signature val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 9)]
#   return less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)
# }
  rshiftN2_6561_9:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 9)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '9'
                      trits: '001000000'
                      trytes: 'I99'
    return: 
    # less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Signature, Q>(val, n)'
            name: rshiftN2_6561_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Signature, Q>(val, n)'
            name: rshiftN2Shift_6561_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature rshiftN2Shift<Signature, Q>(Signature val, Tiny n) {
#   newVal = as<Q>(0) & val[0 : Signature - Q]
#   newN = sub<Tiny>(n, 9)
#   return rshiftN2<Signature, Q>(newVal, newN)
# }
  rshiftN2Shift_6561_9:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<Q>(0) & val[0 : Signature - Q]'
          lhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_9
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000'
                    trytes: '999'
          rhs: 
            SliceExpr:
              source: 'val[0 : Signature - Q]'
              var: val
              offset: 0
              size: 6552
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Signature
                      size: 6561
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 9
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 9)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '9'
                trits: '001000000'
                trytes: 'I99'
    return: 
    # rshiftN2<Signature, Q>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Signature, Q>(newVal, newN)'
        name: rshiftN2_6561_9
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 6561
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Signature rshiftN2<Signature, Q>(Signature val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 3)]
#   return less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)
# }
  rshiftN2_6561_3:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 3)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '3'
                      trits: '010000000'
                      trytes: 'C99'
    return: 
    # less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)
      CondExpr:
        source: 'less ? rshiftN2<Signature, Q>(val, n) : rshiftN2Shift<Signature, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'rshiftN2<Signature, Q>(val, n)'
            name: rshiftN2_6561_1
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'rshiftN2Shift<Signature, Q>(val, n)'
            name: rshiftN2Shift_6561_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature rshiftN2Shift<Signature, Q>(Signature val, Tiny n) {
#   newVal = as<Q>(0) & val[0 : Signature - Q]
#   newN = sub<Tiny>(n, 3)
#   return rshiftN2<Signature, Q>(newVal, newN)
# }
  rshiftN2Shift_6561_3:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'as<Q>(0) & val[0 : Signature - Q]'
          lhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_3
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000'
                    trytes: '9'
          rhs: 
            SliceExpr:
              source: 'val[0 : Signature - Q]'
              var: val
              offset: 0
              size: 6558
              start:
                ConstNumber:
                  value: 0
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Signature
                      size: 6561
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 3
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 3)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '3'
                trits: '010000000'
                trytes: 'C99'
    return: 
    # rshiftN2<Signature, Q>(newVal, newN)
      FuncExpr:
        source: 'rshiftN2<Signature, Q>(newVal, newN)'
        name: rshiftN2_6561_3
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 6561
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Signature rshiftN2<Signature, Trit>(Signature val, Tiny n) {
#   n0 = n[0]
#   zero = isZero[n0] ? val : null
#   one = n0 ? 0 & val[0 : Signature - 1] : null
#   two = isMin[n0] ? 0 & 0 & val[0 : Signature - 2] : null
#   return zero | one | two
# }
  rshiftN2_6561_1:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      n0:
        SliceExpr:
          source: 'n[0]'
          var: n
          offset: 0
          size: 1
          start:
            ConstNumber:
              value: 0
      zero:
        CondExpr:
          source: 'isZero[n0] ? val : null'
          if: 
            LutExpr:
              name: isZero
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 6561
          else:
            NullExpr: ''
      one:
        CondExpr:
          source: 'n0 ? 0 & val[0 : Signature - 1] : null'
          if: 
            SliceExpr:
              source: 'n0'
              var: n0
              offset: 0
              size: 1
          then: 
            ConcatExpr:
              source: '0 & val[0 : Signature - 1]'
              lhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
              rhs: 
                SliceExpr:
                  source: 'val[0 : Signature - 1]'
                  var: val
                  offset: 0
                  size: 6560
                  start:
                    ConstNumber:
                      value: 0
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Signature
                          size: 6561
                      rhs: 
                        ConstNumber:
                          value: 1
          else:
            NullExpr: ''
      two:
        CondExpr:
          source: 'isMin[n0] ? 0 & 0 & val[0 : Signature - 2] : null'
          if: 
            LutExpr:
              name: isMin
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            ConcatExpr:
              source: '0 & 0 & val[0 : Signature - 2]'
              lhs: 
                ConcatExpr:
                  source: '0 & 0'
                  lhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
                  rhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
              rhs: 
                SliceExpr:
                  source: 'val[0 : Signature - 2]'
                  var: val
                  offset: 0
                  size: 6559
                  start:
                    ConstNumber:
                      value: 0
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Signature
                          size: 6561
                      rhs: 
                        ConstNumber:
                          value: 2
          else:
            NullExpr: ''
    return: 
    # zero | one | two
      MergeExpr:
        source: 'zero | one | two'
        lhs: 
          MergeExpr:
            source: 'zero | one'
            lhs: 
              SliceExpr:
                source: 'zero'
                var: zero
                offset: 0
                size: 6561
            rhs: 
              SliceExpr:
                source: 'one'
                var: one
                offset: 0
                size: 6561
        rhs: 
          SliceExpr:
            source: 'two'
            var: two
            offset: 0
            size: 6561
# 
# func Q as<Q>(Q val) {
#   return val
# }
  as_243:
    returnType: 
      ConstTypeName:
        typeName: Q
        size: 243
    params:
      - 
        argName: val
        size: 243
        type: 
          ConstTypeName:
            typeName: Q
            size: 243
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 243
# 
# func Q as<Q>(Q val) {
#   return val
# }
  as_729:
    returnType: 
      ConstTypeName:
        typeName: Q
        size: 729
    params:
      - 
        argName: val
        size: 729
        type: 
          ConstTypeName:
            typeName: Q
            size: 729
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 729
# 
# func P as<P>(P val) {
#   return val
# }
  as_2187:
    returnType: 
      ConstTypeName:
        typeName: P
        size: 2187
    params:
      - 
        argName: val
        size: 2187
        type: 
          ConstTypeName:
            typeName: P
            size: 2187
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 2187
# 
# func Signature lshiftN2<Signature, P>(Signature val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 2187)]
#   return less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, P>(val, n)
# }
  lshiftN2_6561_2187:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 2187)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '2187'
                      trits: '000000010'
                      trytes: '99C'
    return: 
    # less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, P>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, P>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Signature, Q>(val, n)'
            name: lshiftN2_6561_729
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Signature, P>(val, n)'
            name: lshiftN2Shift_6561_2187
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature lshiftN2Shift<Signature, P>(Signature val, Tiny n) {
#   newVal = val[P : Signature - P] & as<P>(0)
#   newN = sub<Tiny>(n, 2187)
#   return lshiftN2<Signature, P>(newVal, newN)
# }
  lshiftN2Shift_6561_2187:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[P : Signature - P] & as<P>(0)'
          lhs: 
            SliceExpr:
              source: 'val[P : Signature - P]'
              var: val
              offset: 2187
              size: 4374
              start:
                ConstTypeName:
                  typeName: P
                  size: 2187
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Signature
                      size: 6561
                  rhs: 
                    ConstTypeName:
                      typeName: P
                      size: 2187
          rhs: 
            FuncExpr:
              source: 'as<P>(0)'
              name: as_2187
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits
                    trytes
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 2187)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '2187'
                trits: '000000010'
                trytes: '99C'
    return: 
    # lshiftN2<Signature, P>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Signature, P>(newVal, newN)'
        name: lshiftN2_6561_2187
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 6561
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Signature lshiftN2<Signature, Q>(Signature val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 729)]
#   return less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)
# }
  lshiftN2_6561_729:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 729)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '729'
                      trits: '000000100'
                      trytes: '99A'
    return: 
    # less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Signature, Q>(val, n)'
            name: lshiftN2_6561_243
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Signature, Q>(val, n)'
            name: lshiftN2Shift_6561_729
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature lshiftN2Shift<Signature, Q>(Signature val, Tiny n) {
#   newVal = val[Q : Signature - Q] & as<Q>(0)
#   newN = sub<Tiny>(n, 729)
#   return lshiftN2<Signature, Q>(newVal, newN)
# }
  lshiftN2Shift_6561_729:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[Q : Signature - Q] & as<Q>(0)'
          lhs: 
            SliceExpr:
              source: 'val[Q : Signature - Q]'
              var: val
              offset: 729
              size: 5832
              start:
                ConstTypeName:
                  typeName: Q
                  size: 729
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Signature
                      size: 6561
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 729
          rhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_729
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits
                    trytes: '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 729)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '729'
                trits: '000000100'
                trytes: '99A'
    return: 
    # lshiftN2<Signature, Q>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Signature, Q>(newVal, newN)'
        name: lshiftN2_6561_729
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 6561
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Signature lshiftN2<Signature, Q>(Signature val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 243)]
#   return less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)
# }
  lshiftN2_6561_243:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 243)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '243'
                      trits: '000001000'
                      trytes: '9I9'
    return: 
    # less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Signature, Q>(val, n)'
            name: lshiftN2_6561_81
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Signature, Q>(val, n)'
            name: lshiftN2Shift_6561_243
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature lshiftN2Shift<Signature, Q>(Signature val, Tiny n) {
#   newVal = val[Q : Signature - Q] & as<Q>(0)
#   newN = sub<Tiny>(n, 243)
#   return lshiftN2<Signature, Q>(newVal, newN)
# }
  lshiftN2Shift_6561_243:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[Q : Signature - Q] & as<Q>(0)'
          lhs: 
            SliceExpr:
              source: 'val[Q : Signature - Q]'
              var: val
              offset: 243
              size: 6318
              start:
                ConstTypeName:
                  typeName: Q
                  size: 243
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Signature
                      size: 6561
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 243
          rhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_243
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                    trytes: '999999999999999999999999999999999999999999999999999999999999999999999999999999999'
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 243)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '243'
                trits: '000001000'
                trytes: '9I9'
    return: 
    # lshiftN2<Signature, Q>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Signature, Q>(newVal, newN)'
        name: lshiftN2_6561_243
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 6561
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Signature lshiftN2<Signature, Q>(Signature val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 81)]
#   return less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)
# }
  lshiftN2_6561_81:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 81)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '81'
                      trits: '000010000'
                      trytes: '9C9'
    return: 
    # less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Signature, Q>(val, n)'
            name: lshiftN2_6561_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Signature, Q>(val, n)'
            name: lshiftN2Shift_6561_81
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature lshiftN2Shift<Signature, Q>(Signature val, Tiny n) {
#   newVal = val[Q : Signature - Q] & as<Q>(0)
#   newN = sub<Tiny>(n, 81)
#   return lshiftN2<Signature, Q>(newVal, newN)
# }
  lshiftN2Shift_6561_81:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[Q : Signature - Q] & as<Q>(0)'
          lhs: 
            SliceExpr:
              source: 'val[Q : Signature - Q]'
              var: val
              offset: 81
              size: 6480
              start:
                ConstTypeName:
                  typeName: Q
                  size: 81
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Signature
                      size: 6561
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 81
          rhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_81
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                    trytes: '999999999999999999999999999'
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 81)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '81'
                trits: '000010000'
                trytes: '9C9'
    return: 
    # lshiftN2<Signature, Q>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Signature, Q>(newVal, newN)'
        name: lshiftN2_6561_81
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 6561
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Signature lshiftN2<Signature, Q>(Signature val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 27)]
#   return less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)
# }
  lshiftN2_6561_27:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 27)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '27'
                      trits: '000100000'
                      trytes: '9A9'
    return: 
    # less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Signature, Q>(val, n)'
            name: lshiftN2_6561_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Signature, Q>(val, n)'
            name: lshiftN2Shift_6561_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature lshiftN2Shift<Signature, Q>(Signature val, Tiny n) {
#   newVal = val[Q : Signature - Q] & as<Q>(0)
#   newN = sub<Tiny>(n, 27)
#   return lshiftN2<Signature, Q>(newVal, newN)
# }
  lshiftN2Shift_6561_27:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[Q : Signature - Q] & as<Q>(0)'
          lhs: 
            SliceExpr:
              source: 'val[Q : Signature - Q]'
              var: val
              offset: 27
              size: 6534
              start:
                ConstTypeName:
                  typeName: Q
                  size: 27
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Signature
                      size: 6561
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 27
          rhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_27
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000000000000000000000'
                    trytes: '999999999'
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 27)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '27'
                trits: '000100000'
                trytes: '9A9'
    return: 
    # lshiftN2<Signature, Q>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Signature, Q>(newVal, newN)'
        name: lshiftN2_6561_27
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 6561
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Signature lshiftN2<Signature, Q>(Signature val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 9)]
#   return less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)
# }
  lshiftN2_6561_9:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 9)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '9'
                      trits: '001000000'
                      trytes: 'I99'
    return: 
    # less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Signature, Q>(val, n)'
            name: lshiftN2_6561_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Signature, Q>(val, n)'
            name: lshiftN2Shift_6561_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature lshiftN2Shift<Signature, Q>(Signature val, Tiny n) {
#   newVal = val[Q : Signature - Q] & as<Q>(0)
#   newN = sub<Tiny>(n, 9)
#   return lshiftN2<Signature, Q>(newVal, newN)
# }
  lshiftN2Shift_6561_9:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[Q : Signature - Q] & as<Q>(0)'
          lhs: 
            SliceExpr:
              source: 'val[Q : Signature - Q]'
              var: val
              offset: 9
              size: 6552
              start:
                ConstTypeName:
                  typeName: Q
                  size: 9
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Signature
                      size: 6561
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 9
          rhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_9
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000000000'
                    trytes: '999'
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 9)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '9'
                trits: '001000000'
                trytes: 'I99'
    return: 
    # lshiftN2<Signature, Q>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Signature, Q>(newVal, newN)'
        name: lshiftN2_6561_9
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 6561
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Signature lshiftN2<Signature, Q>(Signature val, Tiny n) {
#   less = isLess[cmp<Tiny>(n, 3)]
#   return less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)
# }
  lshiftN2_6561_3:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      less:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(n, 3)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'n'
                    var: n
                    offset: 0
                    size: 9
                - 
                  SizeofExpr:
                      value: '3'
                      trits: '010000000'
                      trytes: 'C99'
    return: 
    # less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)
      CondExpr:
        source: 'less ? lshiftN2<Signature, Q>(val, n) : lshiftN2Shift<Signature, Q>(val, n)'
        if: 
          SliceExpr:
            source: 'less'
            var: less
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'lshiftN2<Signature, Q>(val, n)'
            name: lshiftN2_6561_1
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
        else:
          FuncExpr:
            source: 'lshiftN2Shift<Signature, Q>(val, n)'
            name: lshiftN2Shift_6561_3
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 6561
            - 
              SliceExpr:
                source: 'n'
                var: n
                offset: 0
                size: 9
# 
# func Signature lshiftN2Shift<Signature, Q>(Signature val, Tiny n) {
#   newVal = val[Q : Signature - Q] & as<Q>(0)
#   newN = sub<Tiny>(n, 3)
#   return lshiftN2<Signature, Q>(newVal, newN)
# }
  lshiftN2Shift_6561_3:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      newVal:
        ConcatExpr:
          source: 'val[Q : Signature - Q] & as<Q>(0)'
          lhs: 
            SliceExpr:
              source: 'val[Q : Signature - Q]'
              var: val
              offset: 3
              size: 6558
              start:
                ConstTypeName:
                  typeName: Q
                  size: 3
              end:
                ConstExpr:
                  operator: '-'
                  lhs: 
                    ConstTypeName:
                      typeName: Signature
                      size: 6561
                  rhs: 
                    ConstTypeName:
                      typeName: Q
                      size: 3
          rhs: 
            FuncExpr:
              source: 'as<Q>(0)'
              name: as_3
              args:
              - 
                ValueExpr:
                    value: '0'
                    trits: '000'
                    trytes: '9'
      newN:
        FuncExpr:
          source: 'sub<Tiny>(n, 3)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'n'
              var: n
              offset: 0
              size: 9
          - 
            SizeofExpr:
                value: '3'
                trits: '010000000'
                trytes: 'C99'
    return: 
    # lshiftN2<Signature, Q>(newVal, newN)
      FuncExpr:
        source: 'lshiftN2<Signature, Q>(newVal, newN)'
        name: lshiftN2_6561_3
        args:
        - 
          SliceExpr:
            source: 'newVal'
            var: newVal
            offset: 0
            size: 6561
        - 
          SliceExpr:
            source: 'newN'
            var: newN
            offset: 0
            size: 9
# 
# func Signature lshiftN2<Signature, Trit>(Signature val, Tiny n) {
#   n0 = n[0]
#   zero = isZero[n0] ? val : null
#   one = n0 ? val[1 : Signature - 1] & 0 : null
#   two = isMin[n0] ? val[2 : Signature - 2] & 0 & 0 : null
#   return zero | one | two
# }
  lshiftN2_6561_1:
    returnType: 
      ConstTypeName:
        typeName: Signature
        size: 6561
    params:
      - 
        argName: val
        size: 6561
        type: 
          ConstTypeName:
            typeName: Signature
            size: 6561
      - 
        argName: n
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      n0:
        SliceExpr:
          source: 'n[0]'
          var: n
          offset: 0
          size: 1
          start:
            ConstNumber:
              value: 0
      zero:
        CondExpr:
          source: 'isZero[n0] ? val : null'
          if: 
            LutExpr:
              name: isZero
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 6561
          else:
            NullExpr: ''
      one:
        CondExpr:
          source: 'n0 ? val[1 : Signature - 1] & 0 : null'
          if: 
            SliceExpr:
              source: 'n0'
              var: n0
              offset: 0
              size: 1
          then: 
            ConcatExpr:
              source: 'val[1 : Signature - 1] & 0'
              lhs: 
                SliceExpr:
                  source: 'val[1 : Signature - 1]'
                  var: val
                  offset: 1
                  size: 6560
                  start:
                    ConstNumber:
                      value: 1
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: Signature
                          size: 6561
                      rhs: 
                        ConstNumber:
                          value: 1
              rhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
          else:
            NullExpr: ''
      two:
        CondExpr:
          source: 'isMin[n0] ? val[2 : Signature - 2] & 0 & 0 : null'
          if: 
            LutExpr:
              name: isMin
              args: 
                - 
                  SliceExpr:
                    source: 'n0'
                    var: n0
                    offset: 0
                    size: 1
          then: 
            ConcatExpr:
              source: 'val[2 : Signature - 2] & 0 & 0'
              lhs: 
                ConcatExpr:
                  source: 'val[2 : Signature - 2] & 0'
                  lhs: 
                    SliceExpr:
                      source: 'val[2 : Signature - 2]'
                      var: val
                      offset: 2
                      size: 6559
                      start:
                        ConstNumber:
                          value: 2
                      end:
                        ConstExpr:
                          operator: '-'
                          lhs: 
                            ConstTypeName:
                              typeName: Signature
                              size: 6561
                          rhs: 
                            ConstNumber:
                              value: 2
                  rhs: 
                    ValueExpr:
                        value: '0'
                        trits: '0'
                        trytes: '9'
              rhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
          else:
            NullExpr: ''
    return: 
    # zero | one | two
      MergeExpr:
        source: 'zero | one | two'
        lhs: 
          MergeExpr:
            source: 'zero | one'
            lhs: 
              SliceExpr:
                source: 'zero'
                var: zero
                offset: 0
                size: 6561
            rhs: 
              SliceExpr:
                source: 'one'
                var: one
                offset: 0
                size: 6561
        rhs: 
          SliceExpr:
            source: 'two'
            var: two
            offset: 0
            size: 6561
# 
# func Transaction map<Hash, Transaction>(Trit cmd, Hash key, Transaction value) {
#   param = Traversal{
#     cmd = cmd
#     key = key
#     value = value
#   }
#   return traverse<Hash, Transaction>(param)
# }
  map_243_8019:
    returnType: 
      ConstTypeName:
        typeName: Transaction
        size: 8019
        fields:
          signature: 
            size: '6561'
            offset: '0'
          extraDataDigest: 
            size: '243'
            offset: '6561'
          address: 
            size: '243'
            offset: '6804'
          value: 
            size: '81'
            offset: '7047'
          issuanceTimestamp: 
            size: '27'
            offset: '7128'
          timelockLowerBound: 
            size: '27'
            offset: '7155'
          timelockUpperBound: 
            size: '27'
            offset: '7182'
          bundle: 
            size: '81'
            offset: '7209'
          trunk: 
            size: '243'
            offset: '7290'
          branch: 
            size: '243'
            offset: '7533'
          tag: 
            size: '81'
            offset: '7776'
          attachment: 
            size: '81'
            offset: '7857'
          nonce: 
            size: '81'
            offset: '7938'
    params:
      - 
        argName: cmd
        size: 1
        type: 
          ConstTypeName:
            typeName: Trit
            size: 1
      - 
        argName: key
        size: 243
        type: 
          ConstTypeName:
            typeName: Hash
            size: 243
      - 
        argName: value
        size: 8019
        type: 
          ConstTypeName:
            typeName: Transaction
            size: 8019
            fields:
              signature: 
                size: '6561'
                offset: '0'
              extraDataDigest: 
                size: '243'
                offset: '6561'
              address: 
                size: '243'
                offset: '6804'
              value: 
                size: '81'
                offset: '7047'
              issuanceTimestamp: 
                size: '27'
                offset: '7128'
              timelockLowerBound: 
                size: '27'
                offset: '7155'
              timelockUpperBound: 
                size: '27'
                offset: '7182'
              bundle: 
                size: '81'
                offset: '7209'
              trunk: 
                size: '243'
                offset: '7290'
              branch: 
                size: '243'
                offset: '7533'
              tag: 
                size: '81'
                offset: '7776'
              attachment: 
                size: '81'
                offset: '7857'
              nonce: 
                size: '81'
                offset: '7938'
    assigns: 
      param:
        TypeExpr:
          source: 'Traversal{ /   cmd = cmd /   key = key /   value = value / }'
          type: 
            ConstTypeName:
              typeName: Traversal
              size: 8263
              fields:
                cmd: 
                  size: '1'
                  offset: '0'
                key: 
                  size: '243'
                  offset: '1'
                value: 
                  size: '8019'
                  offset: '244'
          fieldValues: 
            cmd:
              SliceExpr:
                source: 'cmd'
                var: cmd
                offset: 0
                size: 1
            key:
              SliceExpr:
                source: 'key'
                var: key
                offset: 0
                size: 243
            value:
              SliceExpr:
                source: 'value'
                var: value
                offset: 0
                size: 8019
    return: 
    # traverse<Hash, Transaction>(param)
      FuncExpr:
        source: 'traverse<Hash, Transaction>(param)'
        name: traverse_243_8019
        args:
        - 
          SliceExpr:
            source: 'param'
            var: param
            offset: 0
            size: 8263
# 
# func Transaction traverse<Hash, Transaction>(Traversal param) {
#   keyZero = isZero[sign<Hash>(param.key)]
#   keyTrit = param.key[0]
#   return keyZero ? leaf<Hash, Transaction>(param) : isOne[keyTrit] ? traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param)) : isZero[keyTrit] ? traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param)) : isMin[keyTrit] ? traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param)) : null
# }
  traverse_243_8019:
    returnType: 
      ConstTypeName:
        typeName: Transaction
        size: 8019
        fields:
          signature: 
            size: '6561'
            offset: '0'
          extraDataDigest: 
            size: '243'
            offset: '6561'
          address: 
            size: '243'
            offset: '6804'
          value: 
            size: '81'
            offset: '7047'
          issuanceTimestamp: 
            size: '27'
            offset: '7128'
          timelockLowerBound: 
            size: '27'
            offset: '7155'
          timelockUpperBound: 
            size: '27'
            offset: '7182'
          bundle: 
            size: '81'
            offset: '7209'
          trunk: 
            size: '243'
            offset: '7290'
          branch: 
            size: '243'
            offset: '7533'
          tag: 
            size: '81'
            offset: '7776'
          attachment: 
            size: '81'
            offset: '7857'
          nonce: 
            size: '81'
            offset: '7938'
    params:
      - 
        argName: param
        size: 8263
        type: 
          ConstTypeName:
            typeName: Traversal
            size: 8263
            fields:
              cmd: 
                size: '1'
                offset: '0'
              key: 
                size: '243'
                offset: '1'
              value: 
                size: '8019'
                offset: '244'
    assigns: 
      keyZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Hash>(param.key)'
                name: sign_243
                args:
                - 
                  SliceExpr:
                    source: 'param.key'
                    var: param
                    offset: 1
                    size: 243
                    fields: 
                      - key
      keyTrit:
        SliceExpr:
          source: 'param.key[0]'
          var: param
          offset: 1
          size: 1
          fields: 
            - key
          start:
            ConstNumber:
              value: 0
    return: 
    # keyZero ? leaf<Hash, Transaction>(param) : isOne[keyTrit] ? traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param)) : isZero[keyTrit] ? traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param)) : isMin[keyTrit] ? traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param)) : null
      CondExpr:
        source: 'keyZero ? leaf<Hash, Transaction>(param) : isOne[keyTrit] ? traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param)) : isZero[keyTrit] ? traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param)) : isMin[keyTrit] ? traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param)) : null'
        if: 
          SliceExpr:
            source: 'keyZero'
            var: keyZero
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'leaf<Hash, Transaction>(param)'
            name: leaf_243_8019
            args:
            - 
              SliceExpr:
                source: 'param'
                var: param
                offset: 0
                size: 8263
        else:
          CondExpr:
            source: 'isOne[keyTrit] ? traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param)) : isZero[keyTrit] ? traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param)) : isMin[keyTrit] ? traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param)) : null'
            if: 
              LutExpr:
                name: isOne
                args: 
                  - 
                    SliceExpr:
                      source: 'keyTrit'
                      var: keyTrit
                      offset: 0
                      size: 1
            then: 
              FuncExpr:
                source: 'traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param))'
                name: traverse_243_8019
                args:
                - 
                  FuncExpr:
                    source: 'traverseNext<Hash, Transaction>(keyZero, param)'
                    name: traverseNext_243_8019
                    args:
                    - 
                      SliceExpr:
                        source: 'keyZero'
                        var: keyZero
                        offset: 0
                        size: 1
                    - 
                      SliceExpr:
                        source: 'param'
                        var: param
                        offset: 0
                        size: 8263
            else:
              CondExpr:
                source: 'isZero[keyTrit] ? traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param)) : isMin[keyTrit] ? traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param)) : null'
                if: 
                  LutExpr:
                    name: isZero
                    args: 
                      - 
                        SliceExpr:
                          source: 'keyTrit'
                          var: keyTrit
                          offset: 0
                          size: 1
                then: 
                  FuncExpr:
                    source: 'traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param))'
                    name: traverse_243_8019
                    args:
                    - 
                      FuncExpr:
                        source: 'traverseNext<Hash, Transaction>(keyZero, param)'
                        name: traverseNext_243_8019
                        args:
                        - 
                          SliceExpr:
                            source: 'keyZero'
                            var: keyZero
                            offset: 0
                            size: 1
                        - 
                          SliceExpr:
                            source: 'param'
                            var: param
                            offset: 0
                            size: 8263
                else:
                  CondExpr:
                    source: 'isMin[keyTrit] ? traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param)) : null'
                    if: 
                      LutExpr:
                        name: isMin
                        args: 
                          - 
                            SliceExpr:
                              source: 'keyTrit'
                              var: keyTrit
                              offset: 0
                              size: 1
                    then: 
                      FuncExpr:
                        source: 'traverse<Hash, Transaction>(traverseNext<Hash, Transaction>(keyZero, param))'
                        name: traverse_243_8019
                        args:
                        - 
                          FuncExpr:
                            source: 'traverseNext<Hash, Transaction>(keyZero, param)'
                            name: traverseNext_243_8019
                            args:
                            - 
                              SliceExpr:
                                source: 'keyZero'
                                var: keyZero
                                offset: 0
                                size: 1
                            - 
                              SliceExpr:
                                source: 'param'
                                var: param
                                offset: 0
                                size: 8263
                    else:
                      NullExpr: ''
# 
# func Traversal traverseNext<Hash, Transaction>(Bool keyZero, Traversal param) {
#   return not[keyZero] ? Traversal{
#     cmd = param.cmd
#     key = lshift<Hash>(param.key)
#     value = param.value
#   } : null
# }
  traverseNext_243_8019:
    returnType: 
      ConstTypeName:
        typeName: Traversal
        size: 8263
        fields:
          cmd: 
            size: '1'
            offset: '0'
          key: 
            size: '243'
            offset: '1'
          value: 
            size: '8019'
            offset: '244'
    params:
      - 
        argName: keyZero
        size: 1
        type: 
          ConstTypeName:
            typeName: Bool
            size: 1
      - 
        argName: param
        size: 8263
        type: 
          ConstTypeName:
            typeName: Traversal
            size: 8263
            fields:
              cmd: 
                size: '1'
                offset: '0'
              key: 
                size: '243'
                offset: '1'
              value: 
                size: '8019'
                offset: '244'
    return: 
    # not[keyZero] ? Traversal{
    #   cmd = param.cmd
    #   key = lshift<Hash>(param.key)
    #   value = param.value
    # } : null
      CondExpr:
        source: 'not[keyZero] ? Traversal{
  cmd = param.cmd
  key = lshift<Hash>(param.key)
  value = param.value
} : null'
        if: 
          LutExpr:
            name: not
            args: 
              - 
                SliceExpr:
                  source: 'keyZero'
                  var: keyZero
                  offset: 0
                  size: 1
        then: 
          TypeExpr:
            source: 'Traversal{ /   cmd = param.cmd /   key = lshift<Hash>(param.key) /   value = param.value / }'
            type: 
              ConstTypeName:
                typeName: Traversal
                size: 8263
                fields:
                  cmd: 
                    size: '1'
                    offset: '0'
                  key: 
                    size: '243'
                    offset: '1'
                  value: 
                    size: '8019'
                    offset: '244'
            fieldValues: 
              cmd:
                SliceExpr:
                  source: 'param.cmd'
                  var: param
                  offset: 0
                  size: 1
                  fields: 
                    - cmd
              key:
                FuncExpr:
                  source: 'lshift<Hash>(param.key)'
                  name: lshift_243
                  args:
                  - 
                    SliceExpr:
                      source: 'param.key'
                      var: param
                      offset: 1
                      size: 243
                      fields: 
                        - key
              value:
                SliceExpr:
                  source: 'param.value'
                  var: param
                  offset: 244
                  size: 8019
                  fields: 
                    - value
        else:
          NullExpr: ''
# 
# func Transaction leaf<Hash, Transaction>(Traversal param) {
#   state Transaction value
#   oldValue = value
#   cmd = param.cmd
#   value = isZero[cmd] ? oldValue : isOne[cmd] ? param.value : isMin[cmd] ? 0 : null
#   return oldValue
# }
  leaf_243_8019:
    returnType: 
      ConstTypeName:
        typeName: Transaction
        size: 8019
        fields:
          signature: 
            size: '6561'
            offset: '0'
          extraDataDigest: 
            size: '243'
            offset: '6561'
          address: 
            size: '243'
            offset: '6804'
          value: 
            size: '81'
            offset: '7047'
          issuanceTimestamp: 
            size: '27'
            offset: '7128'
          timelockLowerBound: 
            size: '27'
            offset: '7155'
          timelockUpperBound: 
            size: '27'
            offset: '7182'
          bundle: 
            size: '81'
            offset: '7209'
          trunk: 
            size: '243'
            offset: '7290'
          branch: 
            size: '243'
            offset: '7533'
          tag: 
            size: '81'
            offset: '7776'
          attachment: 
            size: '81'
            offset: '7857'
          nonce: 
            size: '81'
            offset: '7938'
    params:
      - 
        argName: param
        size: 8263
        type: 
          ConstTypeName:
            typeName: Traversal
            size: 8263
            fields:
              cmd: 
                size: '1'
                offset: '0'
              key: 
                size: '243'
                offset: '1'
              value: 
                size: '8019'
                offset: '244'
    state: 
      value: 
        size: 8019
        type: Transaction
    assigns: 
      oldValue:
        SliceExpr:
          source: 'value'
          var: value
          offset: 0
          size: 8019
      cmd:
        SliceExpr:
          source: 'param.cmd'
          var: param
          offset: 0
          size: 1
          fields: 
            - cmd
      value:
        CondExpr:
          source: 'isZero[cmd] ? oldValue : isOne[cmd] ? param.value : isMin[cmd] ? 0 : null'
          if: 
            LutExpr:
              name: isZero
              args: 
                - 
                  SliceExpr:
                    source: 'cmd'
                    var: cmd
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'oldValue'
              var: oldValue
              offset: 0
              size: 8019
          else:
            CondExpr:
              source: 'isOne[cmd] ? param.value : isMin[cmd] ? 0 : null'
              if: 
                LutExpr:
                  name: isOne
                  args: 
                    - 
                      SliceExpr:
                        source: 'cmd'
                        var: cmd
                        offset: 0
                        size: 1
              then: 
                SliceExpr:
                  source: 'param.value'
                  var: param
                  offset: 244
                  size: 8019
                  fields: 
                    - value
              else:
                CondExpr:
                  source: 'isMin[cmd] ? 0 : null'
                  if: 
                    LutExpr:
                      name: isMin
                      args: 
                        - 
                          SliceExpr:
                            source: 'cmd'
                            var: cmd
                            offset: 0
                            size: 1
                  then: 
                    ValueExpr:
                        value: '0'
                        trits
                        trytes
                  else:
                    NullExpr: ''
    return: 
    # oldValue
      SliceExpr:
        source: 'oldValue'
        var: oldValue
        offset: 0
        size: 8019
# 
# func Tiny abs<Tiny>(Tiny val) {
#   return isNegative[sign<Tiny>(val)] ? neg<Tiny>(val) : val
# }
  abs_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    return: 
    # isNegative[sign<Tiny>(val)] ? neg<Tiny>(val) : val
      CondExpr:
        source: 'isNegative[sign<Tiny>(val)] ? neg<Tiny>(val) : val'
        if: 
          LutExpr:
            name: isNegative
            args: 
              - 
                FuncExpr:
                  source: 'sign<Tiny>(val)'
                  name: sign_9
                  args:
                  - 
                    SliceExpr:
                      source: 'val'
                      var: val
                      offset: 0
                      size: 9
        then: 
          FuncExpr:
            source: 'neg<Tiny>(val)'
            name: neg_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 9
        else:
          SliceExpr:
            source: 'val'
            var: val
            offset: 0
            size: 9
# 
# func Tiny add<Tiny>(Tiny lhs, Tiny rhs) {
#   sum = fullAdd<Tiny>(lhs, rhs, 0)
#   return sum.value
# }
  add_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<Tiny>(lhs, rhs, 0)'
          name: fullAdd_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
    return: 
    # sum.value
      SliceExpr:
        source: 'sum.value'
        var: sum
        offset: 0
        size: 9
        fields: 
          - value
# 
# func Trit cmp<Tiny2>(Tiny2 lhs, Tiny2 rhs) {
#   val0 = cmp<A>(lhs[0 : A], rhs[0 : A])
#   val1 = cmp<B>(lhs[A : B], rhs[A : B])
#   return sign[val0, val1, 0]
# }
  cmp_18:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: lhs
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
      - 
        argName: rhs
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
    assigns: 
      val0:
        FuncExpr:
          source: 'cmp<A>(lhs[0 : A], rhs[0 : A])'
          name: cmp_9
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
      val1:
        FuncExpr:
          source: 'cmp<B>(lhs[A : B], rhs[A : B])'
          name: cmp_9
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
    return: 
    # sign[val0, val1, 0]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
# 
# func Tiny2 decr<Tiny2>(Tiny2 val) {
#   halfSum = halfAdd<Tiny2>(val, -)
#   return halfSum.value
# }
  decr_18:
    returnType: 
      ConstTypeName:
        typeName: Tiny2
        size: 18
    params:
      - 
        argName: val
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
    assigns: 
      halfSum:
        FuncExpr:
          source: 'halfAdd<Tiny2>(val, -)'
          name: halfAdd_18
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 18
          - 
            ValueExpr:
                value: '-'
                trits: '-'
                trytes: 'Z'
    return: 
    # halfSum.value
      SliceExpr:
        source: 'halfSum.value'
        var: halfSum
        offset: 0
        size: 18
        fields: 
          - value
# 
# func TCarry halfAdd<Tiny2>(Tiny2 val, Carry carry) {
#   add0 = halfAdd<A>(val[0 : A], carry)
#   add1 = halfAdd<B>(val[A : B], add0.carry)
#   return add0.value & add1
# }
  halfAdd_18:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 19
        fields:
          value: 
            size: '18'
            offset: '0'
          carry: 
            size: '1'
            offset: '18'
    params:
      - 
        argName: val
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'halfAdd<A>(val[0 : A], carry)'
          name: halfAdd_9
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'halfAdd<B>(val[A : B], add0.carry)'
          name: halfAdd_9
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 9
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1
      ConcatExpr:
        source: 'add0.value & add1'
        lhs: 
          SliceExpr:
            source: 'add0.value'
            var: add0
            offset: 0
            size: 9
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'add1'
            var: add1
            offset: 0
            size: 10
# 
# func Tiny div<Tiny>(Tiny lhs, Tiny rhs) {
#   ret = divMod<Tiny>(lhs, rhs)
#   return ret.quotient
# }
  div_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      ret:
        FuncExpr:
          source: 'divMod<Tiny>(lhs, rhs)'
          name: divMod_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 9
        fields: 
          - quotient
# 
# func Tiny ceilDiv<Tiny>(Tiny lhs, Tiny rhs) {
#   ret = ceilDivMod<Tiny>(lhs, rhs)
#   return ret.quotient
# }
  ceilDiv_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      ret:
        FuncExpr:
          source: 'ceilDivMod<Tiny>(lhs, rhs)'
          name: ceilDivMod_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 9
        fields: 
          - quotient
# 
# func Tiny floorDiv<Tiny>(Tiny lhs, Tiny rhs) {
#   ret = floorDivMod<Tiny>(lhs, rhs)
#   return ret.quotient
# }
  floorDiv_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      ret:
        FuncExpr:
          source: 'floorDivMod<Tiny>(lhs, rhs)'
          name: floorDivMod_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 9
        fields: 
          - quotient
# 
# func Tiny roundDiv<Tiny>(Tiny lhs, Tiny rhs) {
#   ret = roundDivMod<Tiny>(lhs, rhs)
#   return ret.quotient
# }
  roundDiv_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      ret:
        FuncExpr:
          source: 'roundDivMod<Tiny>(lhs, rhs)'
          name: roundDivMod_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 9
        fields: 
          - quotient
# 
# func T2 divMod<Tiny>(Tiny lhs, Tiny rhs) {
#   absLhs = abs<Tiny>(lhs)
#   absRhs = abs<Tiny>(rhs)
#   quorem = roundDivModLoop<Tiny>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   fix = isNegative[sign<Tiny>(rem)]
#   quo0 = fix ? decr<Tiny>(quo) : quo
#   rem0 = fix ? add<Tiny>(rem, absRhs) : rem
#   return fixSign<Tiny>(lhs, rhs, quo0, rem0)
# }
  divMod_9:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 18
        fields:
          quotient: 
            size: '9'
            offset: '0'
          remainder: 
            size: '9'
            offset: '9'
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<Tiny>(lhs)'
          name: abs_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
      absRhs:
        FuncExpr:
          source: 'abs<Tiny>(rhs)'
          name: abs_9
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<Tiny>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_9
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 9
          - 
            ValueExpr:
                value: '0'
                trits: '000000000'
                trytes: '999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 9
          - 
            ValueExpr:
                value: '1'
                trits: '100000000'
                trytes: 'A99'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 9
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 9
          size: 9
          fields: 
            - remainder
      fix:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(rem)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'rem'
                    var: rem
                    offset: 0
                    size: 9
      quo0:
        CondExpr:
          source: 'fix ? decr<Tiny>(quo) : quo'
          if: 
            SliceExpr:
              source: 'fix'
              var: fix
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'decr<Tiny>(quo)'
              name: decr_9
              args:
              - 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 9
          else:
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 9
      rem0:
        CondExpr:
          source: 'fix ? add<Tiny>(rem, absRhs) : rem'
          if: 
            SliceExpr:
              source: 'fix'
              var: fix
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'add<Tiny>(rem, absRhs)'
              name: add_9
              args:
              - 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 9
              - 
                SliceExpr:
                  source: 'absRhs'
                  var: absRhs
                  offset: 0
                  size: 9
          else:
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 9
    return: 
    # fixSign<Tiny>(lhs, rhs, quo0, rem0)
      FuncExpr:
        source: 'fixSign<Tiny>(lhs, rhs, quo0, rem0)'
        name: fixSign_9
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 9
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 9
        - 
          SliceExpr:
            source: 'quo0'
            var: quo0
            offset: 0
            size: 9
        - 
          SliceExpr:
            source: 'rem0'
            var: rem0
            offset: 0
            size: 9
# 
# func T2 ceilDivMod<Tiny>(Tiny lhs, Tiny rhs) {
#   absLhs = abs<Tiny>(lhs)
#   absRhs = abs<Tiny>(rhs)
#   quorem = roundDivModLoop<Tiny>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   lhsSign = sign<Tiny>(lhs)
#   rhsSign = sign<Tiny>(rhs)
#   remSign = sign<Tiny>(rem)
#   neg = xor[isNegative[lhsSign], isNegative[rhsSign]]
#   up = and[not[neg], isPositive[remSign]]
#   down = and[neg, isNegative[remSign]]
#   none = nor[up, down]
#   quoN0 = none ? quo : null
#   quoN1 = incr<Tiny>(up ? quo : null)
#   quoN2 = decr<Tiny>(down ? quo : null)
#   quo0 = quoN0 | quoN1 | quoN2
#   remN0 = none ? rem : null
#   remN1 = sub<Tiny>(up ? rem : null, absRhs)
#   remN2 = add<Tiny>(down ? rem : null, absRhs)
#   rem0 = remN0 | remN1 | remN2
#   return fixSign<Tiny>(lhs, rhs, quo0, rem0)
# }
  ceilDivMod_9:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 18
        fields:
          quotient: 
            size: '9'
            offset: '0'
          remainder: 
            size: '9'
            offset: '9'
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<Tiny>(lhs)'
          name: abs_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
      absRhs:
        FuncExpr:
          source: 'abs<Tiny>(rhs)'
          name: abs_9
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<Tiny>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_9
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 9
          - 
            ValueExpr:
                value: '0'
                trits: '000000000'
                trytes: '999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 9
          - 
            ValueExpr:
                value: '1'
                trits: '100000000'
                trytes: 'A99'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 9
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 9
          size: 9
          fields: 
            - remainder
      lhsSign:
        FuncExpr:
          source: 'sign<Tiny>(lhs)'
          name: sign_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
      rhsSign:
        FuncExpr:
          source: 'sign<Tiny>(rhs)'
          name: sign_9
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
      remSign:
        FuncExpr:
          source: 'sign<Tiny>(rem)'
          name: sign_9
          args:
          - 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 9
      neg:
        LutExpr:
          name: xor
          args: 
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'lhsSign'
                      var: lhsSign
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'rhsSign'
                      var: rhsSign
                      offset: 0
                      size: 1
      up:
        LutExpr:
          name: and
          args: 
            - 
              LutExpr:
                name: not
                args: 
                  - 
                    SliceExpr:
                      source: 'neg'
                      var: neg
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isPositive
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      down:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'neg'
                var: neg
                offset: 0
                size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      none:
        LutExpr:
          name: nor
          args: 
            - 
              SliceExpr:
                source: 'up'
                var: up
                offset: 0
                size: 1
            - 
              SliceExpr:
                source: 'down'
                var: down
                offset: 0
                size: 1
      quoN0:
        CondExpr:
          source: 'none ? quo : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 9
          else:
            NullExpr: ''
      quoN1:
        FuncExpr:
          source: 'incr<Tiny>(up ? quo : null)'
          name: incr_9
          args:
          - 
            CondExpr:
              source: 'up ? quo : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 9
              else:
                NullExpr: ''
      quoN2:
        FuncExpr:
          source: 'decr<Tiny>(down ? quo : null)'
          name: decr_9
          args:
          - 
            CondExpr:
              source: 'down ? quo : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 9
              else:
                NullExpr: ''
      quo0:
        MergeExpr:
          source: 'quoN0 | quoN1 | quoN2'
          lhs: 
            MergeExpr:
              source: 'quoN0 | quoN1'
              lhs: 
                SliceExpr:
                  source: 'quoN0'
                  var: quoN0
                  offset: 0
                  size: 9
              rhs: 
                SliceExpr:
                  source: 'quoN1'
                  var: quoN1
                  offset: 0
                  size: 9
          rhs: 
            SliceExpr:
              source: 'quoN2'
              var: quoN2
              offset: 0
              size: 9
      remN0:
        CondExpr:
          source: 'none ? rem : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 9
          else:
            NullExpr: ''
      remN1:
        FuncExpr:
          source: 'sub<Tiny>(up ? rem : null, absRhs)'
          name: sub_9
          args:
          - 
            CondExpr:
              source: 'up ? rem : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 9
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 9
      remN2:
        FuncExpr:
          source: 'add<Tiny>(down ? rem : null, absRhs)'
          name: add_9
          args:
          - 
            CondExpr:
              source: 'down ? rem : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 9
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 9
      rem0:
        MergeExpr:
          source: 'remN0 | remN1 | remN2'
          lhs: 
            MergeExpr:
              source: 'remN0 | remN1'
              lhs: 
                SliceExpr:
                  source: 'remN0'
                  var: remN0
                  offset: 0
                  size: 9
              rhs: 
                SliceExpr:
                  source: 'remN1'
                  var: remN1
                  offset: 0
                  size: 9
          rhs: 
            SliceExpr:
              source: 'remN2'
              var: remN2
              offset: 0
              size: 9
    return: 
    # fixSign<Tiny>(lhs, rhs, quo0, rem0)
      FuncExpr:
        source: 'fixSign<Tiny>(lhs, rhs, quo0, rem0)'
        name: fixSign_9
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 9
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 9
        - 
          SliceExpr:
            source: 'quo0'
            var: quo0
            offset: 0
            size: 9
        - 
          SliceExpr:
            source: 'rem0'
            var: rem0
            offset: 0
            size: 9
# 
# func T2 floorDivMod<Tiny>(Tiny lhs, Tiny rhs) {
#   absLhs = abs<Tiny>(lhs)
#   absRhs = abs<Tiny>(rhs)
#   quorem = roundDivModLoop<Tiny>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   lhsSign = sign<Tiny>(lhs)
#   rhsSign = sign<Tiny>(rhs)
#   remSign = sign<Tiny>(rem)
#   neg = xor[isNegative[lhsSign], isNegative[rhsSign]]
#   down = and[not[neg], isNegative[remSign]]
#   up = and[neg, isPositive[remSign]]
#   none = nor[up, down]
#   quoN0 = none ? quo : null
#   quoN1 = incr<Tiny>(up ? quo : null)
#   quoN2 = decr<Tiny>(down ? quo : null)
#   quo0 = quoN0 | quoN1 | quoN2
#   remN0 = none ? rem : null
#   remN1 = sub<Tiny>(up ? rem : null, absRhs)
#   remN2 = add<Tiny>(down ? rem : null, absRhs)
#   rem0 = remN0 | remN1 | remN2
#   return fixSign<Tiny>(lhs, rhs, quo0, rem0)
# }
  floorDivMod_9:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 18
        fields:
          quotient: 
            size: '9'
            offset: '0'
          remainder: 
            size: '9'
            offset: '9'
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<Tiny>(lhs)'
          name: abs_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
      absRhs:
        FuncExpr:
          source: 'abs<Tiny>(rhs)'
          name: abs_9
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<Tiny>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_9
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 9
          - 
            ValueExpr:
                value: '0'
                trits: '000000000'
                trytes: '999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 9
          - 
            ValueExpr:
                value: '1'
                trits: '100000000'
                trytes: 'A99'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 9
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 9
          size: 9
          fields: 
            - remainder
      lhsSign:
        FuncExpr:
          source: 'sign<Tiny>(lhs)'
          name: sign_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
      rhsSign:
        FuncExpr:
          source: 'sign<Tiny>(rhs)'
          name: sign_9
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
      remSign:
        FuncExpr:
          source: 'sign<Tiny>(rem)'
          name: sign_9
          args:
          - 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 9
      neg:
        LutExpr:
          name: xor
          args: 
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'lhsSign'
                      var: lhsSign
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'rhsSign'
                      var: rhsSign
                      offset: 0
                      size: 1
      down:
        LutExpr:
          name: and
          args: 
            - 
              LutExpr:
                name: not
                args: 
                  - 
                    SliceExpr:
                      source: 'neg'
                      var: neg
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      up:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'neg'
                var: neg
                offset: 0
                size: 1
            - 
              LutExpr:
                name: isPositive
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      none:
        LutExpr:
          name: nor
          args: 
            - 
              SliceExpr:
                source: 'up'
                var: up
                offset: 0
                size: 1
            - 
              SliceExpr:
                source: 'down'
                var: down
                offset: 0
                size: 1
      quoN0:
        CondExpr:
          source: 'none ? quo : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 9
          else:
            NullExpr: ''
      quoN1:
        FuncExpr:
          source: 'incr<Tiny>(up ? quo : null)'
          name: incr_9
          args:
          - 
            CondExpr:
              source: 'up ? quo : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 9
              else:
                NullExpr: ''
      quoN2:
        FuncExpr:
          source: 'decr<Tiny>(down ? quo : null)'
          name: decr_9
          args:
          - 
            CondExpr:
              source: 'down ? quo : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 9
              else:
                NullExpr: ''
      quo0:
        MergeExpr:
          source: 'quoN0 | quoN1 | quoN2'
          lhs: 
            MergeExpr:
              source: 'quoN0 | quoN1'
              lhs: 
                SliceExpr:
                  source: 'quoN0'
                  var: quoN0
                  offset: 0
                  size: 9
              rhs: 
                SliceExpr:
                  source: 'quoN1'
                  var: quoN1
                  offset: 0
                  size: 9
          rhs: 
            SliceExpr:
              source: 'quoN2'
              var: quoN2
              offset: 0
              size: 9
      remN0:
        CondExpr:
          source: 'none ? rem : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 9
          else:
            NullExpr: ''
      remN1:
        FuncExpr:
          source: 'sub<Tiny>(up ? rem : null, absRhs)'
          name: sub_9
          args:
          - 
            CondExpr:
              source: 'up ? rem : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 9
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 9
      remN2:
        FuncExpr:
          source: 'add<Tiny>(down ? rem : null, absRhs)'
          name: add_9
          args:
          - 
            CondExpr:
              source: 'down ? rem : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 9
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 9
      rem0:
        MergeExpr:
          source: 'remN0 | remN1 | remN2'
          lhs: 
            MergeExpr:
              source: 'remN0 | remN1'
              lhs: 
                SliceExpr:
                  source: 'remN0'
                  var: remN0
                  offset: 0
                  size: 9
              rhs: 
                SliceExpr:
                  source: 'remN1'
                  var: remN1
                  offset: 0
                  size: 9
          rhs: 
            SliceExpr:
              source: 'remN2'
              var: remN2
              offset: 0
              size: 9
    return: 
    # fixSign<Tiny>(lhs, rhs, quo0, rem0)
      FuncExpr:
        source: 'fixSign<Tiny>(lhs, rhs, quo0, rem0)'
        name: fixSign_9
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 9
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 9
        - 
          SliceExpr:
            source: 'quo0'
            var: quo0
            offset: 0
            size: 9
        - 
          SliceExpr:
            source: 'rem0'
            var: rem0
            offset: 0
            size: 9
# 
# func T2 roundDivMod<Tiny>(Tiny lhs, Tiny rhs) {
#   absLhs = abs<Tiny>(lhs)
#   absRhs = abs<Tiny>(rhs)
#   quorem = roundDivModLoop<Tiny>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   return fixSign<Tiny>(lhs, rhs, quo, rem)
# }
  roundDivMod_9:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 18
        fields:
          quotient: 
            size: '9'
            offset: '0'
          remainder: 
            size: '9'
            offset: '9'
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<Tiny>(lhs)'
          name: abs_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
      absRhs:
        FuncExpr:
          source: 'abs<Tiny>(rhs)'
          name: abs_9
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<Tiny>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_9
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 9
          - 
            ValueExpr:
                value: '0'
                trits: '000000000'
                trytes: '999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 9
          - 
            ValueExpr:
                value: '1'
                trits: '100000000'
                trytes: 'A99'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 9
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 9
          size: 9
          fields: 
            - remainder
    return: 
    # fixSign<Tiny>(lhs, rhs, quo, rem)
      FuncExpr:
        source: 'fixSign<Tiny>(lhs, rhs, quo, rem)'
        name: fixSign_9
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 9
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 9
        - 
          SliceExpr:
            source: 'quo'
            var: quo
            offset: 0
            size: 9
        - 
          SliceExpr:
            source: 'rem'
            var: rem
            offset: 0
            size: 9
# 
# func T2 roundDivModLoop<Tiny>(Tiny quo, Tiny rem, Tiny div, Tiny shf) {
#   quorem = roundDivModPass<Tiny>(quo, rem, div)
#   newShf = rshift<Tiny>(shf)
#   zero = isZero[sign<Tiny>(newShf)]
#   quo1 = quorem.quotient
#   rem1 = quorem.remainder
#   return zero ? quorem : roundDivModLoop<Tiny>(quo1, rem1, div, newShf)
# }
  roundDivModLoop_9:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 18
        fields:
          quotient: 
            size: '9'
            offset: '0'
          remainder: 
            size: '9'
            offset: '9'
    params:
      - 
        argName: quo
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rem
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: div
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: shf
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      quorem:
        FuncExpr:
          source: 'roundDivModPass<Tiny>(quo, rem, div)'
          name: roundDivModPass_9
          args:
          - 
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'div'
              var: div
              offset: 0
              size: 9
      newShf:
        FuncExpr:
          source: 'rshift<Tiny>(shf)'
          name: rshift_9
          args:
          - 
            SliceExpr:
              source: 'shf'
              var: shf
              offset: 0
              size: 9
      zero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(newShf)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'newShf'
                    var: newShf
                    offset: 0
                    size: 9
      quo1:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 9
          fields: 
            - quotient
      rem1:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 9
          size: 9
          fields: 
            - remainder
    return: 
    # zero ? quorem : roundDivModLoop<Tiny>(quo1, rem1, div, newShf)
      CondExpr:
        source: 'zero ? quorem : roundDivModLoop<Tiny>(quo1, rem1, div, newShf)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'quorem'
            var: quorem
            offset: 0
            size: 18
        else:
          FuncExpr:
            source: 'roundDivModLoop<Tiny>(quo1, rem1, div, newShf)'
            name: roundDivModLoop_9
            args:
            - 
              SliceExpr:
                source: 'quo1'
                var: quo1
                offset: 0
                size: 9
            - 
              SliceExpr:
                source: 'rem1'
                var: rem1
                offset: 0
                size: 9
            - 
              SliceExpr:
                source: 'div'
                var: div
                offset: 0
                size: 9
            - 
              SliceExpr:
                source: 'newShf'
                var: newShf
                offset: 0
                size: 9
# 
# func T2 roundDivModPass<Tiny>(Tiny quo, Tiny rem, Tiny div) {
#   quorem = as<T2>(rshift<T2>(quo & rem))
#   quo0 = quorem.quotient
#   rem0 = quorem.remainder
#   remSign = sign<Tiny>(rem0)
#   quoSign = sign<Tiny>(quo0)
#   low = sub<Tiny>(rem0, div)
#   neg1 = neg<Tiny>(low)
#   cmp1 = cmp<Tiny>(neg1, rem0)
#   posRem = isPositive[remSign]
#   posQuo = isPositive[quoSign]
#   test1 = and[posRem, or[isLess[cmp1], and[isZero[cmp1], posQuo]]]
#   high = add<Tiny>(rem0, div)
#   neg2 = neg<Tiny>(high)
#   cmp2 = cmp<Tiny>(neg2, rem0)
#   negRem = isNegative[remSign]
#   negQuo = isNegative[quoSign]
#   test2 = and[negRem, or[isGreater[cmp2], and[isEqual[cmp2], negQuo]]]
#   quorem1 = T2{
#     quotient = incr<Tiny>(quo0)
#     remainder = low
#   }
#   quorem2 = T2{
#     quotient = decr<Tiny>(quo0)
#     remainder = high
#   }
#   return test1 ? quorem1 : test2 ? quorem2 : quorem
# }
  roundDivModPass_9:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 18
        fields:
          quotient: 
            size: '9'
            offset: '0'
          remainder: 
            size: '9'
            offset: '9'
    params:
      - 
        argName: quo
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rem
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: div
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      quorem:
        FuncExpr:
          source: 'as<T2>(rshift<T2>(quo & rem))'
          name: as_18
          args:
          - 
            FuncExpr:
              source: 'rshift<T2>(quo & rem)'
              name: rshift_18
              args:
              - 
                ConcatExpr:
                  source: 'quo & rem'
                  lhs: 
                    SliceExpr:
                      source: 'quo'
                      var: quo
                      offset: 0
                      size: 9
                  rhs: 
                    SliceExpr:
                      source: 'rem'
                      var: rem
                      offset: 0
                      size: 9
      quo0:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 9
          fields: 
            - quotient
      rem0:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 9
          size: 9
          fields: 
            - remainder
      remSign:
        FuncExpr:
          source: 'sign<Tiny>(rem0)'
          name: sign_9
          args:
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 9
      quoSign:
        FuncExpr:
          source: 'sign<Tiny>(quo0)'
          name: sign_9
          args:
          - 
            SliceExpr:
              source: 'quo0'
              var: quo0
              offset: 0
              size: 9
      low:
        FuncExpr:
          source: 'sub<Tiny>(rem0, div)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'div'
              var: div
              offset: 0
              size: 9
      neg1:
        FuncExpr:
          source: 'neg<Tiny>(low)'
          name: neg_9
          args:
          - 
            SliceExpr:
              source: 'low'
              var: low
              offset: 0
              size: 9
      cmp1:
        FuncExpr:
          source: 'cmp<Tiny>(neg1, rem0)'
          name: cmp_9
          args:
          - 
            SliceExpr:
              source: 'neg1'
              var: neg1
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 9
      posRem:
        LutExpr:
          name: isPositive
          args: 
            - 
              SliceExpr:
                source: 'remSign'
                var: remSign
                offset: 0
                size: 1
      posQuo:
        LutExpr:
          name: isPositive
          args: 
            - 
              SliceExpr:
                source: 'quoSign'
                var: quoSign
                offset: 0
                size: 1
      test1:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'posRem'
                var: posRem
                offset: 0
                size: 1
            - 
              LutExpr:
                name: or
                args: 
                  - 
                    LutExpr:
                      name: isLess
                      args: 
                        - 
                          SliceExpr:
                            source: 'cmp1'
                            var: cmp1
                            offset: 0
                            size: 1
                  - 
                    LutExpr:
                      name: and
                      args: 
                        - 
                          LutExpr:
                            name: isZero
                            args: 
                              - 
                                SliceExpr:
                                  source: 'cmp1'
                                  var: cmp1
                                  offset: 0
                                  size: 1
                        - 
                          SliceExpr:
                            source: 'posQuo'
                            var: posQuo
                            offset: 0
                            size: 1
      high:
        FuncExpr:
          source: 'add<Tiny>(rem0, div)'
          name: add_9
          args:
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'div'
              var: div
              offset: 0
              size: 9
      neg2:
        FuncExpr:
          source: 'neg<Tiny>(high)'
          name: neg_9
          args:
          - 
            SliceExpr:
              source: 'high'
              var: high
              offset: 0
              size: 9
      cmp2:
        FuncExpr:
          source: 'cmp<Tiny>(neg2, rem0)'
          name: cmp_9
          args:
          - 
            SliceExpr:
              source: 'neg2'
              var: neg2
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 9
      negRem:
        LutExpr:
          name: isNegative
          args: 
            - 
              SliceExpr:
                source: 'remSign'
                var: remSign
                offset: 0
                size: 1
      negQuo:
        LutExpr:
          name: isNegative
          args: 
            - 
              SliceExpr:
                source: 'quoSign'
                var: quoSign
                offset: 0
                size: 1
      test2:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'negRem'
                var: negRem
                offset: 0
                size: 1
            - 
              LutExpr:
                name: or
                args: 
                  - 
                    LutExpr:
                      name: isGreater
                      args: 
                        - 
                          SliceExpr:
                            source: 'cmp2'
                            var: cmp2
                            offset: 0
                            size: 1
                  - 
                    LutExpr:
                      name: and
                      args: 
                        - 
                          LutExpr:
                            name: isEqual
                            args: 
                              - 
                                SliceExpr:
                                  source: 'cmp2'
                                  var: cmp2
                                  offset: 0
                                  size: 1
                        - 
                          SliceExpr:
                            source: 'negQuo'
                            var: negQuo
                            offset: 0
                            size: 1
      quorem1:
        TypeExpr:
          source: 'T2{ /   quotient = incr<Tiny>(quo0) /   remainder = low / }'
          type: 
            ConstTypeName:
              typeName: T2
              size: 18
              fields:
                quotient: 
                  size: '9'
                  offset: '0'
                remainder: 
                  size: '9'
                  offset: '9'
          fieldValues: 
            quotient:
              FuncExpr:
                source: 'incr<Tiny>(quo0)'
                name: incr_9
                args:
                - 
                  SliceExpr:
                    source: 'quo0'
                    var: quo0
                    offset: 0
                    size: 9
            remainder:
              SliceExpr:
                source: 'low'
                var: low
                offset: 0
                size: 9
      quorem2:
        TypeExpr:
          source: 'T2{ /   quotient = decr<Tiny>(quo0) /   remainder = high / }'
          type: 
            ConstTypeName:
              typeName: T2
              size: 18
              fields:
                quotient: 
                  size: '9'
                  offset: '0'
                remainder: 
                  size: '9'
                  offset: '9'
          fieldValues: 
            quotient:
              FuncExpr:
                source: 'decr<Tiny>(quo0)'
                name: decr_9
                args:
                - 
                  SliceExpr:
                    source: 'quo0'
                    var: quo0
                    offset: 0
                    size: 9
            remainder:
              SliceExpr:
                source: 'high'
                var: high
                offset: 0
                size: 9
    return: 
    # test1 ? quorem1 : test2 ? quorem2 : quorem
      CondExpr:
        source: 'test1 ? quorem1 : test2 ? quorem2 : quorem'
        if: 
          SliceExpr:
            source: 'test1'
            var: test1
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'quorem1'
            var: quorem1
            offset: 0
            size: 18
        else:
          CondExpr:
            source: 'test2 ? quorem2 : quorem'
            if: 
              SliceExpr:
                source: 'test2'
                var: test2
                offset: 0
                size: 1
            then: 
              SliceExpr:
                source: 'quorem2'
                var: quorem2
                offset: 0
                size: 18
            else:
              SliceExpr:
                source: 'quorem'
                var: quorem
                offset: 0
                size: 18
# 
# func T2 fixSign<Tiny>(Tiny lhs, Tiny rhs, Tiny quo, Tiny rem) {
#   lhsSign = sign<Tiny>(lhs)
#   rhsSign = sign<Tiny>(rhs)
#   negRem = isNegative[lhsSign]
#   negQuo = xor[negRem, isNegative[rhsSign]]
#   quo1 = negQuo ? neg<Tiny>(quo) : quo
#   rem1 = negRem ? neg<Tiny>(rem) : rem
#   return T2{
#     quotient = quo1
#     remainder = rem1
#   }
# }
  fixSign_9:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 18
        fields:
          quotient: 
            size: '9'
            offset: '0'
          remainder: 
            size: '9'
            offset: '9'
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: quo
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rem
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      lhsSign:
        FuncExpr:
          source: 'sign<Tiny>(lhs)'
          name: sign_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
      rhsSign:
        FuncExpr:
          source: 'sign<Tiny>(rhs)'
          name: sign_9
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
      negRem:
        LutExpr:
          name: isNegative
          args: 
            - 
              SliceExpr:
                source: 'lhsSign'
                var: lhsSign
                offset: 0
                size: 1
      negQuo:
        LutExpr:
          name: xor
          args: 
            - 
              SliceExpr:
                source: 'negRem'
                var: negRem
                offset: 0
                size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'rhsSign'
                      var: rhsSign
                      offset: 0
                      size: 1
      quo1:
        CondExpr:
          source: 'negQuo ? neg<Tiny>(quo) : quo'
          if: 
            SliceExpr:
              source: 'negQuo'
              var: negQuo
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'neg<Tiny>(quo)'
              name: neg_9
              args:
              - 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 9
          else:
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 9
      rem1:
        CondExpr:
          source: 'negRem ? neg<Tiny>(rem) : rem'
          if: 
            SliceExpr:
              source: 'negRem'
              var: negRem
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'neg<Tiny>(rem)'
              name: neg_9
              args:
              - 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 9
          else:
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 9
    return: 
    # T2{
    #   quotient = quo1
    #   remainder = rem1
    # }
      TypeExpr:
        source: 'T2{ /   quotient = quo1 /   remainder = rem1 / }'
        type: 
          ConstTypeName:
            typeName: T2
            size: 18
            fields:
              quotient: 
                size: '9'
                offset: '0'
              remainder: 
                size: '9'
                offset: '9'
        fieldValues: 
          quotient:
            SliceExpr:
              source: 'quo1'
              var: quo1
              offset: 0
              size: 9
          remainder:
            SliceExpr:
              source: 'rem1'
              var: rem1
              offset: 0
              size: 9
# 
# func T2 as<T2>(T2 val) {
#   return val
# }
  as_18:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 18
        fields:
          quotient: 
            size: '9'
            offset: '0'
          remainder: 
            size: '9'
            offset: '9'
    params:
      - 
        argName: val
        size: 18
        type: 
          ConstTypeName:
            typeName: T2
            size: 18
            fields:
              quotient: 
                size: '9'
                offset: '0'
              remainder: 
                size: '9'
                offset: '9'
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 18
# 
# func T2 rshift<T2>(T2 val) {
#   return 0 & val[0 : T2 - 1]
# }
  rshift_18:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 18
        fields:
          quotient: 
            size: '9'
            offset: '0'
          remainder: 
            size: '9'
            offset: '9'
    params:
      - 
        argName: val
        size: 18
        type: 
          ConstTypeName:
            typeName: T2
            size: 18
            fields:
              quotient: 
                size: '9'
                offset: '0'
              remainder: 
                size: '9'
                offset: '9'
    return: 
    # 0 & val[0 : T2 - 1]
      ConcatExpr:
        source: '0 & val[0 : T2 - 1]'
        lhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        rhs: 
          SliceExpr:
            source: 'val[0 : T2 - 1]'
            var: val
            offset: 0
            size: 17
            start:
              ConstNumber:
                value: 0
            end:
              ConstExpr:
                operator: '-'
                lhs: 
                  ConstTypeName:
                    typeName: T2
                    size: 18
                    fields:
                      quotient: 
                        size: '9'
                        offset: '0'
                      remainder: 
                        size: '9'
                        offset: '9'
                rhs: 
                  ConstNumber:
                    value: 1
# 
# func Tiny rshift<Tiny>(Tiny val) {
#   return 0 & val[0 : Tiny - 1]
# }
  rshift_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    return: 
    # 0 & val[0 : Tiny - 1]
      ConcatExpr:
        source: '0 & val[0 : Tiny - 1]'
        lhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        rhs: 
          SliceExpr:
            source: 'val[0 : Tiny - 1]'
            var: val
            offset: 0
            size: 8
            start:
              ConstNumber:
                value: 0
            end:
              ConstExpr:
                operator: '-'
                lhs: 
                  ConstTypeName:
                    typeName: Tiny
                    size: 9
                rhs: 
                  ConstNumber:
                    value: 1
# 
# func Bool even<Int>(Int val) {
#   val0 = even<A>(val[0 : A])
#   val1 = even<B>(val[A : B])
#   val2 = even<C>(val[A + B : C])
#   return xor3[val0, val1, val2]
# }
  even_27:
    returnType: 
      ConstTypeName:
        typeName: Bool
        size: 1
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
    assigns: 
      val0:
        FuncExpr:
          source: 'even<A>(val[0 : A])'
          name: even_9
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
      val1:
        FuncExpr:
          source: 'even<B>(val[A : B])'
          name: even_9
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
      val2:
        FuncExpr:
          source: 'even<C>(val[A + B : C])'
          name: even_9
          args:
          - 
            SliceExpr:
              source: 'val[A + B : C]'
              var: val
              offset: 18
              size: 9
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 9
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 9
              end:
                ConstTypeName:
                  typeName: C
                  size: 9
    return: 
    # xor3[val0, val1, val2]
      LutExpr:
        name: xor3
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func Bool even<A>(A val) {
#   val0 = even<A>(val[0 : A])
#   val1 = even<B>(val[A : B])
#   val2 = even<C>(val[A + B : C])
#   return xor3[val0, val1, val2]
# }
  even_9:
    returnType: 
      ConstTypeName:
        typeName: Bool
        size: 1
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: A
            size: 9
    assigns: 
      val0:
        FuncExpr:
          source: 'even<A>(val[0 : A])'
          name: even_3
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
      val1:
        FuncExpr:
          source: 'even<B>(val[A : B])'
          name: even_3
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
      val2:
        FuncExpr:
          source: 'even<C>(val[A + B : C])'
          name: even_3
          args:
          - 
            SliceExpr:
              source: 'val[A + B : C]'
              var: val
              offset: 6
              size: 3
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 3
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 3
              end:
                ConstTypeName:
                  typeName: C
                  size: 3
    return: 
    # xor3[val0, val1, val2]
      LutExpr:
        name: xor3
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func TestFloat floatAdd<TestFloat>(TestFloat lhs, TestFloat rhs) {
#   smaller = isLess[cmp<Tryte2>(lhs.exponent, rhs.exponent)]
#   lhs0 = smaller ? rhs : lhs
#   rhs0 = smaller ? lhs : rhs
#   return floatAddCheckMantissa<TestFloat>(lhs0, rhs0)
# }
  floatAdd_24:
    returnType: 
      ConstTypeName:
        typeName: TestFloat
        size: 24
        fields:
          mantissa: 
            size: '18'
            offset: '0'
          exponent: 
            size: '6'
            offset: '18'
    params:
      - 
        argName: lhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
      - 
        argName: rhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
    assigns: 
      smaller:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tryte2>(lhs.exponent, rhs.exponent)'
                name: cmp_6
                args:
                - 
                  SliceExpr:
                    source: 'lhs.exponent'
                    var: lhs
                    offset: 18
                    size: 6
                    fields: 
                      - exponent
                - 
                  SliceExpr:
                    source: 'rhs.exponent'
                    var: rhs
                    offset: 18
                    size: 6
                    fields: 
                      - exponent
      lhs0:
        CondExpr:
          source: 'smaller ? rhs : lhs'
          if: 
            SliceExpr:
              source: 'smaller'
              var: smaller
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 24
          else:
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 24
      rhs0:
        CondExpr:
          source: 'smaller ? lhs : rhs'
          if: 
            SliceExpr:
              source: 'smaller'
              var: smaller
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 24
          else:
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 24
    return: 
    # floatAddCheckMantissa<TestFloat>(lhs0, rhs0)
      FuncExpr:
        source: 'floatAddCheckMantissa<TestFloat>(lhs0, rhs0)'
        name: floatAddCheckMantissa_24
        args:
        - 
          SliceExpr:
            source: 'lhs0'
            var: lhs0
            offset: 0
            size: 24
        - 
          SliceExpr:
            source: 'rhs0'
            var: rhs0
            offset: 0
            size: 24
# 
# func TestFloat floatAddCheckMantissa<TestFloat>(TestFloat lhs, TestFloat rhs) {
#   zero = isZero[sign<Tiny2>(rhs.mantissa)]
#   return zero ? lhs : floatAddShiftMantissa<TestFloat>(lhs, rhs)
# }
  floatAddCheckMantissa_24:
    returnType: 
      ConstTypeName:
        typeName: TestFloat
        size: 24
        fields:
          mantissa: 
            size: '18'
            offset: '0'
          exponent: 
            size: '6'
            offset: '18'
    params:
      - 
        argName: lhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
      - 
        argName: rhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
    assigns: 
      zero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny2>(rhs.mantissa)'
                name: sign_18
                args:
                - 
                  SliceExpr:
                    source: 'rhs.mantissa'
                    var: rhs
                    offset: 0
                    size: 18
                    fields: 
                      - mantissa
    return: 
    # zero ? lhs : floatAddShiftMantissa<TestFloat>(lhs, rhs)
      CondExpr:
        source: 'zero ? lhs : floatAddShiftMantissa<TestFloat>(lhs, rhs)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 24
        else:
          FuncExpr:
            source: 'floatAddShiftMantissa<TestFloat>(lhs, rhs)'
            name: floatAddShiftMantissa_24
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 24
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 24
# 
# func TestFloat floatAddShiftMantissa<TestFloat>(TestFloat lhs, TestFloat rhs) {
#   addValues = equal<Tryte2>(lhs.exponent, rhs.exponent)
#   return addValues ? floatAddMantissas<TestFloat>(lhs, rhs) : floatAddDoShiftMantissa<TestFloat>(lhs, rhs)
# }
  floatAddShiftMantissa_24:
    returnType: 
      ConstTypeName:
        typeName: TestFloat
        size: 24
        fields:
          mantissa: 
            size: '18'
            offset: '0'
          exponent: 
            size: '6'
            offset: '18'
    params:
      - 
        argName: lhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
      - 
        argName: rhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
    assigns: 
      addValues:
        FuncExpr:
          source: 'equal<Tryte2>(lhs.exponent, rhs.exponent)'
          name: equal_6
          args:
          - 
            SliceExpr:
              source: 'lhs.exponent'
              var: lhs
              offset: 18
              size: 6
              fields: 
                - exponent
          - 
            SliceExpr:
              source: 'rhs.exponent'
              var: rhs
              offset: 18
              size: 6
              fields: 
                - exponent
    return: 
    # addValues ? floatAddMantissas<TestFloat>(lhs, rhs) : floatAddDoShiftMantissa<TestFloat>(lhs, rhs)
      CondExpr:
        source: 'addValues ? floatAddMantissas<TestFloat>(lhs, rhs) : floatAddDoShiftMantissa<TestFloat>(lhs, rhs)'
        if: 
          SliceExpr:
            source: 'addValues'
            var: addValues
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'floatAddMantissas<TestFloat>(lhs, rhs)'
            name: floatAddMantissas_24
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 24
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 24
        else:
          FuncExpr:
            source: 'floatAddDoShiftMantissa<TestFloat>(lhs, rhs)'
            name: floatAddDoShiftMantissa_24
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 24
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 24
# 
# func TestFloat floatAddDoShiftMantissa<TestFloat>(TestFloat lhs, TestFloat rhs) {
#   shifted = TestFloat{
#     mantissa = lshift<Tiny2>(rhs.mantissa)
#     exponent = incr<Tryte2>(rhs.exponent)
#   }
#   return floatAddCheckMantissa<TestFloat>(lhs, shifted)
# }
  floatAddDoShiftMantissa_24:
    returnType: 
      ConstTypeName:
        typeName: TestFloat
        size: 24
        fields:
          mantissa: 
            size: '18'
            offset: '0'
          exponent: 
            size: '6'
            offset: '18'
    params:
      - 
        argName: lhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
      - 
        argName: rhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
    assigns: 
      shifted:
        TypeExpr:
          source: 'TestFloat{ /   mantissa = lshift<Tiny2>(rhs.mantissa) /   exponent = incr<Tryte2>(rhs.exponent) / }'
          type: 
            ConstTypeName:
              typeName: TestFloat
              size: 24
              fields:
                mantissa: 
                  size: '18'
                  offset: '0'
                exponent: 
                  size: '6'
                  offset: '18'
          fieldValues: 
            mantissa:
              FuncExpr:
                source: 'lshift<Tiny2>(rhs.mantissa)'
                name: lshift_18
                args:
                - 
                  SliceExpr:
                    source: 'rhs.mantissa'
                    var: rhs
                    offset: 0
                    size: 18
                    fields: 
                      - mantissa
            exponent:
              FuncExpr:
                source: 'incr<Tryte2>(rhs.exponent)'
                name: incr_6
                args:
                - 
                  SliceExpr:
                    source: 'rhs.exponent'
                    var: rhs
                    offset: 18
                    size: 6
                    fields: 
                      - exponent
    return: 
    # floatAddCheckMantissa<TestFloat>(lhs, shifted)
      FuncExpr:
        source: 'floatAddCheckMantissa<TestFloat>(lhs, shifted)'
        name: floatAddCheckMantissa_24
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 24
        - 
          SliceExpr:
            source: 'shifted'
            var: shifted
            offset: 0
            size: 24
# 
# func TestFloat floatAddMantissas<TestFloat>(TestFloat lhs, TestFloat rhs) {
#   sum = fullAdd<Tiny2>(lhs.mantissa, rhs.mantissa, 0)
#   carry = notZero[sum[Tiny2]]
#   ret0 = TestFloat{
#     mantissa = carry ? sum[1 : Tiny2] : null
#     exponent = incr<Tryte2>(carry ? lhs.exponent : null)
#   }
#   val = TestFloat{
#     mantissa = not[carry] ? sum[0 : Tiny2] : null
#     exponent = not[carry] ? lhs.exponent : null
#   }
#   zero = isZero[sign<Tiny2>(val.mantissa)]
#   return ret0 | (zero ? 0 : floatAddNormalize<TestFloat>(val))
# }
  floatAddMantissas_24:
    returnType: 
      ConstTypeName:
        typeName: TestFloat
        size: 24
        fields:
          mantissa: 
            size: '18'
            offset: '0'
          exponent: 
            size: '6'
            offset: '18'
    params:
      - 
        argName: lhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
      - 
        argName: rhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<Tiny2>(lhs.mantissa, rhs.mantissa, 0)'
          name: fullAdd_18
          args:
          - 
            SliceExpr:
              source: 'lhs.mantissa'
              var: lhs
              offset: 0
              size: 18
              fields: 
                - mantissa
          - 
            SliceExpr:
              source: 'rhs.mantissa'
              var: rhs
              offset: 0
              size: 18
              fields: 
                - mantissa
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      carry:
        LutExpr:
          name: notZero
          args: 
            - 
              SliceExpr:
                source: 'sum[Tiny2]'
                var: sum
                offset: 18
                size: 1
                start:
                  ConstTypeName:
                    typeName: Tiny2
                    size: 18
      ret0:
        TypeExpr:
          source: 'TestFloat{ /   mantissa = carry ? sum[1 : Tiny2] : null /   exponent = incr<Tryte2>(carry ? lhs.exponent : null) / }'
          type: 
            ConstTypeName:
              typeName: TestFloat
              size: 24
              fields:
                mantissa: 
                  size: '18'
                  offset: '0'
                exponent: 
                  size: '6'
                  offset: '18'
          fieldValues: 
            mantissa:
              CondExpr:
                source: 'carry ? sum[1 : Tiny2] : null'
                if: 
                  SliceExpr:
                    source: 'carry'
                    var: carry
                    offset: 0
                    size: 1
                then: 
                  SliceExpr:
                    source: 'sum[1 : Tiny2]'
                    var: sum
                    offset: 1
                    size: 18
                    start:
                      ConstNumber:
                        value: 1
                    end:
                      ConstTypeName:
                        typeName: Tiny2
                        size: 18
                else:
                  NullExpr: ''
            exponent:
              FuncExpr:
                source: 'incr<Tryte2>(carry ? lhs.exponent : null)'
                name: incr_6
                args:
                - 
                  CondExpr:
                    source: 'carry ? lhs.exponent : null'
                    if: 
                      SliceExpr:
                        source: 'carry'
                        var: carry
                        offset: 0
                        size: 1
                    then: 
                      SliceExpr:
                        source: 'lhs.exponent'
                        var: lhs
                        offset: 18
                        size: 6
                        fields: 
                          - exponent
                    else:
                      NullExpr: ''
      val:
        TypeExpr:
          source: 'TestFloat{ /   mantissa = not[carry] ? sum[0 : Tiny2] : null /   exponent = not[carry] ? lhs.exponent : null / }'
          type: 
            ConstTypeName:
              typeName: TestFloat
              size: 24
              fields:
                mantissa: 
                  size: '18'
                  offset: '0'
                exponent: 
                  size: '6'
                  offset: '18'
          fieldValues: 
            mantissa:
              CondExpr:
                source: 'not[carry] ? sum[0 : Tiny2] : null'
                if: 
                  LutExpr:
                    name: not
                    args: 
                      - 
                        SliceExpr:
                          source: 'carry'
                          var: carry
                          offset: 0
                          size: 1
                then: 
                  SliceExpr:
                    source: 'sum[0 : Tiny2]'
                    var: sum
                    offset: 0
                    size: 18
                    start:
                      ConstNumber:
                        value: 0
                    end:
                      ConstTypeName:
                        typeName: Tiny2
                        size: 18
                else:
                  NullExpr: ''
            exponent:
              CondExpr:
                source: 'not[carry] ? lhs.exponent : null'
                if: 
                  LutExpr:
                    name: not
                    args: 
                      - 
                        SliceExpr:
                          source: 'carry'
                          var: carry
                          offset: 0
                          size: 1
                then: 
                  SliceExpr:
                    source: 'lhs.exponent'
                    var: lhs
                    offset: 18
                    size: 6
                    fields: 
                      - exponent
                else:
                  NullExpr: ''
      zero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny2>(val.mantissa)'
                name: sign_18
                args:
                - 
                  SliceExpr:
                    source: 'val.mantissa'
                    var: val
                    offset: 0
                    size: 18
                    fields: 
                      - mantissa
    return: 
    # ret0 | (zero ? 0 : floatAddNormalize<TestFloat>(val))
      MergeExpr:
        source: 'ret0 | (zero ? 0 : floatAddNormalize<TestFloat>(val))'
        lhs: 
          SliceExpr:
            source: 'ret0'
            var: ret0
            offset: 0
            size: 24
        rhs: 
          CondExpr:
            source: 'zero ? 0 : floatAddNormalize<TestFloat>(val)'
            if: 
              SliceExpr:
                source: 'zero'
                var: zero
                offset: 0
                size: 1
            then: 
              ValueExpr:
                  value: '0'
                  trits: '000000000000000000000000'
                  trytes: '99999999'
            else:
              FuncExpr:
                source: 'floatAddNormalize<TestFloat>(val)'
                name: floatAddNormalize_24
                args:
                - 
                  SliceExpr:
                    source: 'val'
                    var: val
                    offset: 0
                    size: 24
# 
# func TestFloat floatAddNormalize<TestFloat>(TestFloat val) {
#   nonZero = notZero[val.mantissa[Tiny2 - 1]]
#   return nonZero ? val : floatAddDoNormalize<TestFloat>(val)
# }
  floatAddNormalize_24:
    returnType: 
      ConstTypeName:
        typeName: TestFloat
        size: 24
        fields:
          mantissa: 
            size: '18'
            offset: '0'
          exponent: 
            size: '6'
            offset: '18'
    params:
      - 
        argName: val
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
    assigns: 
      nonZero:
        LutExpr:
          name: notZero
          args: 
            - 
              SliceExpr:
                source: 'val.mantissa[Tiny2 - 1]'
                var: val
                offset: 17
                size: 1
                fields: 
                  - mantissa
                start:
                  ConstExpr:
                    operator: '-'
                    lhs: 
                      ConstTypeName:
                        typeName: Tiny2
                        size: 18
                    rhs: 
                      ConstNumber:
                        value: 1
    return: 
    # nonZero ? val : floatAddDoNormalize<TestFloat>(val)
      CondExpr:
        source: 'nonZero ? val : floatAddDoNormalize<TestFloat>(val)'
        if: 
          SliceExpr:
            source: 'nonZero'
            var: nonZero
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'val'
            var: val
            offset: 0
            size: 24
        else:
          FuncExpr:
            source: 'floatAddDoNormalize<TestFloat>(val)'
            name: floatAddDoNormalize_24
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 24
# 
# func TestFloat floatAddDoNormalize<TestFloat>(TestFloat val) {
#   val1 = TestFloat{
#     mantissa = rshift<Tiny2>(val.mantissa)
#     exponent = decr<Tryte2>(val.exponent)
#   }
#   return floatAddNormalize<TestFloat>(val1)
# }
  floatAddDoNormalize_24:
    returnType: 
      ConstTypeName:
        typeName: TestFloat
        size: 24
        fields:
          mantissa: 
            size: '18'
            offset: '0'
          exponent: 
            size: '6'
            offset: '18'
    params:
      - 
        argName: val
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
    assigns: 
      val1:
        TypeExpr:
          source: 'TestFloat{ /   mantissa = rshift<Tiny2>(val.mantissa) /   exponent = decr<Tryte2>(val.exponent) / }'
          type: 
            ConstTypeName:
              typeName: TestFloat
              size: 24
              fields:
                mantissa: 
                  size: '18'
                  offset: '0'
                exponent: 
                  size: '6'
                  offset: '18'
          fieldValues: 
            mantissa:
              FuncExpr:
                source: 'rshift<Tiny2>(val.mantissa)'
                name: rshift_18
                args:
                - 
                  SliceExpr:
                    source: 'val.mantissa'
                    var: val
                    offset: 0
                    size: 18
                    fields: 
                      - mantissa
            exponent:
              FuncExpr:
                source: 'decr<Tryte2>(val.exponent)'
                name: decr_6
                args:
                - 
                  SliceExpr:
                    source: 'val.exponent'
                    var: val
                    offset: 18
                    size: 6
                    fields: 
                      - exponent
    return: 
    # floatAddNormalize<TestFloat>(val1)
      FuncExpr:
        source: 'floatAddNormalize<TestFloat>(val1)'
        name: floatAddNormalize_24
        args:
        - 
          SliceExpr:
            source: 'val1'
            var: val1
            offset: 0
            size: 24
# 
# func TestFloat floatDiv<TestFloat>(TestFloat lhs, TestFloat rhs) {
#   zero = or[isZero[sign<Tiny2>(lhs.mantissa)], isZero[sign<Tiny2>(rhs.mantissa)]]
#   return zero ? 0 : floatDivNonZero<TestFloat>(lhs, rhs)
# }
  floatDiv_24:
    returnType: 
      ConstTypeName:
        typeName: TestFloat
        size: 24
        fields:
          mantissa: 
            size: '18'
            offset: '0'
          exponent: 
            size: '6'
            offset: '18'
    params:
      - 
        argName: lhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
      - 
        argName: rhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
    assigns: 
      zero:
        LutExpr:
          name: or
          args: 
            - 
              LutExpr:
                name: isZero
                args: 
                  - 
                    FuncExpr:
                      source: 'sign<Tiny2>(lhs.mantissa)'
                      name: sign_18
                      args:
                      - 
                        SliceExpr:
                          source: 'lhs.mantissa'
                          var: lhs
                          offset: 0
                          size: 18
                          fields: 
                            - mantissa
            - 
              LutExpr:
                name: isZero
                args: 
                  - 
                    FuncExpr:
                      source: 'sign<Tiny2>(rhs.mantissa)'
                      name: sign_18
                      args:
                      - 
                        SliceExpr:
                          source: 'rhs.mantissa'
                          var: rhs
                          offset: 0
                          size: 18
                          fields: 
                            - mantissa
    return: 
    # zero ? 0 : floatDivNonZero<TestFloat>(lhs, rhs)
      CondExpr:
        source: 'zero ? 0 : floatDivNonZero<TestFloat>(lhs, rhs)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        else:
          FuncExpr:
            source: 'floatDivNonZero<TestFloat>(lhs, rhs)'
            name: floatDivNonZero_24
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 24
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 24
# 
# func TestFloat floatDivNonZero<TestFloat>(TestFloat lhs, TestFloat rhs) {
#   zero = as<M2>(0)
#   quotient = div<M3>(zero & lhs.mantissa, rhs.mantissa & zero)
#   sum = sub<Tryte2>(lhs.exponent, rhs.exponent)
#   isNormalized = isZero[quotient[Tiny2 * 2]]
#   normalized = TestFloat{
#     mantissa = quotient[Tiny2 : Tiny2]
#     exponent = sum
#   }
#   corrected = TestFloat{
#     mantissa = quotient[Tiny2 + 1 : Tiny2]
#     exponent = incr<Tryte2>(sum)
#   }
#   return isNormalized ? normalized : corrected
# }
  floatDivNonZero_24:
    returnType: 
      ConstTypeName:
        typeName: TestFloat
        size: 24
        fields:
          mantissa: 
            size: '18'
            offset: '0'
          exponent: 
            size: '6'
            offset: '18'
    params:
      - 
        argName: lhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
      - 
        argName: rhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
    assigns: 
      zero:
        FuncExpr:
          source: 'as<M2>(0)'
          name: as_36
          args:
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000000000000'
                trytes: '999999999999'
      quotient:
        FuncExpr:
          source: 'div<M3>(zero & lhs.mantissa, rhs.mantissa & zero)'
          name: div_54
          args:
          - 
            ConcatExpr:
              source: 'zero & lhs.mantissa'
              lhs: 
                SliceExpr:
                  source: 'zero'
                  var: zero
                  offset: 0
                  size: 36
              rhs: 
                SliceExpr:
                  source: 'lhs.mantissa'
                  var: lhs
                  offset: 0
                  size: 18
                  fields: 
                    - mantissa
          - 
            ConcatExpr:
              source: 'rhs.mantissa & zero'
              lhs: 
                SliceExpr:
                  source: 'rhs.mantissa'
                  var: rhs
                  offset: 0
                  size: 18
                  fields: 
                    - mantissa
              rhs: 
                SliceExpr:
                  source: 'zero'
                  var: zero
                  offset: 0
                  size: 36
      sum:
        FuncExpr:
          source: 'sub<Tryte2>(lhs.exponent, rhs.exponent)'
          name: sub_6
          args:
          - 
            SliceExpr:
              source: 'lhs.exponent'
              var: lhs
              offset: 18
              size: 6
              fields: 
                - exponent
          - 
            SliceExpr:
              source: 'rhs.exponent'
              var: rhs
              offset: 18
              size: 6
              fields: 
                - exponent
      isNormalized:
        LutExpr:
          name: isZero
          args: 
            - 
              SliceExpr:
                source: 'quotient[Tiny2 * 2]'
                var: quotient
                offset: 36
                size: 1
                start:
                  ConstTerm:
                    operator: '*'
                    lhs: 
                      ConstTypeName:
                        typeName: Tiny2
                        size: 18
                    rhs: 
                      ConstNumber:
                        value: 2
      normalized:
        TypeExpr:
          source: 'TestFloat{ /   mantissa = quotient[Tiny2 : Tiny2] /   exponent = sum / }'
          type: 
            ConstTypeName:
              typeName: TestFloat
              size: 24
              fields:
                mantissa: 
                  size: '18'
                  offset: '0'
                exponent: 
                  size: '6'
                  offset: '18'
          fieldValues: 
            mantissa:
              SliceExpr:
                source: 'quotient[Tiny2 : Tiny2]'
                var: quotient
                offset: 18
                size: 18
                start:
                  ConstTypeName:
                    typeName: Tiny2
                    size: 18
                end:
                  ConstTypeName:
                    typeName: Tiny2
                    size: 18
            exponent:
              SliceExpr:
                source: 'sum'
                var: sum
                offset: 0
                size: 6
      corrected:
        TypeExpr:
          source: 'TestFloat{ /   mantissa = quotient[Tiny2 + 1 : Tiny2] /   exponent = incr<Tryte2>(sum) / }'
          type: 
            ConstTypeName:
              typeName: TestFloat
              size: 24
              fields:
                mantissa: 
                  size: '18'
                  offset: '0'
                exponent: 
                  size: '6'
                  offset: '18'
          fieldValues: 
            mantissa:
              SliceExpr:
                source: 'quotient[Tiny2 + 1 : Tiny2]'
                var: quotient
                offset: 19
                size: 18
                start:
                  ConstExpr:
                    operator: '+'
                    lhs: 
                      ConstTypeName:
                        typeName: Tiny2
                        size: 18
                    rhs: 
                      ConstNumber:
                        value: 1
                end:
                  ConstTypeName:
                    typeName: Tiny2
                    size: 18
            exponent:
              FuncExpr:
                source: 'incr<Tryte2>(sum)'
                name: incr_6
                args:
                - 
                  SliceExpr:
                    source: 'sum'
                    var: sum
                    offset: 0
                    size: 6
    return: 
    # isNormalized ? normalized : corrected
      CondExpr:
        source: 'isNormalized ? normalized : corrected'
        if: 
          SliceExpr:
            source: 'isNormalized'
            var: isNormalized
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'normalized'
            var: normalized
            offset: 0
            size: 24
        else:
          SliceExpr:
            source: 'corrected'
            var: corrected
            offset: 0
            size: 24
# 
# func TestFloat floatMul<TestFloat>(TestFloat lhs, TestFloat rhs) {
#   lhsZero = isZero[sign<Tiny2>(lhs.mantissa)]
#   rhsZero = isZero[sign<Tiny2>(rhs.mantissa)]
#   return or[lhsZero, rhsZero] ? 0 : floatMulNonZero<TestFloat>(lhs, rhs)
# }
  floatMul_24:
    returnType: 
      ConstTypeName:
        typeName: TestFloat
        size: 24
        fields:
          mantissa: 
            size: '18'
            offset: '0'
          exponent: 
            size: '6'
            offset: '18'
    params:
      - 
        argName: lhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
      - 
        argName: rhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
    assigns: 
      lhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny2>(lhs.mantissa)'
                name: sign_18
                args:
                - 
                  SliceExpr:
                    source: 'lhs.mantissa'
                    var: lhs
                    offset: 0
                    size: 18
                    fields: 
                      - mantissa
      rhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny2>(rhs.mantissa)'
                name: sign_18
                args:
                - 
                  SliceExpr:
                    source: 'rhs.mantissa'
                    var: rhs
                    offset: 0
                    size: 18
                    fields: 
                      - mantissa
    return: 
    # or[lhsZero, rhsZero] ? 0 : floatMulNonZero<TestFloat>(lhs, rhs)
      CondExpr:
        source: 'or[lhsZero, rhsZero] ? 0 : floatMulNonZero<TestFloat>(lhs, rhs)'
        if: 
          LutExpr:
            name: or
            args: 
              - 
                SliceExpr:
                  source: 'lhsZero'
                  var: lhsZero
                  offset: 0
                  size: 1
              - 
                SliceExpr:
                  source: 'rhsZero'
                  var: rhsZero
                  offset: 0
                  size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        else:
          FuncExpr:
            source: 'floatMulNonZero<TestFloat>(lhs, rhs)'
            name: floatMulNonZero_24
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 24
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 24
# 
# func TestFloat floatMulNonZero<TestFloat>(TestFloat lhs, TestFloat rhs) {
#   product = fullMulNonZero<Tiny2>(lhs.mantissa, rhs.mantissa)
#   sum = add<Tryte2>(lhs.exponent, rhs.exponent)
#   return floatMulNormalize<TestFloat>(product, sum)
# }
  floatMulNonZero_24:
    returnType: 
      ConstTypeName:
        typeName: TestFloat
        size: 24
        fields:
          mantissa: 
            size: '18'
            offset: '0'
          exponent: 
            size: '6'
            offset: '18'
    params:
      - 
        argName: lhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
      - 
        argName: rhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
    assigns: 
      product:
        FuncExpr:
          source: 'fullMulNonZero<Tiny2>(lhs.mantissa, rhs.mantissa)'
          name: fullMulNonZero_18
          args:
          - 
            SliceExpr:
              source: 'lhs.mantissa'
              var: lhs
              offset: 0
              size: 18
              fields: 
                - mantissa
          - 
            SliceExpr:
              source: 'rhs.mantissa'
              var: rhs
              offset: 0
              size: 18
              fields: 
                - mantissa
      sum:
        FuncExpr:
          source: 'add<Tryte2>(lhs.exponent, rhs.exponent)'
          name: add_6
          args:
          - 
            SliceExpr:
              source: 'lhs.exponent'
              var: lhs
              offset: 18
              size: 6
              fields: 
                - exponent
          - 
            SliceExpr:
              source: 'rhs.exponent'
              var: rhs
              offset: 18
              size: 6
              fields: 
                - exponent
    return: 
    # floatMulNormalize<TestFloat>(product, sum)
      FuncExpr:
        source: 'floatMulNormalize<TestFloat>(product, sum)'
        name: floatMulNormalize_24
        args:
        - 
          SliceExpr:
            source: 'product'
            var: product
            offset: 0
            size: 36
        - 
          SliceExpr:
            source: 'sum'
            var: sum
            offset: 0
            size: 6
# 
# func TestFloat floatMulNormalize<TestFloat>(M2 product, Tryte2 sum) {
#   isNormalized = notZero[product[M2 - 1]]
#   prod0 = isNormalized ? product : null
#   sum0 = isNormalized ? sum : null
#   prod1 = not[isNormalized] ? 0 & product[0 : M2 - 1] : null
#   sum1 = not[isNormalized] ? sum : null
#   normalized = TestFloat{
#     mantissa = prod0[Tiny2 : Tiny2]
#     exponent = sum0
#   }
#   return normalized | floatMulNormalize<TestFloat>(prod1, decr<Tryte2>(sum1))
# }
  floatMulNormalize_24:
    returnType: 
      ConstTypeName:
        typeName: TestFloat
        size: 24
        fields:
          mantissa: 
            size: '18'
            offset: '0'
          exponent: 
            size: '6'
            offset: '18'
    params:
      - 
        argName: product
        size: 36
        type: 
          ConstTypeName:
            typeName: M2
            size: 36
      - 
        argName: sum
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
    assigns: 
      isNormalized:
        LutExpr:
          name: notZero
          args: 
            - 
              SliceExpr:
                source: 'product[M2 - 1]'
                var: product
                offset: 35
                size: 1
                start:
                  ConstExpr:
                    operator: '-'
                    lhs: 
                      ConstTypeName:
                        typeName: M2
                        size: 36
                    rhs: 
                      ConstNumber:
                        value: 1
      prod0:
        CondExpr:
          source: 'isNormalized ? product : null'
          if: 
            SliceExpr:
              source: 'isNormalized'
              var: isNormalized
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'product'
              var: product
              offset: 0
              size: 36
          else:
            NullExpr: ''
      sum0:
        CondExpr:
          source: 'isNormalized ? sum : null'
          if: 
            SliceExpr:
              source: 'isNormalized'
              var: isNormalized
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'sum'
              var: sum
              offset: 0
              size: 6
          else:
            NullExpr: ''
      prod1:
        CondExpr:
          source: 'not[isNormalized] ? 0 & product[0 : M2 - 1] : null'
          if: 
            LutExpr:
              name: not
              args: 
                - 
                  SliceExpr:
                    source: 'isNormalized'
                    var: isNormalized
                    offset: 0
                    size: 1
          then: 
            ConcatExpr:
              source: '0 & product[0 : M2 - 1]'
              lhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
              rhs: 
                SliceExpr:
                  source: 'product[0 : M2 - 1]'
                  var: product
                  offset: 0
                  size: 35
                  start:
                    ConstNumber:
                      value: 0
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: M2
                          size: 36
                      rhs: 
                        ConstNumber:
                          value: 1
          else:
            NullExpr: ''
      sum1:
        CondExpr:
          source: 'not[isNormalized] ? sum : null'
          if: 
            LutExpr:
              name: not
              args: 
                - 
                  SliceExpr:
                    source: 'isNormalized'
                    var: isNormalized
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'sum'
              var: sum
              offset: 0
              size: 6
          else:
            NullExpr: ''
      normalized:
        TypeExpr:
          source: 'TestFloat{ /   mantissa = prod0[Tiny2 : Tiny2] /   exponent = sum0 / }'
          type: 
            ConstTypeName:
              typeName: TestFloat
              size: 24
              fields:
                mantissa: 
                  size: '18'
                  offset: '0'
                exponent: 
                  size: '6'
                  offset: '18'
          fieldValues: 
            mantissa:
              SliceExpr:
                source: 'prod0[Tiny2 : Tiny2]'
                var: prod0
                offset: 18
                size: 18
                start:
                  ConstTypeName:
                    typeName: Tiny2
                    size: 18
                end:
                  ConstTypeName:
                    typeName: Tiny2
                    size: 18
            exponent:
              SliceExpr:
                source: 'sum0'
                var: sum0
                offset: 0
                size: 6
    return: 
    # normalized | floatMulNormalize<TestFloat>(prod1, decr<Tryte2>(sum1))
      MergeExpr:
        source: 'normalized | floatMulNormalize<TestFloat>(prod1, decr<Tryte2>(sum1))'
        lhs: 
          SliceExpr:
            source: 'normalized'
            var: normalized
            offset: 0
            size: 24
        rhs: 
          FuncExpr:
            source: 'floatMulNormalize<TestFloat>(prod1, decr<Tryte2>(sum1))'
            name: floatMulNormalize_24
            args:
            - 
              SliceExpr:
                source: 'prod1'
                var: prod1
                offset: 0
                size: 36
            - 
              FuncExpr:
                source: 'decr<Tryte2>(sum1)'
                name: decr_6
                args:
                - 
                  SliceExpr:
                    source: 'sum1'
                    var: sum1
                    offset: 0
                    size: 6
# 
# func TestFloat floatNeg<TestFloat>(TestFloat val) {
#   return TestFloat{
#     mantissa = neg<Tiny2>(val.mantissa)
#     exponent = val.exponent
#   }
# }
  floatNeg_24:
    returnType: 
      ConstTypeName:
        typeName: TestFloat
        size: 24
        fields:
          mantissa: 
            size: '18'
            offset: '0'
          exponent: 
            size: '6'
            offset: '18'
    params:
      - 
        argName: val
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
    return: 
    # TestFloat{
    #   mantissa = neg<Tiny2>(val.mantissa)
    #   exponent = val.exponent
    # }
      TypeExpr:
        source: 'TestFloat{ /   mantissa = neg<Tiny2>(val.mantissa) /   exponent = val.exponent / }'
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
        fieldValues: 
          mantissa:
            FuncExpr:
              source: 'neg<Tiny2>(val.mantissa)'
              name: neg_18
              args:
              - 
                SliceExpr:
                  source: 'val.mantissa'
                  var: val
                  offset: 0
                  size: 18
                  fields: 
                    - mantissa
          exponent:
            SliceExpr:
              source: 'val.exponent'
              var: val
              offset: 18
              size: 6
              fields: 
                - exponent
# 
# func TestFloat floatSub<TestFloat>(TestFloat lhs, TestFloat rhs) {
#   return floatAdd<TestFloat>(lhs, floatNeg<TestFloat>(rhs))
# }
  floatSub_24:
    returnType: 
      ConstTypeName:
        typeName: TestFloat
        size: 24
        fields:
          mantissa: 
            size: '18'
            offset: '0'
          exponent: 
            size: '6'
            offset: '18'
    params:
      - 
        argName: lhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
      - 
        argName: rhs
        size: 24
        type: 
          ConstTypeName:
            typeName: TestFloat
            size: 24
            fields:
              mantissa: 
                size: '18'
                offset: '0'
              exponent: 
                size: '6'
                offset: '18'
    return: 
    # floatAdd<TestFloat>(lhs, floatNeg<TestFloat>(rhs))
      FuncExpr:
        source: 'floatAdd<TestFloat>(lhs, floatNeg<TestFloat>(rhs))'
        name: floatAdd_24
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 24
        - 
          FuncExpr:
            source: 'floatNeg<TestFloat>(rhs)'
            name: floatNeg_24
            args:
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 24
# 
# func Trit cmp<Tryte2>(Tryte2 lhs, Tryte2 rhs) {
#   val0 = cmp<A>(lhs[0 : A], rhs[0 : A])
#   val1 = cmp<B>(lhs[A : B], rhs[A : B])
#   return sign[val0, val1, 0]
# }
  cmp_6:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: lhs
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
      - 
        argName: rhs
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
    assigns: 
      val0:
        FuncExpr:
          source: 'cmp<A>(lhs[0 : A], rhs[0 : A])'
          name: cmp_3
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
      val1:
        FuncExpr:
          source: 'cmp<B>(lhs[A : B], rhs[A : B])'
          name: cmp_3
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
    return: 
    # sign[val0, val1, 0]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
# 
# func Trit sign<Tiny2>(Tiny2 val) {
#   val0 = sign<A>(val[0 : A])
#   val1 = sign<B>(val[A : B])
#   return sign[val0, val1, 0]
# }
  sign_18:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: val
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
    assigns: 
      val0:
        FuncExpr:
          source: 'sign<A>(val[0 : A])'
          name: sign_9
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
      val1:
        FuncExpr:
          source: 'sign<B>(val[A : B])'
          name: sign_9
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
    return: 
    # sign[val0, val1, 0]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
# 
# func Bool equal<Tryte2>(Tryte2 lhs, Tryte2 rhs) {
#   val0 = equal<A>(lhs[0 : A], rhs[0 : A])
#   val1 = equal<B>(lhs[A : B], rhs[A : B])
#   return and[val0, val1]
# }
  equal_6:
    returnType: 
      ConstTypeName:
        typeName: Bool
        size: 1
    params:
      - 
        argName: lhs
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
      - 
        argName: rhs
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
    assigns: 
      val0:
        FuncExpr:
          source: 'equal<A>(lhs[0 : A], rhs[0 : A])'
          name: equal_3
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
      val1:
        FuncExpr:
          source: 'equal<B>(lhs[A : B], rhs[A : B])'
          name: equal_3
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
    return: 
    # and[val0, val1]
      LutExpr:
        name: and
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
# 
# func TCarry fullAdd<Tiny2>(Tiny2 lhs, Tiny2 rhs, Carry carry) {
#   add0 = fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)
#   add1 = fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)
#   return add0.value & add1
# }
  fullAdd_18:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 19
        fields:
          value: 
            size: '18'
            offset: '0'
          carry: 
            size: '1'
            offset: '18'
    params:
      - 
        argName: lhs
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
      - 
        argName: rhs
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)'
          name: fullAdd_9
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)'
          name: fullAdd_9
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 9
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1
      ConcatExpr:
        source: 'add0.value & add1'
        lhs: 
          SliceExpr:
            source: 'add0.value'
            var: add0
            offset: 0
            size: 9
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'add1'
            var: add1
            offset: 0
            size: 10
# 
# func Tryte2 incr<Tryte2>(Tryte2 val) {
#   halfSum = halfAdd<Tryte2>(val, 1)
#   return halfSum.value
# }
  incr_6:
    returnType: 
      ConstTypeName:
        typeName: Tryte2
        size: 6
    params:
      - 
        argName: val
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
    assigns: 
      halfSum:
        FuncExpr:
          source: 'halfAdd<Tryte2>(val, 1)'
          name: halfAdd_6
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 6
          - 
            ValueExpr:
                value: '1'
                trits: '1'
                trytes: 'A'
    return: 
    # halfSum.value
      SliceExpr:
        source: 'halfSum.value'
        var: halfSum
        offset: 0
        size: 6
        fields: 
          - value
# 
# func TCarry halfAdd<Tryte2>(Tryte2 val, Carry carry) {
#   add0 = halfAdd<A>(val[0 : A], carry)
#   add1 = halfAdd<B>(val[A : B], add0.carry)
#   return add0.value & add1
# }
  halfAdd_6:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 7
        fields:
          value: 
            size: '6'
            offset: '0'
          carry: 
            size: '1'
            offset: '6'
    params:
      - 
        argName: val
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'halfAdd<A>(val[0 : A], carry)'
          name: halfAdd_3
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'halfAdd<B>(val[A : B], add0.carry)'
          name: halfAdd_3
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 3
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1
      ConcatExpr:
        source: 'add0.value & add1'
        lhs: 
          SliceExpr:
            source: 'add0.value'
            var: add0
            offset: 0
            size: 3
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'add1'
            var: add1
            offset: 0
            size: 4
# 
# func Tryte2 decr<Tryte2>(Tryte2 val) {
#   halfSum = halfAdd<Tryte2>(val, -)
#   return halfSum.value
# }
  decr_6:
    returnType: 
      ConstTypeName:
        typeName: Tryte2
        size: 6
    params:
      - 
        argName: val
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
    assigns: 
      halfSum:
        FuncExpr:
          source: 'halfAdd<Tryte2>(val, -)'
          name: halfAdd_6
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 6
          - 
            ValueExpr:
                value: '-'
                trits: '-'
                trytes: 'Z'
    return: 
    # halfSum.value
      SliceExpr:
        source: 'halfSum.value'
        var: halfSum
        offset: 0
        size: 6
        fields: 
          - value
# 
# func Tiny2 lshift<Tiny2>(Tiny2 val) {
#   return val[1 : Tiny2 - 1] & 0
# }
  lshift_18:
    returnType: 
      ConstTypeName:
        typeName: Tiny2
        size: 18
    params:
      - 
        argName: val
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
    return: 
    # val[1 : Tiny2 - 1] & 0
      ConcatExpr:
        source: 'val[1 : Tiny2 - 1] & 0'
        lhs: 
          SliceExpr:
            source: 'val[1 : Tiny2 - 1]'
            var: val
            offset: 1
            size: 17
            start:
              ConstNumber:
                value: 1
            end:
              ConstExpr:
                operator: '-'
                lhs: 
                  ConstTypeName:
                    typeName: Tiny2
                    size: 18
                rhs: 
                  ConstNumber:
                    value: 1
        rhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
# 
# func Tiny2 neg<Tiny2>(Tiny2 val) {
#   val0 = neg<A>(val[0 : A])
#   val1 = neg<B>(val[A : B])
#   return val0 & val1
# }
  neg_18:
    returnType: 
      ConstTypeName:
        typeName: Tiny2
        size: 18
    params:
      - 
        argName: val
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
    assigns: 
      val0:
        FuncExpr:
          source: 'neg<A>(val[0 : A])'
          name: neg_9
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
      val1:
        FuncExpr:
          source: 'neg<B>(val[A : B])'
          name: neg_9
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
    return: 
    # val0 & val1
      ConcatExpr:
        source: 'val0 & val1'
        lhs: 
          SliceExpr:
            source: 'val0'
            var: val0
            offset: 0
            size: 9
        rhs: 
          SliceExpr:
            source: 'val1'
            var: val1
            offset: 0
            size: 9
# 
# func T2 fullMul<Tiny2>(Tiny2 lhs, Tiny2 rhs) {
#   lhsZero = isZero[sign<Tiny2>(lhs)]
#   rhsZero = isZero[sign<Tiny2>(rhs)]
#   return or[lhsZero, rhsZero] ? 0 : fullMulNonZero<Tiny2>(lhs, rhs)
# }
  fullMul_18:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 36
    params:
      - 
        argName: lhs
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
      - 
        argName: rhs
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
    assigns: 
      lhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny2>(lhs)'
                name: sign_18
                args:
                - 
                  SliceExpr:
                    source: 'lhs'
                    var: lhs
                    offset: 0
                    size: 18
      rhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny2>(rhs)'
                name: sign_18
                args:
                - 
                  SliceExpr:
                    source: 'rhs'
                    var: rhs
                    offset: 0
                    size: 18
    return: 
    # or[lhsZero, rhsZero] ? 0 : fullMulNonZero<Tiny2>(lhs, rhs)
      CondExpr:
        source: 'or[lhsZero, rhsZero] ? 0 : fullMulNonZero<Tiny2>(lhs, rhs)'
        if: 
          LutExpr:
            name: or
            args: 
              - 
                SliceExpr:
                  source: 'lhsZero'
                  var: lhsZero
                  offset: 0
                  size: 1
              - 
                SliceExpr:
                  source: 'rhsZero'
                  var: rhsZero
                  offset: 0
                  size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000000000000'
              trytes: '999999999999'
        else:
          FuncExpr:
            source: 'fullMulNonZero<Tiny2>(lhs, rhs)'
            name: fullMulNonZero_18
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 18
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 18
# 
# func T2 fullMulNonZero<Tiny2>(Tiny2 lhs, Tiny2 rhs) {
#   zero = as<P>(0)
#   product = fullMulNonZero<P3>(lhs & zero, rhs & zero)
#   return product[0 : T2]
# }
  fullMulNonZero_18:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 36
    params:
      - 
        argName: lhs
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
      - 
        argName: rhs
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
    assigns: 
      zero:
        FuncExpr:
          source: 'as<P>(0)'
          name: as_9
          args:
          - 
            ValueExpr:
                value: '0'
                trits: '000000000'
                trytes: '999'
      product:
        FuncExpr:
          source: 'fullMulNonZero<P3>(lhs & zero, rhs & zero)'
          name: fullMulNonZero_27
          args:
          - 
            ConcatExpr:
              source: 'lhs & zero'
              lhs: 
                SliceExpr:
                  source: 'lhs'
                  var: lhs
                  offset: 0
                  size: 18
              rhs: 
                SliceExpr:
                  source: 'zero'
                  var: zero
                  offset: 0
                  size: 9
          - 
            ConcatExpr:
              source: 'rhs & zero'
              lhs: 
                SliceExpr:
                  source: 'rhs'
                  var: rhs
                  offset: 0
                  size: 18
              rhs: 
                SliceExpr:
                  source: 'zero'
                  var: zero
                  offset: 0
                  size: 9
    return: 
    # product[0 : T2]
      SliceExpr:
        source: 'product[0 : T2]'
        var: product
        offset: 0
        size: 36
        start:
          ConstNumber:
            value: 0
        end:
          ConstTypeName:
            typeName: T2
            size: 36
# 
# func T2 fullMul<P3>(P3 lhs, P3 rhs) {
#   lhsZero = isZero[sign<P3>(lhs)]
#   rhsZero = isZero[sign<P3>(rhs)]
#   return or[lhsZero, rhsZero] ? 0 : fullMulNonZero<P3>(lhs, rhs)
# }
  fullMul_27:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 54
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: P3
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: P3
            size: 27
    assigns: 
      lhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<P3>(lhs)'
                name: sign_27
                args:
                - 
                  SliceExpr:
                    source: 'lhs'
                    var: lhs
                    offset: 0
                    size: 27
      rhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<P3>(rhs)'
                name: sign_27
                args:
                - 
                  SliceExpr:
                    source: 'rhs'
                    var: rhs
                    offset: 0
                    size: 27
    return: 
    # or[lhsZero, rhsZero] ? 0 : fullMulNonZero<P3>(lhs, rhs)
      CondExpr:
        source: 'or[lhsZero, rhsZero] ? 0 : fullMulNonZero<P3>(lhs, rhs)'
        if: 
          LutExpr:
            name: or
            args: 
              - 
                SliceExpr:
                  source: 'lhsZero'
                  var: lhsZero
                  offset: 0
                  size: 1
              - 
                SliceExpr:
                  source: 'rhsZero'
                  var: rhsZero
                  offset: 0
                  size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000000000000000000000000000000'
              trytes: '999999999999999999'
        else:
          FuncExpr:
            source: 'fullMulNonZero<P3>(lhs, rhs)'
            name: fullMulNonZero_27
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 27
# 
# func T2 fullMulNonZero<P3>(P3 lhs, P3 rhs) {
#   A = lhs[P * 0 : P]
#   B = lhs[P * 1 : P]
#   C = lhs[P * 2 : P]
#   D = rhs[P * 0 : P]
#   E = rhs[P * 1 : P]
#   F = rhs[P * 2 : P]
#   AD = fullMul<P>(A, D)
#   AE = fullMul<P>(A, E)
#   AF = fullMul<P>(A, F)
#   BD = fullMul<P>(B, D)
#   BE = fullMul<P>(B, E)
#   BF = fullMul<P>(B, F)
#   CD = fullMul<P>(C, D)
#   CE = fullMul<P>(C, E)
#   CF = fullMul<P>(C, F)
#   tryte0 = AD[P * 0 : P]
#   carry0 = AD[P * 1 : P]
#   AEBD = addProduct<P>(AE, BD)
#   AEBDc = addCarryToProduct<P>(AEBD.value, carry0, 0)
#   tryte1 = AEBDc[P * 0 : P]
#   carry1 = AEBDc[P * 1 : P]
#   AFBE = addProduct<P>(AF, BE)
#   AFBEc = addCarryToProduct<P>(AFBE.value, carry1, 0)
#   AFBEcCD = addProduct<P>(AFBEc, CD)
#   tryte2 = AFBEcCD[P * 0 : P]
#   carry2 = AFBEcCD[P * 1 : P]
#   BFCE = addProduct<P>(BF, CE)
#   BFCEc = addCarryToProduct<P>(BFCE.value, carry2, 0)
#   tryte3 = BFCEc[P * 0 : P]
#   carry3 = BFCEc[P * 1 : P]
#   CFc = addCarryToProduct<P>(CF, carry3, AFBEcCD.carry)
#   return tryte0 & tryte1 & tryte2 & tryte3 & CFc
# }
  fullMulNonZero_27:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 54
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: P3
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: P3
            size: 27
    assigns: 
      A:
        SliceExpr:
          source: 'lhs[P * 0 : P]'
          var: lhs
          offset: 0
          size: 9
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 9
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 9
      B:
        SliceExpr:
          source: 'lhs[P * 1 : P]'
          var: lhs
          offset: 9
          size: 9
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 9
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 9
      C:
        SliceExpr:
          source: 'lhs[P * 2 : P]'
          var: lhs
          offset: 18
          size: 9
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 9
              rhs: 
                ConstNumber:
                  value: 2
          end:
            ConstTypeName:
              typeName: P
              size: 9
      D:
        SliceExpr:
          source: 'rhs[P * 0 : P]'
          var: rhs
          offset: 0
          size: 9
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 9
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 9
      E:
        SliceExpr:
          source: 'rhs[P * 1 : P]'
          var: rhs
          offset: 9
          size: 9
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 9
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 9
      F:
        SliceExpr:
          source: 'rhs[P * 2 : P]'
          var: rhs
          offset: 18
          size: 9
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 9
              rhs: 
                ConstNumber:
                  value: 2
          end:
            ConstTypeName:
              typeName: P
              size: 9
      AD:
        FuncExpr:
          source: 'fullMul<P>(A, D)'
          name: fullMul_9
          args:
          - 
            SliceExpr:
              source: 'A'
              var: A
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'D'
              var: D
              offset: 0
              size: 9
      AE:
        FuncExpr:
          source: 'fullMul<P>(A, E)'
          name: fullMul_9
          args:
          - 
            SliceExpr:
              source: 'A'
              var: A
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'E'
              var: E
              offset: 0
              size: 9
      AF:
        FuncExpr:
          source: 'fullMul<P>(A, F)'
          name: fullMul_9
          args:
          - 
            SliceExpr:
              source: 'A'
              var: A
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'F'
              var: F
              offset: 0
              size: 9
      BD:
        FuncExpr:
          source: 'fullMul<P>(B, D)'
          name: fullMul_9
          args:
          - 
            SliceExpr:
              source: 'B'
              var: B
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'D'
              var: D
              offset: 0
              size: 9
      BE:
        FuncExpr:
          source: 'fullMul<P>(B, E)'
          name: fullMul_9
          args:
          - 
            SliceExpr:
              source: 'B'
              var: B
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'E'
              var: E
              offset: 0
              size: 9
      BF:
        FuncExpr:
          source: 'fullMul<P>(B, F)'
          name: fullMul_9
          args:
          - 
            SliceExpr:
              source: 'B'
              var: B
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'F'
              var: F
              offset: 0
              size: 9
      CD:
        FuncExpr:
          source: 'fullMul<P>(C, D)'
          name: fullMul_9
          args:
          - 
            SliceExpr:
              source: 'C'
              var: C
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'D'
              var: D
              offset: 0
              size: 9
      CE:
        FuncExpr:
          source: 'fullMul<P>(C, E)'
          name: fullMul_9
          args:
          - 
            SliceExpr:
              source: 'C'
              var: C
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'E'
              var: E
              offset: 0
              size: 9
      CF:
        FuncExpr:
          source: 'fullMul<P>(C, F)'
          name: fullMul_9
          args:
          - 
            SliceExpr:
              source: 'C'
              var: C
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'F'
              var: F
              offset: 0
              size: 9
      tryte0:
        SliceExpr:
          source: 'AD[P * 0 : P]'
          var: AD
          offset: 0
          size: 9
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 9
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 9
      carry0:
        SliceExpr:
          source: 'AD[P * 1 : P]'
          var: AD
          offset: 9
          size: 9
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 9
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 9
      AEBD:
        FuncExpr:
          source: 'addProduct<P>(AE, BD)'
          name: addProduct_9
          args:
          - 
            SliceExpr:
              source: 'AE'
              var: AE
              offset: 0
              size: 18
          - 
            SliceExpr:
              source: 'BD'
              var: BD
              offset: 0
              size: 18
      AEBDc:
        FuncExpr:
          source: 'addCarryToProduct<P>(AEBD.value, carry0, 0)'
          name: addCarryToProduct_9
          args:
          - 
            SliceExpr:
              source: 'AEBD.value'
              var: AEBD
              offset: 0
              size: 18
              fields: 
                - value
          - 
            SliceExpr:
              source: 'carry0'
              var: carry0
              offset: 0
              size: 9
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      tryte1:
        SliceExpr:
          source: 'AEBDc[P * 0 : P]'
          var: AEBDc
          offset: 0
          size: 9
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 9
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 9
      carry1:
        SliceExpr:
          source: 'AEBDc[P * 1 : P]'
          var: AEBDc
          offset: 9
          size: 9
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 9
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 9
      AFBE:
        FuncExpr:
          source: 'addProduct<P>(AF, BE)'
          name: addProduct_9
          args:
          - 
            SliceExpr:
              source: 'AF'
              var: AF
              offset: 0
              size: 18
          - 
            SliceExpr:
              source: 'BE'
              var: BE
              offset: 0
              size: 18
      AFBEc:
        FuncExpr:
          source: 'addCarryToProduct<P>(AFBE.value, carry1, 0)'
          name: addCarryToProduct_9
          args:
          - 
            SliceExpr:
              source: 'AFBE.value'
              var: AFBE
              offset: 0
              size: 18
              fields: 
                - value
          - 
            SliceExpr:
              source: 'carry1'
              var: carry1
              offset: 0
              size: 9
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      AFBEcCD:
        FuncExpr:
          source: 'addProduct<P>(AFBEc, CD)'
          name: addProduct_9
          args:
          - 
            SliceExpr:
              source: 'AFBEc'
              var: AFBEc
              offset: 0
              size: 18
          - 
            SliceExpr:
              source: 'CD'
              var: CD
              offset: 0
              size: 18
      tryte2:
        SliceExpr:
          source: 'AFBEcCD[P * 0 : P]'
          var: AFBEcCD
          offset: 0
          size: 9
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 9
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 9
      carry2:
        SliceExpr:
          source: 'AFBEcCD[P * 1 : P]'
          var: AFBEcCD
          offset: 9
          size: 9
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 9
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 9
      BFCE:
        FuncExpr:
          source: 'addProduct<P>(BF, CE)'
          name: addProduct_9
          args:
          - 
            SliceExpr:
              source: 'BF'
              var: BF
              offset: 0
              size: 18
          - 
            SliceExpr:
              source: 'CE'
              var: CE
              offset: 0
              size: 18
      BFCEc:
        FuncExpr:
          source: 'addCarryToProduct<P>(BFCE.value, carry2, 0)'
          name: addCarryToProduct_9
          args:
          - 
            SliceExpr:
              source: 'BFCE.value'
              var: BFCE
              offset: 0
              size: 18
              fields: 
                - value
          - 
            SliceExpr:
              source: 'carry2'
              var: carry2
              offset: 0
              size: 9
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      tryte3:
        SliceExpr:
          source: 'BFCEc[P * 0 : P]'
          var: BFCEc
          offset: 0
          size: 9
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 9
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 9
      carry3:
        SliceExpr:
          source: 'BFCEc[P * 1 : P]'
          var: BFCEc
          offset: 9
          size: 9
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 9
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 9
      CFc:
        FuncExpr:
          source: 'addCarryToProduct<P>(CF, carry3, AFBEcCD.carry)'
          name: addCarryToProduct_9
          args:
          - 
            SliceExpr:
              source: 'CF'
              var: CF
              offset: 0
              size: 18
          - 
            SliceExpr:
              source: 'carry3'
              var: carry3
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'AFBEcCD.carry'
              var: AFBEcCD
              offset: 18
              size: 1
              fields: 
                - carry
    return: 
    # tryte0 & tryte1 & tryte2 & tryte3 & CFc
      ConcatExpr:
        source: 'tryte0 & tryte1 & tryte2 & tryte3 & CFc'
        lhs: 
          ConcatExpr:
            source: 'tryte0 & tryte1 & tryte2 & tryte3'
            lhs: 
              ConcatExpr:
                source: 'tryte0 & tryte1 & tryte2'
                lhs: 
                  ConcatExpr:
                    source: 'tryte0 & tryte1'
                    lhs: 
                      SliceExpr:
                        source: 'tryte0'
                        var: tryte0
                        offset: 0
                        size: 9
                    rhs: 
                      SliceExpr:
                        source: 'tryte1'
                        var: tryte1
                        offset: 0
                        size: 9
                rhs: 
                  SliceExpr:
                    source: 'tryte2'
                    var: tryte2
                    offset: 0
                    size: 9
            rhs: 
              SliceExpr:
                source: 'tryte3'
                var: tryte3
                offset: 0
                size: 9
        rhs: 
          SliceExpr:
            source: 'CFc'
            var: CFc
            offset: 0
            size: 18
# 
# func P2Carry addProduct<P>(P2 lhs, P2 rhs) {
#   lo = fullAdd<P>(lhs[P * 0 : P], rhs[P * 0 : P], 0)
#   hi = fullAdd<P>(lhs[P * 1 : P], rhs[P * 1 : P], lo.carry)
#   return lo.value & hi
# }
  addProduct_9:
    returnType: 
      ConstTypeName:
        typeName: P2Carry
        size: 19
        fields:
          value: 
            size: '18'
            offset: '0'
          carry: 
            size: '1'
            offset: '18'
    params:
      - 
        argName: lhs
        size: 18
        type: 
          ConstTypeName:
            typeName: P2
            size: 18
      - 
        argName: rhs
        size: 18
        type: 
          ConstTypeName:
            typeName: P2
            size: 18
    assigns: 
      lo:
        FuncExpr:
          source: 'fullAdd<P>(lhs[P * 0 : P], rhs[P * 0 : P], 0)'
          name: fullAdd_9
          args:
          - 
            SliceExpr:
              source: 'lhs[P * 0 : P]'
              var: lhs
              offset: 0
              size: 9
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 9
                  rhs: 
                    ConstNumber:
                      value: 0
              end:
                ConstTypeName:
                  typeName: P
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[P * 0 : P]'
              var: rhs
              offset: 0
              size: 9
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 9
                  rhs: 
                    ConstNumber:
                      value: 0
              end:
                ConstTypeName:
                  typeName: P
                  size: 9
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      hi:
        FuncExpr:
          source: 'fullAdd<P>(lhs[P * 1 : P], rhs[P * 1 : P], lo.carry)'
          name: fullAdd_9
          args:
          - 
            SliceExpr:
              source: 'lhs[P * 1 : P]'
              var: lhs
              offset: 9
              size: 9
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 9
                  rhs: 
                    ConstNumber:
                      value: 1
              end:
                ConstTypeName:
                  typeName: P
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[P * 1 : P]'
              var: rhs
              offset: 9
              size: 9
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 9
                  rhs: 
                    ConstNumber:
                      value: 1
              end:
                ConstTypeName:
                  typeName: P
                  size: 9
          - 
            SliceExpr:
              source: 'lo.carry'
              var: lo
              offset: 9
              size: 1
              fields: 
                - carry
    return: 
    # lo.value & hi
      ConcatExpr:
        source: 'lo.value & hi'
        lhs: 
          SliceExpr:
            source: 'lo.value'
            var: lo
            offset: 0
            size: 9
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'hi'
            var: hi
            offset: 0
            size: 10
# 
# func P2 addCarryToProduct<P>(P2 lhs, P carry, Carry extraTrit) {
#   lo = fullAdd<P>(lhs[P * 0 : P], carry, extraTrit)
#   hi = halfAdd<P>(lhs[P * 1 : P], lo.carry)
#   return lo.value & hi.value
# }
  addCarryToProduct_9:
    returnType: 
      ConstTypeName:
        typeName: P2
        size: 18
    params:
      - 
        argName: lhs
        size: 18
        type: 
          ConstTypeName:
            typeName: P2
            size: 18
      - 
        argName: carry
        size: 9
        type: 
          ConstTypeName:
            typeName: P
            size: 9
      - 
        argName: extraTrit
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      lo:
        FuncExpr:
          source: 'fullAdd<P>(lhs[P * 0 : P], carry, extraTrit)'
          name: fullAdd_9
          args:
          - 
            SliceExpr:
              source: 'lhs[P * 0 : P]'
              var: lhs
              offset: 0
              size: 9
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 9
                  rhs: 
                    ConstNumber:
                      value: 0
              end:
                ConstTypeName:
                  typeName: P
                  size: 9
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'extraTrit'
              var: extraTrit
              offset: 0
              size: 1
      hi:
        FuncExpr:
          source: 'halfAdd<P>(lhs[P * 1 : P], lo.carry)'
          name: halfAdd_9
          args:
          - 
            SliceExpr:
              source: 'lhs[P * 1 : P]'
              var: lhs
              offset: 9
              size: 9
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 9
                  rhs: 
                    ConstNumber:
                      value: 1
              end:
                ConstTypeName:
                  typeName: P
                  size: 9
          - 
            SliceExpr:
              source: 'lo.carry'
              var: lo
              offset: 9
              size: 1
              fields: 
                - carry
    return: 
    # lo.value & hi.value
      ConcatExpr:
        source: 'lo.value & hi.value'
        lhs: 
          SliceExpr:
            source: 'lo.value'
            var: lo
            offset: 0
            size: 9
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'hi.value'
            var: hi
            offset: 0
            size: 9
            fields: 
              - value
# 
# func T2 fullMul<P>(P lhs, P rhs) {
#   lhsZero = isZero[sign<P>(lhs)]
#   rhsZero = isZero[sign<P>(rhs)]
#   return or[lhsZero, rhsZero] ? 0 : fullMulNonZero<P>(lhs, rhs)
# }
  fullMul_9:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 18
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: P
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: P
            size: 9
    assigns: 
      lhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<P>(lhs)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'lhs'
                    var: lhs
                    offset: 0
                    size: 9
      rhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<P>(rhs)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'rhs'
                    var: rhs
                    offset: 0
                    size: 9
    return: 
    # or[lhsZero, rhsZero] ? 0 : fullMulNonZero<P>(lhs, rhs)
      CondExpr:
        source: 'or[lhsZero, rhsZero] ? 0 : fullMulNonZero<P>(lhs, rhs)'
        if: 
          LutExpr:
            name: or
            args: 
              - 
                SliceExpr:
                  source: 'lhsZero'
                  var: lhsZero
                  offset: 0
                  size: 1
              - 
                SliceExpr:
                  source: 'rhsZero'
                  var: rhsZero
                  offset: 0
                  size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000'
              trytes: '999999'
        else:
          FuncExpr:
            source: 'fullMulNonZero<P>(lhs, rhs)'
            name: fullMulNonZero_9
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 9
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 9
# 
# func T2 fullMulNonZero<P>(P lhs, P rhs) {
#   A = lhs[P * 0 : P]
#   B = lhs[P * 1 : P]
#   C = lhs[P * 2 : P]
#   D = rhs[P * 0 : P]
#   E = rhs[P * 1 : P]
#   F = rhs[P * 2 : P]
#   AD = fullMul<P>(A, D)
#   AE = fullMul<P>(A, E)
#   AF = fullMul<P>(A, F)
#   BD = fullMul<P>(B, D)
#   BE = fullMul<P>(B, E)
#   BF = fullMul<P>(B, F)
#   CD = fullMul<P>(C, D)
#   CE = fullMul<P>(C, E)
#   CF = fullMul<P>(C, F)
#   tryte0 = AD[P * 0 : P]
#   carry0 = AD[P * 1 : P]
#   AEBD = addProduct<P>(AE, BD)
#   AEBDc = addCarryToProduct<P>(AEBD.value, carry0, 0)
#   tryte1 = AEBDc[P * 0 : P]
#   carry1 = AEBDc[P * 1 : P]
#   AFBE = addProduct<P>(AF, BE)
#   AFBEc = addCarryToProduct<P>(AFBE.value, carry1, 0)
#   AFBEcCD = addProduct<P>(AFBEc, CD)
#   tryte2 = AFBEcCD[P * 0 : P]
#   carry2 = AFBEcCD[P * 1 : P]
#   BFCE = addProduct<P>(BF, CE)
#   BFCEc = addCarryToProduct<P>(BFCE.value, carry2, 0)
#   tryte3 = BFCEc[P * 0 : P]
#   carry3 = BFCEc[P * 1 : P]
#   CFc = addCarryToProduct<P>(CF, carry3, AFBEcCD.carry)
#   return tryte0 & tryte1 & tryte2 & tryte3 & CFc
# }
  fullMulNonZero_9:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 18
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: P
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: P
            size: 9
    assigns: 
      A:
        SliceExpr:
          source: 'lhs[P * 0 : P]'
          var: lhs
          offset: 0
          size: 3
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 3
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 3
      B:
        SliceExpr:
          source: 'lhs[P * 1 : P]'
          var: lhs
          offset: 3
          size: 3
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 3
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 3
      C:
        SliceExpr:
          source: 'lhs[P * 2 : P]'
          var: lhs
          offset: 6
          size: 3
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 3
              rhs: 
                ConstNumber:
                  value: 2
          end:
            ConstTypeName:
              typeName: P
              size: 3
      D:
        SliceExpr:
          source: 'rhs[P * 0 : P]'
          var: rhs
          offset: 0
          size: 3
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 3
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 3
      E:
        SliceExpr:
          source: 'rhs[P * 1 : P]'
          var: rhs
          offset: 3
          size: 3
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 3
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 3
      F:
        SliceExpr:
          source: 'rhs[P * 2 : P]'
          var: rhs
          offset: 6
          size: 3
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 3
              rhs: 
                ConstNumber:
                  value: 2
          end:
            ConstTypeName:
              typeName: P
              size: 3
      AD:
        FuncExpr:
          source: 'fullMul<P>(A, D)'
          name: fullMul_3
          args:
          - 
            SliceExpr:
              source: 'A'
              var: A
              offset: 0
              size: 3
          - 
            SliceExpr:
              source: 'D'
              var: D
              offset: 0
              size: 3
      AE:
        FuncExpr:
          source: 'fullMul<P>(A, E)'
          name: fullMul_3
          args:
          - 
            SliceExpr:
              source: 'A'
              var: A
              offset: 0
              size: 3
          - 
            SliceExpr:
              source: 'E'
              var: E
              offset: 0
              size: 3
      AF:
        FuncExpr:
          source: 'fullMul<P>(A, F)'
          name: fullMul_3
          args:
          - 
            SliceExpr:
              source: 'A'
              var: A
              offset: 0
              size: 3
          - 
            SliceExpr:
              source: 'F'
              var: F
              offset: 0
              size: 3
      BD:
        FuncExpr:
          source: 'fullMul<P>(B, D)'
          name: fullMul_3
          args:
          - 
            SliceExpr:
              source: 'B'
              var: B
              offset: 0
              size: 3
          - 
            SliceExpr:
              source: 'D'
              var: D
              offset: 0
              size: 3
      BE:
        FuncExpr:
          source: 'fullMul<P>(B, E)'
          name: fullMul_3
          args:
          - 
            SliceExpr:
              source: 'B'
              var: B
              offset: 0
              size: 3
          - 
            SliceExpr:
              source: 'E'
              var: E
              offset: 0
              size: 3
      BF:
        FuncExpr:
          source: 'fullMul<P>(B, F)'
          name: fullMul_3
          args:
          - 
            SliceExpr:
              source: 'B'
              var: B
              offset: 0
              size: 3
          - 
            SliceExpr:
              source: 'F'
              var: F
              offset: 0
              size: 3
      CD:
        FuncExpr:
          source: 'fullMul<P>(C, D)'
          name: fullMul_3
          args:
          - 
            SliceExpr:
              source: 'C'
              var: C
              offset: 0
              size: 3
          - 
            SliceExpr:
              source: 'D'
              var: D
              offset: 0
              size: 3
      CE:
        FuncExpr:
          source: 'fullMul<P>(C, E)'
          name: fullMul_3
          args:
          - 
            SliceExpr:
              source: 'C'
              var: C
              offset: 0
              size: 3
          - 
            SliceExpr:
              source: 'E'
              var: E
              offset: 0
              size: 3
      CF:
        FuncExpr:
          source: 'fullMul<P>(C, F)'
          name: fullMul_3
          args:
          - 
            SliceExpr:
              source: 'C'
              var: C
              offset: 0
              size: 3
          - 
            SliceExpr:
              source: 'F'
              var: F
              offset: 0
              size: 3
      tryte0:
        SliceExpr:
          source: 'AD[P * 0 : P]'
          var: AD
          offset: 0
          size: 3
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 3
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 3
      carry0:
        SliceExpr:
          source: 'AD[P * 1 : P]'
          var: AD
          offset: 3
          size: 3
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 3
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 3
      AEBD:
        FuncExpr:
          source: 'addProduct<P>(AE, BD)'
          name: addProduct_3
          args:
          - 
            SliceExpr:
              source: 'AE'
              var: AE
              offset: 0
              size: 6
          - 
            SliceExpr:
              source: 'BD'
              var: BD
              offset: 0
              size: 6
      AEBDc:
        FuncExpr:
          source: 'addCarryToProduct<P>(AEBD.value, carry0, 0)'
          name: addCarryToProduct_3
          args:
          - 
            SliceExpr:
              source: 'AEBD.value'
              var: AEBD
              offset: 0
              size: 6
              fields: 
                - value
          - 
            SliceExpr:
              source: 'carry0'
              var: carry0
              offset: 0
              size: 3
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      tryte1:
        SliceExpr:
          source: 'AEBDc[P * 0 : P]'
          var: AEBDc
          offset: 0
          size: 3
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 3
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 3
      carry1:
        SliceExpr:
          source: 'AEBDc[P * 1 : P]'
          var: AEBDc
          offset: 3
          size: 3
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 3
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 3
      AFBE:
        FuncExpr:
          source: 'addProduct<P>(AF, BE)'
          name: addProduct_3
          args:
          - 
            SliceExpr:
              source: 'AF'
              var: AF
              offset: 0
              size: 6
          - 
            SliceExpr:
              source: 'BE'
              var: BE
              offset: 0
              size: 6
      AFBEc:
        FuncExpr:
          source: 'addCarryToProduct<P>(AFBE.value, carry1, 0)'
          name: addCarryToProduct_3
          args:
          - 
            SliceExpr:
              source: 'AFBE.value'
              var: AFBE
              offset: 0
              size: 6
              fields: 
                - value
          - 
            SliceExpr:
              source: 'carry1'
              var: carry1
              offset: 0
              size: 3
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      AFBEcCD:
        FuncExpr:
          source: 'addProduct<P>(AFBEc, CD)'
          name: addProduct_3
          args:
          - 
            SliceExpr:
              source: 'AFBEc'
              var: AFBEc
              offset: 0
              size: 6
          - 
            SliceExpr:
              source: 'CD'
              var: CD
              offset: 0
              size: 6
      tryte2:
        SliceExpr:
          source: 'AFBEcCD[P * 0 : P]'
          var: AFBEcCD
          offset: 0
          size: 3
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 3
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 3
      carry2:
        SliceExpr:
          source: 'AFBEcCD[P * 1 : P]'
          var: AFBEcCD
          offset: 3
          size: 3
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 3
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 3
      BFCE:
        FuncExpr:
          source: 'addProduct<P>(BF, CE)'
          name: addProduct_3
          args:
          - 
            SliceExpr:
              source: 'BF'
              var: BF
              offset: 0
              size: 6
          - 
            SliceExpr:
              source: 'CE'
              var: CE
              offset: 0
              size: 6
      BFCEc:
        FuncExpr:
          source: 'addCarryToProduct<P>(BFCE.value, carry2, 0)'
          name: addCarryToProduct_3
          args:
          - 
            SliceExpr:
              source: 'BFCE.value'
              var: BFCE
              offset: 0
              size: 6
              fields: 
                - value
          - 
            SliceExpr:
              source: 'carry2'
              var: carry2
              offset: 0
              size: 3
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      tryte3:
        SliceExpr:
          source: 'BFCEc[P * 0 : P]'
          var: BFCEc
          offset: 0
          size: 3
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 3
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 3
      carry3:
        SliceExpr:
          source: 'BFCEc[P * 1 : P]'
          var: BFCEc
          offset: 3
          size: 3
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 3
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 3
      CFc:
        FuncExpr:
          source: 'addCarryToProduct<P>(CF, carry3, AFBEcCD.carry)'
          name: addCarryToProduct_3
          args:
          - 
            SliceExpr:
              source: 'CF'
              var: CF
              offset: 0
              size: 6
          - 
            SliceExpr:
              source: 'carry3'
              var: carry3
              offset: 0
              size: 3
          - 
            SliceExpr:
              source: 'AFBEcCD.carry'
              var: AFBEcCD
              offset: 6
              size: 1
              fields: 
                - carry
    return: 
    # tryte0 & tryte1 & tryte2 & tryte3 & CFc
      ConcatExpr:
        source: 'tryte0 & tryte1 & tryte2 & tryte3 & CFc'
        lhs: 
          ConcatExpr:
            source: 'tryte0 & tryte1 & tryte2 & tryte3'
            lhs: 
              ConcatExpr:
                source: 'tryte0 & tryte1 & tryte2'
                lhs: 
                  ConcatExpr:
                    source: 'tryte0 & tryte1'
                    lhs: 
                      SliceExpr:
                        source: 'tryte0'
                        var: tryte0
                        offset: 0
                        size: 3
                    rhs: 
                      SliceExpr:
                        source: 'tryte1'
                        var: tryte1
                        offset: 0
                        size: 3
                rhs: 
                  SliceExpr:
                    source: 'tryte2'
                    var: tryte2
                    offset: 0
                    size: 3
            rhs: 
              SliceExpr:
                source: 'tryte3'
                var: tryte3
                offset: 0
                size: 3
        rhs: 
          SliceExpr:
            source: 'CFc'
            var: CFc
            offset: 0
            size: 6
# 
# func P2Carry addProduct<P>(P2 lhs, P2 rhs) {
#   lo = fullAdd<P>(lhs[P * 0 : P], rhs[P * 0 : P], 0)
#   hi = fullAdd<P>(lhs[P * 1 : P], rhs[P * 1 : P], lo.carry)
#   return lo.value & hi
# }
  addProduct_3:
    returnType: 
      ConstTypeName:
        typeName: P2Carry
        size: 7
        fields:
          value: 
            size: '6'
            offset: '0'
          carry: 
            size: '1'
            offset: '6'
    params:
      - 
        argName: lhs
        size: 6
        type: 
          ConstTypeName:
            typeName: P2
            size: 6
      - 
        argName: rhs
        size: 6
        type: 
          ConstTypeName:
            typeName: P2
            size: 6
    assigns: 
      lo:
        FuncExpr:
          source: 'fullAdd<P>(lhs[P * 0 : P], rhs[P * 0 : P], 0)'
          name: fullAdd_3
          args:
          - 
            SliceExpr:
              source: 'lhs[P * 0 : P]'
              var: lhs
              offset: 0
              size: 3
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 3
                  rhs: 
                    ConstNumber:
                      value: 0
              end:
                ConstTypeName:
                  typeName: P
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[P * 0 : P]'
              var: rhs
              offset: 0
              size: 3
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 3
                  rhs: 
                    ConstNumber:
                      value: 0
              end:
                ConstTypeName:
                  typeName: P
                  size: 3
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      hi:
        FuncExpr:
          source: 'fullAdd<P>(lhs[P * 1 : P], rhs[P * 1 : P], lo.carry)'
          name: fullAdd_3
          args:
          - 
            SliceExpr:
              source: 'lhs[P * 1 : P]'
              var: lhs
              offset: 3
              size: 3
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 3
                  rhs: 
                    ConstNumber:
                      value: 1
              end:
                ConstTypeName:
                  typeName: P
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[P * 1 : P]'
              var: rhs
              offset: 3
              size: 3
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 3
                  rhs: 
                    ConstNumber:
                      value: 1
              end:
                ConstTypeName:
                  typeName: P
                  size: 3
          - 
            SliceExpr:
              source: 'lo.carry'
              var: lo
              offset: 3
              size: 1
              fields: 
                - carry
    return: 
    # lo.value & hi
      ConcatExpr:
        source: 'lo.value & hi'
        lhs: 
          SliceExpr:
            source: 'lo.value'
            var: lo
            offset: 0
            size: 3
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'hi'
            var: hi
            offset: 0
            size: 4
# 
# func P2 addCarryToProduct<P>(P2 lhs, P carry, Carry extraTrit) {
#   lo = fullAdd<P>(lhs[P * 0 : P], carry, extraTrit)
#   hi = halfAdd<P>(lhs[P * 1 : P], lo.carry)
#   return lo.value & hi.value
# }
  addCarryToProduct_3:
    returnType: 
      ConstTypeName:
        typeName: P2
        size: 6
    params:
      - 
        argName: lhs
        size: 6
        type: 
          ConstTypeName:
            typeName: P2
            size: 6
      - 
        argName: carry
        size: 3
        type: 
          ConstTypeName:
            typeName: P
            size: 3
      - 
        argName: extraTrit
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      lo:
        FuncExpr:
          source: 'fullAdd<P>(lhs[P * 0 : P], carry, extraTrit)'
          name: fullAdd_3
          args:
          - 
            SliceExpr:
              source: 'lhs[P * 0 : P]'
              var: lhs
              offset: 0
              size: 3
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 3
                  rhs: 
                    ConstNumber:
                      value: 0
              end:
                ConstTypeName:
                  typeName: P
                  size: 3
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 3
          - 
            SliceExpr:
              source: 'extraTrit'
              var: extraTrit
              offset: 0
              size: 1
      hi:
        FuncExpr:
          source: 'halfAdd<P>(lhs[P * 1 : P], lo.carry)'
          name: halfAdd_3
          args:
          - 
            SliceExpr:
              source: 'lhs[P * 1 : P]'
              var: lhs
              offset: 3
              size: 3
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 3
                  rhs: 
                    ConstNumber:
                      value: 1
              end:
                ConstTypeName:
                  typeName: P
                  size: 3
          - 
            SliceExpr:
              source: 'lo.carry'
              var: lo
              offset: 3
              size: 1
              fields: 
                - carry
    return: 
    # lo.value & hi.value
      ConcatExpr:
        source: 'lo.value & hi.value'
        lhs: 
          SliceExpr:
            source: 'lo.value'
            var: lo
            offset: 0
            size: 3
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'hi.value'
            var: hi
            offset: 0
            size: 3
            fields: 
              - value
# 
# func T2 fullMul<P>(P lhs, P rhs) {
#   lhsZero = isZero[sign<P>(lhs)]
#   rhsZero = isZero[sign<P>(rhs)]
#   return or[lhsZero, rhsZero] ? 0 : fullMulNonZero<P>(lhs, rhs)
# }
  fullMul_3:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 6
    params:
      - 
        argName: lhs
        size: 3
        type: 
          ConstTypeName:
            typeName: P
            size: 3
      - 
        argName: rhs
        size: 3
        type: 
          ConstTypeName:
            typeName: P
            size: 3
    assigns: 
      lhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<P>(lhs)'
                name: sign_3
                args:
                - 
                  SliceExpr:
                    source: 'lhs'
                    var: lhs
                    offset: 0
                    size: 3
      rhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<P>(rhs)'
                name: sign_3
                args:
                - 
                  SliceExpr:
                    source: 'rhs'
                    var: rhs
                    offset: 0
                    size: 3
    return: 
    # or[lhsZero, rhsZero] ? 0 : fullMulNonZero<P>(lhs, rhs)
      CondExpr:
        source: 'or[lhsZero, rhsZero] ? 0 : fullMulNonZero<P>(lhs, rhs)'
        if: 
          LutExpr:
            name: or
            args: 
              - 
                SliceExpr:
                  source: 'lhsZero'
                  var: lhsZero
                  offset: 0
                  size: 1
              - 
                SliceExpr:
                  source: 'rhsZero'
                  var: rhsZero
                  offset: 0
                  size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000'
              trytes: '99'
        else:
          FuncExpr:
            source: 'fullMulNonZero<P>(lhs, rhs)'
            name: fullMulNonZero_3
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 3
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 3
# 
# func T2 fullMulNonZero<P>(P lhs, P rhs) {
#   A = lhs[P * 0 : P]
#   B = lhs[P * 1 : P]
#   C = lhs[P * 2 : P]
#   D = rhs[P * 0 : P]
#   E = rhs[P * 1 : P]
#   F = rhs[P * 2 : P]
#   AD = fullMul<P>(A, D)
#   AE = fullMul<P>(A, E)
#   AF = fullMul<P>(A, F)
#   BD = fullMul<P>(B, D)
#   BE = fullMul<P>(B, E)
#   BF = fullMul<P>(B, F)
#   CD = fullMul<P>(C, D)
#   CE = fullMul<P>(C, E)
#   CF = fullMul<P>(C, F)
#   tryte0 = AD[P * 0 : P]
#   carry0 = AD[P * 1 : P]
#   AEBD = addProduct<P>(AE, BD)
#   AEBDc = addCarryToProduct<P>(AEBD.value, carry0, 0)
#   tryte1 = AEBDc[P * 0 : P]
#   carry1 = AEBDc[P * 1 : P]
#   AFBE = addProduct<P>(AF, BE)
#   AFBEc = addCarryToProduct<P>(AFBE.value, carry1, 0)
#   AFBEcCD = addProduct<P>(AFBEc, CD)
#   tryte2 = AFBEcCD[P * 0 : P]
#   carry2 = AFBEcCD[P * 1 : P]
#   BFCE = addProduct<P>(BF, CE)
#   BFCEc = addCarryToProduct<P>(BFCE.value, carry2, 0)
#   tryte3 = BFCEc[P * 0 : P]
#   carry3 = BFCEc[P * 1 : P]
#   CFc = addCarryToProduct<P>(CF, carry3, AFBEcCD.carry)
#   return tryte0 & tryte1 & tryte2 & tryte3 & CFc
# }
  fullMulNonZero_3:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 6
    params:
      - 
        argName: lhs
        size: 3
        type: 
          ConstTypeName:
            typeName: P
            size: 3
      - 
        argName: rhs
        size: 3
        type: 
          ConstTypeName:
            typeName: P
            size: 3
    assigns: 
      A:
        SliceExpr:
          source: 'lhs[P * 0 : P]'
          var: lhs
          offset: 0
          size: 1
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 1
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 1
      B:
        SliceExpr:
          source: 'lhs[P * 1 : P]'
          var: lhs
          offset: 1
          size: 1
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 1
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 1
      C:
        SliceExpr:
          source: 'lhs[P * 2 : P]'
          var: lhs
          offset: 2
          size: 1
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 1
              rhs: 
                ConstNumber:
                  value: 2
          end:
            ConstTypeName:
              typeName: P
              size: 1
      D:
        SliceExpr:
          source: 'rhs[P * 0 : P]'
          var: rhs
          offset: 0
          size: 1
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 1
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 1
      E:
        SliceExpr:
          source: 'rhs[P * 1 : P]'
          var: rhs
          offset: 1
          size: 1
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 1
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 1
      F:
        SliceExpr:
          source: 'rhs[P * 2 : P]'
          var: rhs
          offset: 2
          size: 1
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 1
              rhs: 
                ConstNumber:
                  value: 2
          end:
            ConstTypeName:
              typeName: P
              size: 1
      AD:
        FuncExpr:
          source: 'fullMul<P>(A, D)'
          name: fullMul_1
          args:
          - 
            SliceExpr:
              source: 'A'
              var: A
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'D'
              var: D
              offset: 0
              size: 1
      AE:
        FuncExpr:
          source: 'fullMul<P>(A, E)'
          name: fullMul_1
          args:
          - 
            SliceExpr:
              source: 'A'
              var: A
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'E'
              var: E
              offset: 0
              size: 1
      AF:
        FuncExpr:
          source: 'fullMul<P>(A, F)'
          name: fullMul_1
          args:
          - 
            SliceExpr:
              source: 'A'
              var: A
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'F'
              var: F
              offset: 0
              size: 1
      BD:
        FuncExpr:
          source: 'fullMul<P>(B, D)'
          name: fullMul_1
          args:
          - 
            SliceExpr:
              source: 'B'
              var: B
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'D'
              var: D
              offset: 0
              size: 1
      BE:
        FuncExpr:
          source: 'fullMul<P>(B, E)'
          name: fullMul_1
          args:
          - 
            SliceExpr:
              source: 'B'
              var: B
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'E'
              var: E
              offset: 0
              size: 1
      BF:
        FuncExpr:
          source: 'fullMul<P>(B, F)'
          name: fullMul_1
          args:
          - 
            SliceExpr:
              source: 'B'
              var: B
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'F'
              var: F
              offset: 0
              size: 1
      CD:
        FuncExpr:
          source: 'fullMul<P>(C, D)'
          name: fullMul_1
          args:
          - 
            SliceExpr:
              source: 'C'
              var: C
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'D'
              var: D
              offset: 0
              size: 1
      CE:
        FuncExpr:
          source: 'fullMul<P>(C, E)'
          name: fullMul_1
          args:
          - 
            SliceExpr:
              source: 'C'
              var: C
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'E'
              var: E
              offset: 0
              size: 1
      CF:
        FuncExpr:
          source: 'fullMul<P>(C, F)'
          name: fullMul_1
          args:
          - 
            SliceExpr:
              source: 'C'
              var: C
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'F'
              var: F
              offset: 0
              size: 1
      tryte0:
        SliceExpr:
          source: 'AD[P * 0 : P]'
          var: AD
          offset: 0
          size: 1
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 1
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 1
      carry0:
        SliceExpr:
          source: 'AD[P * 1 : P]'
          var: AD
          offset: 1
          size: 1
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 1
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 1
      AEBD:
        FuncExpr:
          source: 'addProduct<P>(AE, BD)'
          name: addProduct_1
          args:
          - 
            SliceExpr:
              source: 'AE'
              var: AE
              offset: 0
              size: 2
          - 
            SliceExpr:
              source: 'BD'
              var: BD
              offset: 0
              size: 2
      AEBDc:
        FuncExpr:
          source: 'addCarryToProduct<P>(AEBD.value, carry0, 0)'
          name: addCarryToProduct_1
          args:
          - 
            SliceExpr:
              source: 'AEBD.value'
              var: AEBD
              offset: 0
              size: 2
              fields: 
                - value
          - 
            SliceExpr:
              source: 'carry0'
              var: carry0
              offset: 0
              size: 1
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      tryte1:
        SliceExpr:
          source: 'AEBDc[P * 0 : P]'
          var: AEBDc
          offset: 0
          size: 1
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 1
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 1
      carry1:
        SliceExpr:
          source: 'AEBDc[P * 1 : P]'
          var: AEBDc
          offset: 1
          size: 1
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 1
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 1
      AFBE:
        FuncExpr:
          source: 'addProduct<P>(AF, BE)'
          name: addProduct_1
          args:
          - 
            SliceExpr:
              source: 'AF'
              var: AF
              offset: 0
              size: 2
          - 
            SliceExpr:
              source: 'BE'
              var: BE
              offset: 0
              size: 2
      AFBEc:
        FuncExpr:
          source: 'addCarryToProduct<P>(AFBE.value, carry1, 0)'
          name: addCarryToProduct_1
          args:
          - 
            SliceExpr:
              source: 'AFBE.value'
              var: AFBE
              offset: 0
              size: 2
              fields: 
                - value
          - 
            SliceExpr:
              source: 'carry1'
              var: carry1
              offset: 0
              size: 1
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      AFBEcCD:
        FuncExpr:
          source: 'addProduct<P>(AFBEc, CD)'
          name: addProduct_1
          args:
          - 
            SliceExpr:
              source: 'AFBEc'
              var: AFBEc
              offset: 0
              size: 2
          - 
            SliceExpr:
              source: 'CD'
              var: CD
              offset: 0
              size: 2
      tryte2:
        SliceExpr:
          source: 'AFBEcCD[P * 0 : P]'
          var: AFBEcCD
          offset: 0
          size: 1
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 1
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 1
      carry2:
        SliceExpr:
          source: 'AFBEcCD[P * 1 : P]'
          var: AFBEcCD
          offset: 1
          size: 1
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 1
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 1
      BFCE:
        FuncExpr:
          source: 'addProduct<P>(BF, CE)'
          name: addProduct_1
          args:
          - 
            SliceExpr:
              source: 'BF'
              var: BF
              offset: 0
              size: 2
          - 
            SliceExpr:
              source: 'CE'
              var: CE
              offset: 0
              size: 2
      BFCEc:
        FuncExpr:
          source: 'addCarryToProduct<P>(BFCE.value, carry2, 0)'
          name: addCarryToProduct_1
          args:
          - 
            SliceExpr:
              source: 'BFCE.value'
              var: BFCE
              offset: 0
              size: 2
              fields: 
                - value
          - 
            SliceExpr:
              source: 'carry2'
              var: carry2
              offset: 0
              size: 1
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      tryte3:
        SliceExpr:
          source: 'BFCEc[P * 0 : P]'
          var: BFCEc
          offset: 0
          size: 1
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 1
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 1
      carry3:
        SliceExpr:
          source: 'BFCEc[P * 1 : P]'
          var: BFCEc
          offset: 1
          size: 1
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 1
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 1
      CFc:
        FuncExpr:
          source: 'addCarryToProduct<P>(CF, carry3, AFBEcCD.carry)'
          name: addCarryToProduct_1
          args:
          - 
            SliceExpr:
              source: 'CF'
              var: CF
              offset: 0
              size: 2
          - 
            SliceExpr:
              source: 'carry3'
              var: carry3
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'AFBEcCD.carry'
              var: AFBEcCD
              offset: 2
              size: 1
              fields: 
                - carry
    return: 
    # tryte0 & tryte1 & tryte2 & tryte3 & CFc
      ConcatExpr:
        source: 'tryte0 & tryte1 & tryte2 & tryte3 & CFc'
        lhs: 
          ConcatExpr:
            source: 'tryte0 & tryte1 & tryte2 & tryte3'
            lhs: 
              ConcatExpr:
                source: 'tryte0 & tryte1 & tryte2'
                lhs: 
                  ConcatExpr:
                    source: 'tryte0 & tryte1'
                    lhs: 
                      SliceExpr:
                        source: 'tryte0'
                        var: tryte0
                        offset: 0
                        size: 1
                    rhs: 
                      SliceExpr:
                        source: 'tryte1'
                        var: tryte1
                        offset: 0
                        size: 1
                rhs: 
                  SliceExpr:
                    source: 'tryte2'
                    var: tryte2
                    offset: 0
                    size: 1
            rhs: 
              SliceExpr:
                source: 'tryte3'
                var: tryte3
                offset: 0
                size: 1
        rhs: 
          SliceExpr:
            source: 'CFc'
            var: CFc
            offset: 0
            size: 2
# 
# func P2Carry addProduct<P>(P2 lhs, P2 rhs) {
#   lo = fullAdd<P>(lhs[P * 0 : P], rhs[P * 0 : P], 0)
#   hi = fullAdd<P>(lhs[P * 1 : P], rhs[P * 1 : P], lo.carry)
#   return lo.value & hi
# }
  addProduct_1:
    returnType: 
      ConstTypeName:
        typeName: P2Carry
        size: 3
        fields:
          value: 
            size: '2'
            offset: '0'
          carry: 
            size: '1'
            offset: '2'
    params:
      - 
        argName: lhs
        size: 2
        type: 
          ConstTypeName:
            typeName: P2
            size: 2
      - 
        argName: rhs
        size: 2
        type: 
          ConstTypeName:
            typeName: P2
            size: 2
    assigns: 
      lo:
        FuncExpr:
          source: 'fullAdd<P>(lhs[P * 0 : P], rhs[P * 0 : P], 0)'
          name: fullAdd_1
          args:
          - 
            SliceExpr:
              source: 'lhs[P * 0 : P]'
              var: lhs
              offset: 0
              size: 1
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 1
                  rhs: 
                    ConstNumber:
                      value: 0
              end:
                ConstTypeName:
                  typeName: P
                  size: 1
          - 
            SliceExpr:
              source: 'rhs[P * 0 : P]'
              var: rhs
              offset: 0
              size: 1
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 1
                  rhs: 
                    ConstNumber:
                      value: 0
              end:
                ConstTypeName:
                  typeName: P
                  size: 1
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      hi:
        FuncExpr:
          source: 'fullAdd<P>(lhs[P * 1 : P], rhs[P * 1 : P], lo.carry)'
          name: fullAdd_1
          args:
          - 
            SliceExpr:
              source: 'lhs[P * 1 : P]'
              var: lhs
              offset: 1
              size: 1
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 1
                  rhs: 
                    ConstNumber:
                      value: 1
              end:
                ConstTypeName:
                  typeName: P
                  size: 1
          - 
            SliceExpr:
              source: 'rhs[P * 1 : P]'
              var: rhs
              offset: 1
              size: 1
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 1
                  rhs: 
                    ConstNumber:
                      value: 1
              end:
                ConstTypeName:
                  typeName: P
                  size: 1
          - 
            SliceExpr:
              source: 'lo.carry'
              var: lo
              offset: 1
              size: 1
              fields: 
                - carry
    return: 
    # lo.value & hi
      ConcatExpr:
        source: 'lo.value & hi'
        lhs: 
          SliceExpr:
            source: 'lo.value'
            var: lo
            offset: 0
            size: 1
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'hi'
            var: hi
            offset: 0
            size: 2
# 
# func P2 addCarryToProduct<P>(P2 lhs, P carry, Carry extraTrit) {
#   lo = fullAdd<P>(lhs[P * 0 : P], carry, extraTrit)
#   hi = halfAdd<P>(lhs[P * 1 : P], lo.carry)
#   return lo.value & hi.value
# }
  addCarryToProduct_1:
    returnType: 
      ConstTypeName:
        typeName: P2
        size: 2
    params:
      - 
        argName: lhs
        size: 2
        type: 
          ConstTypeName:
            typeName: P2
            size: 2
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: P
            size: 1
      - 
        argName: extraTrit
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      lo:
        FuncExpr:
          source: 'fullAdd<P>(lhs[P * 0 : P], carry, extraTrit)'
          name: fullAdd_1
          args:
          - 
            SliceExpr:
              source: 'lhs[P * 0 : P]'
              var: lhs
              offset: 0
              size: 1
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 1
                  rhs: 
                    ConstNumber:
                      value: 0
              end:
                ConstTypeName:
                  typeName: P
                  size: 1
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'extraTrit'
              var: extraTrit
              offset: 0
              size: 1
      hi:
        FuncExpr:
          source: 'halfAdd<P>(lhs[P * 1 : P], lo.carry)'
          name: halfAdd_1
          args:
          - 
            SliceExpr:
              source: 'lhs[P * 1 : P]'
              var: lhs
              offset: 1
              size: 1
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 1
                  rhs: 
                    ConstNumber:
                      value: 1
              end:
                ConstTypeName:
                  typeName: P
                  size: 1
          - 
            SliceExpr:
              source: 'lo.carry'
              var: lo
              offset: 1
              size: 1
              fields: 
                - carry
    return: 
    # lo.value & hi.value
      ConcatExpr:
        source: 'lo.value & hi.value'
        lhs: 
          SliceExpr:
            source: 'lo.value'
            var: lo
            offset: 0
            size: 1
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'hi.value'
            var: hi
            offset: 0
            size: 1
            fields: 
              - value
# 
# func Tryte2 add<Tryte2>(Tryte2 lhs, Tryte2 rhs) {
#   sum = fullAdd<Tryte2>(lhs, rhs, 0)
#   return sum.value
# }
  add_6:
    returnType: 
      ConstTypeName:
        typeName: Tryte2
        size: 6
    params:
      - 
        argName: lhs
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
      - 
        argName: rhs
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<Tryte2>(lhs, rhs, 0)'
          name: fullAdd_6
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 6
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 6
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
    return: 
    # sum.value
      SliceExpr:
        source: 'sum.value'
        var: sum
        offset: 0
        size: 6
        fields: 
          - value
# 
# func TCarry fullAdd<Tryte2>(Tryte2 lhs, Tryte2 rhs, Carry carry) {
#   add0 = fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)
#   add1 = fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)
#   return add0.value & add1
# }
  fullAdd_6:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 7
        fields:
          value: 
            size: '6'
            offset: '0'
          carry: 
            size: '1'
            offset: '6'
    params:
      - 
        argName: lhs
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
      - 
        argName: rhs
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)'
          name: fullAdd_3
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)'
          name: fullAdd_3
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 3
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1
      ConcatExpr:
        source: 'add0.value & add1'
        lhs: 
          SliceExpr:
            source: 'add0.value'
            var: add0
            offset: 0
            size: 3
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'add1'
            var: add1
            offset: 0
            size: 4
# 
# func M2 as<M2>(M2 val) {
#   return val
# }
  as_36:
    returnType: 
      ConstTypeName:
        typeName: M2
        size: 36
    params:
      - 
        argName: val
        size: 36
        type: 
          ConstTypeName:
            typeName: M2
            size: 36
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 36
# 
# func M3 div<M3>(M3 lhs, M3 rhs) {
#   ret = divMod<M3>(lhs, rhs)
#   return ret.quotient
# }
  div_54:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 54
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: rhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      ret:
        FuncExpr:
          source: 'divMod<M3>(lhs, rhs)'
          name: divMod_54
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 54
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 54
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 54
        fields: 
          - quotient
# 
# func M3 ceilDiv<M3>(M3 lhs, M3 rhs) {
#   ret = ceilDivMod<M3>(lhs, rhs)
#   return ret.quotient
# }
  ceilDiv_54:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 54
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: rhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      ret:
        FuncExpr:
          source: 'ceilDivMod<M3>(lhs, rhs)'
          name: ceilDivMod_54
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 54
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 54
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 54
        fields: 
          - quotient
# 
# func M3 floorDiv<M3>(M3 lhs, M3 rhs) {
#   ret = floorDivMod<M3>(lhs, rhs)
#   return ret.quotient
# }
  floorDiv_54:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 54
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: rhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      ret:
        FuncExpr:
          source: 'floorDivMod<M3>(lhs, rhs)'
          name: floorDivMod_54
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 54
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 54
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 54
        fields: 
          - quotient
# 
# func M3 roundDiv<M3>(M3 lhs, M3 rhs) {
#   ret = roundDivMod<M3>(lhs, rhs)
#   return ret.quotient
# }
  roundDiv_54:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 54
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: rhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      ret:
        FuncExpr:
          source: 'roundDivMod<M3>(lhs, rhs)'
          name: roundDivMod_54
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 54
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 54
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 54
        fields: 
          - quotient
# 
# func T2 divMod<M3>(M3 lhs, M3 rhs) {
#   absLhs = abs<M3>(lhs)
#   absRhs = abs<M3>(rhs)
#   quorem = roundDivModLoop<M3>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   fix = isNegative[sign<M3>(rem)]
#   quo0 = fix ? decr<M3>(quo) : quo
#   rem0 = fix ? add<M3>(rem, absRhs) : rem
#   return fixSign<M3>(lhs, rhs, quo0, rem0)
# }
  divMod_54:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 108
        fields:
          quotient: 
            size: '54'
            offset: '0'
          remainder: 
            size: '54'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: rhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<M3>(lhs)'
          name: abs_54
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 54
      absRhs:
        FuncExpr:
          source: 'abs<M3>(rhs)'
          name: abs_54
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 54
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<M3>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_54
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 54
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000000000000000000000000000000'
                trytes: '999999999999999999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 54
          - 
            ValueExpr:
                value: '1'
                trits: '100000000000000000000000000000000000000000000000000000'
                trytes: 'A99999999999999999'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 54
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 54
          size: 54
          fields: 
            - remainder
      fix:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<M3>(rem)'
                name: sign_54
                args:
                - 
                  SliceExpr:
                    source: 'rem'
                    var: rem
                    offset: 0
                    size: 54
      quo0:
        CondExpr:
          source: 'fix ? decr<M3>(quo) : quo'
          if: 
            SliceExpr:
              source: 'fix'
              var: fix
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'decr<M3>(quo)'
              name: decr_54
              args:
              - 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 54
          else:
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 54
      rem0:
        CondExpr:
          source: 'fix ? add<M3>(rem, absRhs) : rem'
          if: 
            SliceExpr:
              source: 'fix'
              var: fix
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'add<M3>(rem, absRhs)'
              name: add_54
              args:
              - 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 54
              - 
                SliceExpr:
                  source: 'absRhs'
                  var: absRhs
                  offset: 0
                  size: 54
          else:
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 54
    return: 
    # fixSign<M3>(lhs, rhs, quo0, rem0)
      FuncExpr:
        source: 'fixSign<M3>(lhs, rhs, quo0, rem0)'
        name: fixSign_54
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 54
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 54
        - 
          SliceExpr:
            source: 'quo0'
            var: quo0
            offset: 0
            size: 54
        - 
          SliceExpr:
            source: 'rem0'
            var: rem0
            offset: 0
            size: 54
# 
# func T2 ceilDivMod<M3>(M3 lhs, M3 rhs) {
#   absLhs = abs<M3>(lhs)
#   absRhs = abs<M3>(rhs)
#   quorem = roundDivModLoop<M3>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   lhsSign = sign<M3>(lhs)
#   rhsSign = sign<M3>(rhs)
#   remSign = sign<M3>(rem)
#   neg = xor[isNegative[lhsSign], isNegative[rhsSign]]
#   up = and[not[neg], isPositive[remSign]]
#   down = and[neg, isNegative[remSign]]
#   none = nor[up, down]
#   quoN0 = none ? quo : null
#   quoN1 = incr<M3>(up ? quo : null)
#   quoN2 = decr<M3>(down ? quo : null)
#   quo0 = quoN0 | quoN1 | quoN2
#   remN0 = none ? rem : null
#   remN1 = sub<M3>(up ? rem : null, absRhs)
#   remN2 = add<M3>(down ? rem : null, absRhs)
#   rem0 = remN0 | remN1 | remN2
#   return fixSign<M3>(lhs, rhs, quo0, rem0)
# }
  ceilDivMod_54:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 108
        fields:
          quotient: 
            size: '54'
            offset: '0'
          remainder: 
            size: '54'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: rhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<M3>(lhs)'
          name: abs_54
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 54
      absRhs:
        FuncExpr:
          source: 'abs<M3>(rhs)'
          name: abs_54
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 54
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<M3>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_54
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 54
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000000000000000000000000000000'
                trytes: '999999999999999999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 54
          - 
            ValueExpr:
                value: '1'
                trits: '100000000000000000000000000000000000000000000000000000'
                trytes: 'A99999999999999999'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 54
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 54
          size: 54
          fields: 
            - remainder
      lhsSign:
        FuncExpr:
          source: 'sign<M3>(lhs)'
          name: sign_54
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 54
      rhsSign:
        FuncExpr:
          source: 'sign<M3>(rhs)'
          name: sign_54
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 54
      remSign:
        FuncExpr:
          source: 'sign<M3>(rem)'
          name: sign_54
          args:
          - 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 54
      neg:
        LutExpr:
          name: xor
          args: 
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'lhsSign'
                      var: lhsSign
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'rhsSign'
                      var: rhsSign
                      offset: 0
                      size: 1
      up:
        LutExpr:
          name: and
          args: 
            - 
              LutExpr:
                name: not
                args: 
                  - 
                    SliceExpr:
                      source: 'neg'
                      var: neg
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isPositive
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      down:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'neg'
                var: neg
                offset: 0
                size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      none:
        LutExpr:
          name: nor
          args: 
            - 
              SliceExpr:
                source: 'up'
                var: up
                offset: 0
                size: 1
            - 
              SliceExpr:
                source: 'down'
                var: down
                offset: 0
                size: 1
      quoN0:
        CondExpr:
          source: 'none ? quo : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 54
          else:
            NullExpr: ''
      quoN1:
        FuncExpr:
          source: 'incr<M3>(up ? quo : null)'
          name: incr_54
          args:
          - 
            CondExpr:
              source: 'up ? quo : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 54
              else:
                NullExpr: ''
      quoN2:
        FuncExpr:
          source: 'decr<M3>(down ? quo : null)'
          name: decr_54
          args:
          - 
            CondExpr:
              source: 'down ? quo : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 54
              else:
                NullExpr: ''
      quo0:
        MergeExpr:
          source: 'quoN0 | quoN1 | quoN2'
          lhs: 
            MergeExpr:
              source: 'quoN0 | quoN1'
              lhs: 
                SliceExpr:
                  source: 'quoN0'
                  var: quoN0
                  offset: 0
                  size: 54
              rhs: 
                SliceExpr:
                  source: 'quoN1'
                  var: quoN1
                  offset: 0
                  size: 54
          rhs: 
            SliceExpr:
              source: 'quoN2'
              var: quoN2
              offset: 0
              size: 54
      remN0:
        CondExpr:
          source: 'none ? rem : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 54
          else:
            NullExpr: ''
      remN1:
        FuncExpr:
          source: 'sub<M3>(up ? rem : null, absRhs)'
          name: sub_54
          args:
          - 
            CondExpr:
              source: 'up ? rem : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 54
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 54
      remN2:
        FuncExpr:
          source: 'add<M3>(down ? rem : null, absRhs)'
          name: add_54
          args:
          - 
            CondExpr:
              source: 'down ? rem : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 54
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 54
      rem0:
        MergeExpr:
          source: 'remN0 | remN1 | remN2'
          lhs: 
            MergeExpr:
              source: 'remN0 | remN1'
              lhs: 
                SliceExpr:
                  source: 'remN0'
                  var: remN0
                  offset: 0
                  size: 54
              rhs: 
                SliceExpr:
                  source: 'remN1'
                  var: remN1
                  offset: 0
                  size: 54
          rhs: 
            SliceExpr:
              source: 'remN2'
              var: remN2
              offset: 0
              size: 54
    return: 
    # fixSign<M3>(lhs, rhs, quo0, rem0)
      FuncExpr:
        source: 'fixSign<M3>(lhs, rhs, quo0, rem0)'
        name: fixSign_54
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 54
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 54
        - 
          SliceExpr:
            source: 'quo0'
            var: quo0
            offset: 0
            size: 54
        - 
          SliceExpr:
            source: 'rem0'
            var: rem0
            offset: 0
            size: 54
# 
# func T2 floorDivMod<M3>(M3 lhs, M3 rhs) {
#   absLhs = abs<M3>(lhs)
#   absRhs = abs<M3>(rhs)
#   quorem = roundDivModLoop<M3>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   lhsSign = sign<M3>(lhs)
#   rhsSign = sign<M3>(rhs)
#   remSign = sign<M3>(rem)
#   neg = xor[isNegative[lhsSign], isNegative[rhsSign]]
#   down = and[not[neg], isNegative[remSign]]
#   up = and[neg, isPositive[remSign]]
#   none = nor[up, down]
#   quoN0 = none ? quo : null
#   quoN1 = incr<M3>(up ? quo : null)
#   quoN2 = decr<M3>(down ? quo : null)
#   quo0 = quoN0 | quoN1 | quoN2
#   remN0 = none ? rem : null
#   remN1 = sub<M3>(up ? rem : null, absRhs)
#   remN2 = add<M3>(down ? rem : null, absRhs)
#   rem0 = remN0 | remN1 | remN2
#   return fixSign<M3>(lhs, rhs, quo0, rem0)
# }
  floorDivMod_54:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 108
        fields:
          quotient: 
            size: '54'
            offset: '0'
          remainder: 
            size: '54'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: rhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<M3>(lhs)'
          name: abs_54
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 54
      absRhs:
        FuncExpr:
          source: 'abs<M3>(rhs)'
          name: abs_54
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 54
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<M3>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_54
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 54
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000000000000000000000000000000'
                trytes: '999999999999999999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 54
          - 
            ValueExpr:
                value: '1'
                trits: '100000000000000000000000000000000000000000000000000000'
                trytes: 'A99999999999999999'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 54
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 54
          size: 54
          fields: 
            - remainder
      lhsSign:
        FuncExpr:
          source: 'sign<M3>(lhs)'
          name: sign_54
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 54
      rhsSign:
        FuncExpr:
          source: 'sign<M3>(rhs)'
          name: sign_54
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 54
      remSign:
        FuncExpr:
          source: 'sign<M3>(rem)'
          name: sign_54
          args:
          - 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 54
      neg:
        LutExpr:
          name: xor
          args: 
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'lhsSign'
                      var: lhsSign
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'rhsSign'
                      var: rhsSign
                      offset: 0
                      size: 1
      down:
        LutExpr:
          name: and
          args: 
            - 
              LutExpr:
                name: not
                args: 
                  - 
                    SliceExpr:
                      source: 'neg'
                      var: neg
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      up:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'neg'
                var: neg
                offset: 0
                size: 1
            - 
              LutExpr:
                name: isPositive
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      none:
        LutExpr:
          name: nor
          args: 
            - 
              SliceExpr:
                source: 'up'
                var: up
                offset: 0
                size: 1
            - 
              SliceExpr:
                source: 'down'
                var: down
                offset: 0
                size: 1
      quoN0:
        CondExpr:
          source: 'none ? quo : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 54
          else:
            NullExpr: ''
      quoN1:
        FuncExpr:
          source: 'incr<M3>(up ? quo : null)'
          name: incr_54
          args:
          - 
            CondExpr:
              source: 'up ? quo : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 54
              else:
                NullExpr: ''
      quoN2:
        FuncExpr:
          source: 'decr<M3>(down ? quo : null)'
          name: decr_54
          args:
          - 
            CondExpr:
              source: 'down ? quo : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 54
              else:
                NullExpr: ''
      quo0:
        MergeExpr:
          source: 'quoN0 | quoN1 | quoN2'
          lhs: 
            MergeExpr:
              source: 'quoN0 | quoN1'
              lhs: 
                SliceExpr:
                  source: 'quoN0'
                  var: quoN0
                  offset: 0
                  size: 54
              rhs: 
                SliceExpr:
                  source: 'quoN1'
                  var: quoN1
                  offset: 0
                  size: 54
          rhs: 
            SliceExpr:
              source: 'quoN2'
              var: quoN2
              offset: 0
              size: 54
      remN0:
        CondExpr:
          source: 'none ? rem : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 54
          else:
            NullExpr: ''
      remN1:
        FuncExpr:
          source: 'sub<M3>(up ? rem : null, absRhs)'
          name: sub_54
          args:
          - 
            CondExpr:
              source: 'up ? rem : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 54
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 54
      remN2:
        FuncExpr:
          source: 'add<M3>(down ? rem : null, absRhs)'
          name: add_54
          args:
          - 
            CondExpr:
              source: 'down ? rem : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 54
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 54
      rem0:
        MergeExpr:
          source: 'remN0 | remN1 | remN2'
          lhs: 
            MergeExpr:
              source: 'remN0 | remN1'
              lhs: 
                SliceExpr:
                  source: 'remN0'
                  var: remN0
                  offset: 0
                  size: 54
              rhs: 
                SliceExpr:
                  source: 'remN1'
                  var: remN1
                  offset: 0
                  size: 54
          rhs: 
            SliceExpr:
              source: 'remN2'
              var: remN2
              offset: 0
              size: 54
    return: 
    # fixSign<M3>(lhs, rhs, quo0, rem0)
      FuncExpr:
        source: 'fixSign<M3>(lhs, rhs, quo0, rem0)'
        name: fixSign_54
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 54
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 54
        - 
          SliceExpr:
            source: 'quo0'
            var: quo0
            offset: 0
            size: 54
        - 
          SliceExpr:
            source: 'rem0'
            var: rem0
            offset: 0
            size: 54
# 
# func T2 roundDivMod<M3>(M3 lhs, M3 rhs) {
#   absLhs = abs<M3>(lhs)
#   absRhs = abs<M3>(rhs)
#   quorem = roundDivModLoop<M3>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   return fixSign<M3>(lhs, rhs, quo, rem)
# }
  roundDivMod_54:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 108
        fields:
          quotient: 
            size: '54'
            offset: '0'
          remainder: 
            size: '54'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: rhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<M3>(lhs)'
          name: abs_54
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 54
      absRhs:
        FuncExpr:
          source: 'abs<M3>(rhs)'
          name: abs_54
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 54
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<M3>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_54
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 54
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000000000000000000000000000000'
                trytes: '999999999999999999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 54
          - 
            ValueExpr:
                value: '1'
                trits: '100000000000000000000000000000000000000000000000000000'
                trytes: 'A99999999999999999'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 54
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 54
          size: 54
          fields: 
            - remainder
    return: 
    # fixSign<M3>(lhs, rhs, quo, rem)
      FuncExpr:
        source: 'fixSign<M3>(lhs, rhs, quo, rem)'
        name: fixSign_54
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 54
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 54
        - 
          SliceExpr:
            source: 'quo'
            var: quo
            offset: 0
            size: 54
        - 
          SliceExpr:
            source: 'rem'
            var: rem
            offset: 0
            size: 54
# 
# func T2 roundDivModLoop<M3>(M3 quo, M3 rem, M3 div, M3 shf) {
#   quorem = roundDivModPass<M3>(quo, rem, div)
#   newShf = rshift<M3>(shf)
#   zero = isZero[sign<M3>(newShf)]
#   quo1 = quorem.quotient
#   rem1 = quorem.remainder
#   return zero ? quorem : roundDivModLoop<M3>(quo1, rem1, div, newShf)
# }
  roundDivModLoop_54:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 108
        fields:
          quotient: 
            size: '54'
            offset: '0'
          remainder: 
            size: '54'
            offset: '54'
    params:
      - 
        argName: quo
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: rem
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: div
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: shf
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      quorem:
        FuncExpr:
          source: 'roundDivModPass<M3>(quo, rem, div)'
          name: roundDivModPass_54
          args:
          - 
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 54
          - 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 54
          - 
            SliceExpr:
              source: 'div'
              var: div
              offset: 0
              size: 54
      newShf:
        FuncExpr:
          source: 'rshift<M3>(shf)'
          name: rshift_54
          args:
          - 
            SliceExpr:
              source: 'shf'
              var: shf
              offset: 0
              size: 54
      zero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<M3>(newShf)'
                name: sign_54
                args:
                - 
                  SliceExpr:
                    source: 'newShf'
                    var: newShf
                    offset: 0
                    size: 54
      quo1:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 54
          fields: 
            - quotient
      rem1:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 54
          size: 54
          fields: 
            - remainder
    return: 
    # zero ? quorem : roundDivModLoop<M3>(quo1, rem1, div, newShf)
      CondExpr:
        source: 'zero ? quorem : roundDivModLoop<M3>(quo1, rem1, div, newShf)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'quorem'
            var: quorem
            offset: 0
            size: 108
        else:
          FuncExpr:
            source: 'roundDivModLoop<M3>(quo1, rem1, div, newShf)'
            name: roundDivModLoop_54
            args:
            - 
              SliceExpr:
                source: 'quo1'
                var: quo1
                offset: 0
                size: 54
            - 
              SliceExpr:
                source: 'rem1'
                var: rem1
                offset: 0
                size: 54
            - 
              SliceExpr:
                source: 'div'
                var: div
                offset: 0
                size: 54
            - 
              SliceExpr:
                source: 'newShf'
                var: newShf
                offset: 0
                size: 54
# 
# func T2 roundDivModPass<M3>(M3 quo, M3 rem, M3 div) {
#   quorem = as<T2>(rshift<T2>(quo & rem))
#   quo0 = quorem.quotient
#   rem0 = quorem.remainder
#   remSign = sign<M3>(rem0)
#   quoSign = sign<M3>(quo0)
#   low = sub<M3>(rem0, div)
#   neg1 = neg<M3>(low)
#   cmp1 = cmp<M3>(neg1, rem0)
#   posRem = isPositive[remSign]
#   posQuo = isPositive[quoSign]
#   test1 = and[posRem, or[isLess[cmp1], and[isZero[cmp1], posQuo]]]
#   high = add<M3>(rem0, div)
#   neg2 = neg<M3>(high)
#   cmp2 = cmp<M3>(neg2, rem0)
#   negRem = isNegative[remSign]
#   negQuo = isNegative[quoSign]
#   test2 = and[negRem, or[isGreater[cmp2], and[isEqual[cmp2], negQuo]]]
#   quorem1 = T2{
#     quotient = incr<M3>(quo0)
#     remainder = low
#   }
#   quorem2 = T2{
#     quotient = decr<M3>(quo0)
#     remainder = high
#   }
#   return test1 ? quorem1 : test2 ? quorem2 : quorem
# }
  roundDivModPass_54:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 108
        fields:
          quotient: 
            size: '54'
            offset: '0'
          remainder: 
            size: '54'
            offset: '54'
    params:
      - 
        argName: quo
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: rem
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: div
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      quorem:
        FuncExpr:
          source: 'as<T2>(rshift<T2>(quo & rem))'
          name: as_108
          args:
          - 
            FuncExpr:
              source: 'rshift<T2>(quo & rem)'
              name: rshift_108
              args:
              - 
                ConcatExpr:
                  source: 'quo & rem'
                  lhs: 
                    SliceExpr:
                      source: 'quo'
                      var: quo
                      offset: 0
                      size: 54
                  rhs: 
                    SliceExpr:
                      source: 'rem'
                      var: rem
                      offset: 0
                      size: 54
      quo0:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 54
          fields: 
            - quotient
      rem0:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 54
          size: 54
          fields: 
            - remainder
      remSign:
        FuncExpr:
          source: 'sign<M3>(rem0)'
          name: sign_54
          args:
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 54
      quoSign:
        FuncExpr:
          source: 'sign<M3>(quo0)'
          name: sign_54
          args:
          - 
            SliceExpr:
              source: 'quo0'
              var: quo0
              offset: 0
              size: 54
      low:
        FuncExpr:
          source: 'sub<M3>(rem0, div)'
          name: sub_54
          args:
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 54
          - 
            SliceExpr:
              source: 'div'
              var: div
              offset: 0
              size: 54
      neg1:
        FuncExpr:
          source: 'neg<M3>(low)'
          name: neg_54
          args:
          - 
            SliceExpr:
              source: 'low'
              var: low
              offset: 0
              size: 54
      cmp1:
        FuncExpr:
          source: 'cmp<M3>(neg1, rem0)'
          name: cmp_54
          args:
          - 
            SliceExpr:
              source: 'neg1'
              var: neg1
              offset: 0
              size: 54
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 54
      posRem:
        LutExpr:
          name: isPositive
          args: 
            - 
              SliceExpr:
                source: 'remSign'
                var: remSign
                offset: 0
                size: 1
      posQuo:
        LutExpr:
          name: isPositive
          args: 
            - 
              SliceExpr:
                source: 'quoSign'
                var: quoSign
                offset: 0
                size: 1
      test1:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'posRem'
                var: posRem
                offset: 0
                size: 1
            - 
              LutExpr:
                name: or
                args: 
                  - 
                    LutExpr:
                      name: isLess
                      args: 
                        - 
                          SliceExpr:
                            source: 'cmp1'
                            var: cmp1
                            offset: 0
                            size: 1
                  - 
                    LutExpr:
                      name: and
                      args: 
                        - 
                          LutExpr:
                            name: isZero
                            args: 
                              - 
                                SliceExpr:
                                  source: 'cmp1'
                                  var: cmp1
                                  offset: 0
                                  size: 1
                        - 
                          SliceExpr:
                            source: 'posQuo'
                            var: posQuo
                            offset: 0
                            size: 1
      high:
        FuncExpr:
          source: 'add<M3>(rem0, div)'
          name: add_54
          args:
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 54
          - 
            SliceExpr:
              source: 'div'
              var: div
              offset: 0
              size: 54
      neg2:
        FuncExpr:
          source: 'neg<M3>(high)'
          name: neg_54
          args:
          - 
            SliceExpr:
              source: 'high'
              var: high
              offset: 0
              size: 54
      cmp2:
        FuncExpr:
          source: 'cmp<M3>(neg2, rem0)'
          name: cmp_54
          args:
          - 
            SliceExpr:
              source: 'neg2'
              var: neg2
              offset: 0
              size: 54
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 54
      negRem:
        LutExpr:
          name: isNegative
          args: 
            - 
              SliceExpr:
                source: 'remSign'
                var: remSign
                offset: 0
                size: 1
      negQuo:
        LutExpr:
          name: isNegative
          args: 
            - 
              SliceExpr:
                source: 'quoSign'
                var: quoSign
                offset: 0
                size: 1
      test2:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'negRem'
                var: negRem
                offset: 0
                size: 1
            - 
              LutExpr:
                name: or
                args: 
                  - 
                    LutExpr:
                      name: isGreater
                      args: 
                        - 
                          SliceExpr:
                            source: 'cmp2'
                            var: cmp2
                            offset: 0
                            size: 1
                  - 
                    LutExpr:
                      name: and
                      args: 
                        - 
                          LutExpr:
                            name: isEqual
                            args: 
                              - 
                                SliceExpr:
                                  source: 'cmp2'
                                  var: cmp2
                                  offset: 0
                                  size: 1
                        - 
                          SliceExpr:
                            source: 'negQuo'
                            var: negQuo
                            offset: 0
                            size: 1
      quorem1:
        TypeExpr:
          source: 'T2{ /   quotient = incr<M3>(quo0) /   remainder = low / }'
          type: 
            ConstTypeName:
              typeName: T2
              size: 108
              fields:
                quotient: 
                  size: '54'
                  offset: '0'
                remainder: 
                  size: '54'
                  offset: '54'
          fieldValues: 
            quotient:
              FuncExpr:
                source: 'incr<M3>(quo0)'
                name: incr_54
                args:
                - 
                  SliceExpr:
                    source: 'quo0'
                    var: quo0
                    offset: 0
                    size: 54
            remainder:
              SliceExpr:
                source: 'low'
                var: low
                offset: 0
                size: 54
      quorem2:
        TypeExpr:
          source: 'T2{ /   quotient = decr<M3>(quo0) /   remainder = high / }'
          type: 
            ConstTypeName:
              typeName: T2
              size: 108
              fields:
                quotient: 
                  size: '54'
                  offset: '0'
                remainder: 
                  size: '54'
                  offset: '54'
          fieldValues: 
            quotient:
              FuncExpr:
                source: 'decr<M3>(quo0)'
                name: decr_54
                args:
                - 
                  SliceExpr:
                    source: 'quo0'
                    var: quo0
                    offset: 0
                    size: 54
            remainder:
              SliceExpr:
                source: 'high'
                var: high
                offset: 0
                size: 54
    return: 
    # test1 ? quorem1 : test2 ? quorem2 : quorem
      CondExpr:
        source: 'test1 ? quorem1 : test2 ? quorem2 : quorem'
        if: 
          SliceExpr:
            source: 'test1'
            var: test1
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'quorem1'
            var: quorem1
            offset: 0
            size: 108
        else:
          CondExpr:
            source: 'test2 ? quorem2 : quorem'
            if: 
              SliceExpr:
                source: 'test2'
                var: test2
                offset: 0
                size: 1
            then: 
              SliceExpr:
                source: 'quorem2'
                var: quorem2
                offset: 0
                size: 108
            else:
              SliceExpr:
                source: 'quorem'
                var: quorem
                offset: 0
                size: 108
# 
# func T2 fixSign<M3>(M3 lhs, M3 rhs, M3 quo, M3 rem) {
#   lhsSign = sign<M3>(lhs)
#   rhsSign = sign<M3>(rhs)
#   negRem = isNegative[lhsSign]
#   negQuo = xor[negRem, isNegative[rhsSign]]
#   quo1 = negQuo ? neg<M3>(quo) : quo
#   rem1 = negRem ? neg<M3>(rem) : rem
#   return T2{
#     quotient = quo1
#     remainder = rem1
#   }
# }
  fixSign_54:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 108
        fields:
          quotient: 
            size: '54'
            offset: '0'
          remainder: 
            size: '54'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: rhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: quo
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: rem
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      lhsSign:
        FuncExpr:
          source: 'sign<M3>(lhs)'
          name: sign_54
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 54
      rhsSign:
        FuncExpr:
          source: 'sign<M3>(rhs)'
          name: sign_54
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 54
      negRem:
        LutExpr:
          name: isNegative
          args: 
            - 
              SliceExpr:
                source: 'lhsSign'
                var: lhsSign
                offset: 0
                size: 1
      negQuo:
        LutExpr:
          name: xor
          args: 
            - 
              SliceExpr:
                source: 'negRem'
                var: negRem
                offset: 0
                size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'rhsSign'
                      var: rhsSign
                      offset: 0
                      size: 1
      quo1:
        CondExpr:
          source: 'negQuo ? neg<M3>(quo) : quo'
          if: 
            SliceExpr:
              source: 'negQuo'
              var: negQuo
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'neg<M3>(quo)'
              name: neg_54
              args:
              - 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 54
          else:
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 54
      rem1:
        CondExpr:
          source: 'negRem ? neg<M3>(rem) : rem'
          if: 
            SliceExpr:
              source: 'negRem'
              var: negRem
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'neg<M3>(rem)'
              name: neg_54
              args:
              - 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 54
          else:
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 54
    return: 
    # T2{
    #   quotient = quo1
    #   remainder = rem1
    # }
      TypeExpr:
        source: 'T2{ /   quotient = quo1 /   remainder = rem1 / }'
        type: 
          ConstTypeName:
            typeName: T2
            size: 108
            fields:
              quotient: 
                size: '54'
                offset: '0'
              remainder: 
                size: '54'
                offset: '54'
        fieldValues: 
          quotient:
            SliceExpr:
              source: 'quo1'
              var: quo1
              offset: 0
              size: 54
          remainder:
            SliceExpr:
              source: 'rem1'
              var: rem1
              offset: 0
              size: 54
# 
# func M3 abs<M3>(M3 val) {
#   return isNegative[sign<M3>(val)] ? neg<M3>(val) : val
# }
  abs_54:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 54
    params:
      - 
        argName: val
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    return: 
    # isNegative[sign<M3>(val)] ? neg<M3>(val) : val
      CondExpr:
        source: 'isNegative[sign<M3>(val)] ? neg<M3>(val) : val'
        if: 
          LutExpr:
            name: isNegative
            args: 
              - 
                FuncExpr:
                  source: 'sign<M3>(val)'
                  name: sign_54
                  args:
                  - 
                    SliceExpr:
                      source: 'val'
                      var: val
                      offset: 0
                      size: 54
        then: 
          FuncExpr:
            source: 'neg<M3>(val)'
            name: neg_54
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 54
        else:
          SliceExpr:
            source: 'val'
            var: val
            offset: 0
            size: 54
# 
# func Trit sign<M3>(M3 val) {
#   val0 = sign<A>(val[0 : A])
#   val1 = sign<B>(val[A : B])
#   return sign[val0, val1, 0]
# }
  sign_54:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: val
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      val0:
        FuncExpr:
          source: 'sign<A>(val[0 : A])'
          name: sign_27
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 27
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 27
      val1:
        FuncExpr:
          source: 'sign<B>(val[A : B])'
          name: sign_27
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 27
              size: 27
              start:
                ConstTypeName:
                  typeName: A
                  size: 27
              end:
                ConstTypeName:
                  typeName: B
                  size: 27
    return: 
    # sign[val0, val1, 0]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
# 
# func M3 neg<M3>(M3 val) {
#   val0 = neg<A>(val[0 : A])
#   val1 = neg<B>(val[A : B])
#   return val0 & val1
# }
  neg_54:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 54
    params:
      - 
        argName: val
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      val0:
        FuncExpr:
          source: 'neg<A>(val[0 : A])'
          name: neg_27
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 27
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 27
      val1:
        FuncExpr:
          source: 'neg<B>(val[A : B])'
          name: neg_27
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 27
              size: 27
              start:
                ConstTypeName:
                  typeName: A
                  size: 27
              end:
                ConstTypeName:
                  typeName: B
                  size: 27
    return: 
    # val0 & val1
      ConcatExpr:
        source: 'val0 & val1'
        lhs: 
          SliceExpr:
            source: 'val0'
            var: val0
            offset: 0
            size: 27
        rhs: 
          SliceExpr:
            source: 'val1'
            var: val1
            offset: 0
            size: 27
# 
# func A neg<A>(A val) {
#   val0 = neg<A>(val[0 : A])
#   val1 = neg<B>(val[A : B])
#   val2 = neg<C>(val[A + B : C])
#   return val0 & val1 & val2
# }
  neg_27:
    returnType: 
      ConstTypeName:
        typeName: A
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: A
            size: 27
    assigns: 
      val0:
        FuncExpr:
          source: 'neg<A>(val[0 : A])'
          name: neg_9
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
      val1:
        FuncExpr:
          source: 'neg<B>(val[A : B])'
          name: neg_9
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
      val2:
        FuncExpr:
          source: 'neg<C>(val[A + B : C])'
          name: neg_9
          args:
          - 
            SliceExpr:
              source: 'val[A + B : C]'
              var: val
              offset: 18
              size: 9
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 9
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 9
              end:
                ConstTypeName:
                  typeName: C
                  size: 9
    return: 
    # val0 & val1 & val2
      ConcatExpr:
        source: 'val0 & val1 & val2'
        lhs: 
          ConcatExpr:
            source: 'val0 & val1'
            lhs: 
              SliceExpr:
                source: 'val0'
                var: val0
                offset: 0
                size: 9
            rhs: 
              SliceExpr:
                source: 'val1'
                var: val1
                offset: 0
                size: 9
        rhs: 
          SliceExpr:
            source: 'val2'
            var: val2
            offset: 0
            size: 9
# 
# func T2 as<T2>(T2 val) {
#   return val
# }
  as_108:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 108
        fields:
          quotient: 
            size: '54'
            offset: '0'
          remainder: 
            size: '54'
            offset: '54'
    params:
      - 
        argName: val
        size: 108
        type: 
          ConstTypeName:
            typeName: T2
            size: 108
            fields:
              quotient: 
                size: '54'
                offset: '0'
              remainder: 
                size: '54'
                offset: '54'
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 108
# 
# func T2 rshift<T2>(T2 val) {
#   return 0 & val[0 : T2 - 1]
# }
  rshift_108:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 108
        fields:
          quotient: 
            size: '54'
            offset: '0'
          remainder: 
            size: '54'
            offset: '54'
    params:
      - 
        argName: val
        size: 108
        type: 
          ConstTypeName:
            typeName: T2
            size: 108
            fields:
              quotient: 
                size: '54'
                offset: '0'
              remainder: 
                size: '54'
                offset: '54'
    return: 
    # 0 & val[0 : T2 - 1]
      ConcatExpr:
        source: '0 & val[0 : T2 - 1]'
        lhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        rhs: 
          SliceExpr:
            source: 'val[0 : T2 - 1]'
            var: val
            offset: 0
            size: 107
            start:
              ConstNumber:
                value: 0
            end:
              ConstExpr:
                operator: '-'
                lhs: 
                  ConstTypeName:
                    typeName: T2
                    size: 108
                    fields:
                      quotient: 
                        size: '54'
                        offset: '0'
                      remainder: 
                        size: '54'
                        offset: '54'
                rhs: 
                  ConstNumber:
                    value: 1
# 
# func M3 sub<M3>(M3 lhs, M3 rhs) {
#   sum = fullAdd<M3>(lhs, neg<M3>(rhs), 0)
#   return sum.value
# }
  sub_54:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 54
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: rhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<M3>(lhs, neg<M3>(rhs), 0)'
          name: fullAdd_54
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 54
          - 
            FuncExpr:
              source: 'neg<M3>(rhs)'
              name: neg_54
              args:
              - 
                SliceExpr:
                  source: 'rhs'
                  var: rhs
                  offset: 0
                  size: 54
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
    return: 
    # sum.value
      SliceExpr:
        source: 'sum.value'
        var: sum
        offset: 0
        size: 54
        fields: 
          - value
# 
# func TCarry fullAdd<M3>(M3 lhs, M3 rhs, Carry carry) {
#   add0 = fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)
#   add1 = fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)
#   return add0.value & add1
# }
  fullAdd_54:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 55
        fields:
          value: 
            size: '54'
            offset: '0'
          carry: 
            size: '1'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: rhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)'
          name: fullAdd_27
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 27
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 27
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 27
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 27
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)'
          name: fullAdd_27
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 27
              size: 27
              start:
                ConstTypeName:
                  typeName: A
                  size: 27
              end:
                ConstTypeName:
                  typeName: B
                  size: 27
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 27
              size: 27
              start:
                ConstTypeName:
                  typeName: A
                  size: 27
              end:
                ConstTypeName:
                  typeName: B
                  size: 27
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 27
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1
      ConcatExpr:
        source: 'add0.value & add1'
        lhs: 
          SliceExpr:
            source: 'add0.value'
            var: add0
            offset: 0
            size: 27
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'add1'
            var: add1
            offset: 0
            size: 28
# 
# func TCarry fullAdd<A>(A lhs, A rhs, Carry carry) {
#   add0 = fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)
#   add1 = fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)
#   add2 = fullAdd<C>(lhs[A + B : C], rhs[A + B : C], add1.carry)
#   return add0.value & add1.value & add2
# }
  fullAdd_27:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 28
        fields:
          value: 
            size: '27'
            offset: '0'
          carry: 
            size: '1'
            offset: '27'
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: A
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: A
            size: 27
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)'
          name: fullAdd_9
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)'
          name: fullAdd_9
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 9
              size: 1
              fields: 
                - carry
      add2:
        FuncExpr:
          source: 'fullAdd<C>(lhs[A + B : C], rhs[A + B : C], add1.carry)'
          name: fullAdd_9
          args:
          - 
            SliceExpr:
              source: 'lhs[A + B : C]'
              var: lhs
              offset: 18
              size: 9
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 9
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 9
              end:
                ConstTypeName:
                  typeName: C
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[A + B : C]'
              var: rhs
              offset: 18
              size: 9
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 9
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 9
              end:
                ConstTypeName:
                  typeName: C
                  size: 9
          - 
            SliceExpr:
              source: 'add1.carry'
              var: add1
              offset: 9
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1.value & add2
      ConcatExpr:
        source: 'add0.value & add1.value & add2'
        lhs: 
          ConcatExpr:
            source: 'add0.value & add1.value'
            lhs: 
              SliceExpr:
                source: 'add0.value'
                var: add0
                offset: 0
                size: 9
                fields: 
                  - value
            rhs: 
              SliceExpr:
                source: 'add1.value'
                var: add1
                offset: 0
                size: 9
                fields: 
                  - value
        rhs: 
          SliceExpr:
            source: 'add2'
            var: add2
            offset: 0
            size: 10
# 
# func Trit cmp<M3>(M3 lhs, M3 rhs) {
#   val0 = cmp<A>(lhs[0 : A], rhs[0 : A])
#   val1 = cmp<B>(lhs[A : B], rhs[A : B])
#   return sign[val0, val1, 0]
# }
  cmp_54:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: rhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      val0:
        FuncExpr:
          source: 'cmp<A>(lhs[0 : A], rhs[0 : A])'
          name: cmp_27
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 27
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 27
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 27
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 27
      val1:
        FuncExpr:
          source: 'cmp<B>(lhs[A : B], rhs[A : B])'
          name: cmp_27
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 27
              size: 27
              start:
                ConstTypeName:
                  typeName: A
                  size: 27
              end:
                ConstTypeName:
                  typeName: B
                  size: 27
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 27
              size: 27
              start:
                ConstTypeName:
                  typeName: A
                  size: 27
              end:
                ConstTypeName:
                  typeName: B
                  size: 27
    return: 
    # sign[val0, val1, 0]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
# 
# func M3 add<M3>(M3 lhs, M3 rhs) {
#   sum = fullAdd<M3>(lhs, rhs, 0)
#   return sum.value
# }
  add_54:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 54
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: rhs
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<M3>(lhs, rhs, 0)'
          name: fullAdd_54
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 54
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 54
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
    return: 
    # sum.value
      SliceExpr:
        source: 'sum.value'
        var: sum
        offset: 0
        size: 54
        fields: 
          - value
# 
# func M3 incr<M3>(M3 val) {
#   halfSum = halfAdd<M3>(val, 1)
#   return halfSum.value
# }
  incr_54:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 54
    params:
      - 
        argName: val
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      halfSum:
        FuncExpr:
          source: 'halfAdd<M3>(val, 1)'
          name: halfAdd_54
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 54
          - 
            ValueExpr:
                value: '1'
                trits: '1'
                trytes: 'A'
    return: 
    # halfSum.value
      SliceExpr:
        source: 'halfSum.value'
        var: halfSum
        offset: 0
        size: 54
        fields: 
          - value
# 
# func TCarry halfAdd<M3>(M3 val, Carry carry) {
#   add0 = halfAdd<A>(val[0 : A], carry)
#   add1 = halfAdd<B>(val[A : B], add0.carry)
#   return add0.value & add1
# }
  halfAdd_54:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 55
        fields:
          value: 
            size: '54'
            offset: '0'
          carry: 
            size: '1'
            offset: '54'
    params:
      - 
        argName: val
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'halfAdd<A>(val[0 : A], carry)'
          name: halfAdd_27
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 27
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 27
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'halfAdd<B>(val[A : B], add0.carry)'
          name: halfAdd_27
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 27
              size: 27
              start:
                ConstTypeName:
                  typeName: A
                  size: 27
              end:
                ConstTypeName:
                  typeName: B
                  size: 27
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 27
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1
      ConcatExpr:
        source: 'add0.value & add1'
        lhs: 
          SliceExpr:
            source: 'add0.value'
            var: add0
            offset: 0
            size: 27
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'add1'
            var: add1
            offset: 0
            size: 28
# 
# func M3 decr<M3>(M3 val) {
#   halfSum = halfAdd<M3>(val, -)
#   return halfSum.value
# }
  decr_54:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 54
    params:
      - 
        argName: val
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    assigns: 
      halfSum:
        FuncExpr:
          source: 'halfAdd<M3>(val, -)'
          name: halfAdd_54
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 54
          - 
            ValueExpr:
                value: '-'
                trits: '-'
                trytes: 'Z'
    return: 
    # halfSum.value
      SliceExpr:
        source: 'halfSum.value'
        var: halfSum
        offset: 0
        size: 54
        fields: 
          - value
# 
# func M3 rshift<M3>(M3 val) {
#   return 0 & val[0 : M3 - 1]
# }
  rshift_54:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 54
    params:
      - 
        argName: val
        size: 54
        type: 
          ConstTypeName:
            typeName: M3
            size: 54
    return: 
    # 0 & val[0 : M3 - 1]
      ConcatExpr:
        source: '0 & val[0 : M3 - 1]'
        lhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        rhs: 
          SliceExpr:
            source: 'val[0 : M3 - 1]'
            var: val
            offset: 0
            size: 53
            start:
              ConstNumber:
                value: 0
            end:
              ConstExpr:
                operator: '-'
                lhs: 
                  ConstTypeName:
                    typeName: M3
                    size: 54
                rhs: 
                  ConstNumber:
                    value: 1
# 
# func Tryte2 sub<Tryte2>(Tryte2 lhs, Tryte2 rhs) {
#   sum = fullAdd<Tryte2>(lhs, neg<Tryte2>(rhs), 0)
#   return sum.value
# }
  sub_6:
    returnType: 
      ConstTypeName:
        typeName: Tryte2
        size: 6
    params:
      - 
        argName: lhs
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
      - 
        argName: rhs
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<Tryte2>(lhs, neg<Tryte2>(rhs), 0)'
          name: fullAdd_6
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 6
          - 
            FuncExpr:
              source: 'neg<Tryte2>(rhs)'
              name: neg_6
              args:
              - 
                SliceExpr:
                  source: 'rhs'
                  var: rhs
                  offset: 0
                  size: 6
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
    return: 
    # sum.value
      SliceExpr:
        source: 'sum.value'
        var: sum
        offset: 0
        size: 6
        fields: 
          - value
# 
# func Tryte2 neg<Tryte2>(Tryte2 val) {
#   val0 = neg<A>(val[0 : A])
#   val1 = neg<B>(val[A : B])
#   return val0 & val1
# }
  neg_6:
    returnType: 
      ConstTypeName:
        typeName: Tryte2
        size: 6
    params:
      - 
        argName: val
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
    assigns: 
      val0:
        FuncExpr:
          source: 'neg<A>(val[0 : A])'
          name: neg_3
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
      val1:
        FuncExpr:
          source: 'neg<B>(val[A : B])'
          name: neg_3
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
    return: 
    # val0 & val1
      ConcatExpr:
        source: 'val0 & val1'
        lhs: 
          SliceExpr:
            source: 'val0'
            var: val0
            offset: 0
            size: 3
        rhs: 
          SliceExpr:
            source: 'val1'
            var: val1
            offset: 0
            size: 3
# 
# func TinyFloat floatAdd<TinyFloat>(TinyFloat lhs, TinyFloat rhs) {
#   smaller = isLess[cmp<Tryte>(lhs.exponent, rhs.exponent)]
#   lhs0 = smaller ? rhs : lhs
#   rhs0 = smaller ? lhs : rhs
#   return floatAddCheckMantissa<TinyFloat>(lhs0, rhs0)
# }
  floatAdd_12:
    returnType: 
      ConstTypeName:
        typeName: TinyFloat
        size: 12
        fields:
          mantissa: 
            size: '9'
            offset: '0'
          exponent: 
            size: '3'
            offset: '9'
    params:
      - 
        argName: lhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
      - 
        argName: rhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
    assigns: 
      smaller:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tryte>(lhs.exponent, rhs.exponent)'
                name: cmp_3
                args:
                - 
                  SliceExpr:
                    source: 'lhs.exponent'
                    var: lhs
                    offset: 9
                    size: 3
                    fields: 
                      - exponent
                - 
                  SliceExpr:
                    source: 'rhs.exponent'
                    var: rhs
                    offset: 9
                    size: 3
                    fields: 
                      - exponent
      lhs0:
        CondExpr:
          source: 'smaller ? rhs : lhs'
          if: 
            SliceExpr:
              source: 'smaller'
              var: smaller
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 12
          else:
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 12
      rhs0:
        CondExpr:
          source: 'smaller ? lhs : rhs'
          if: 
            SliceExpr:
              source: 'smaller'
              var: smaller
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 12
          else:
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 12
    return: 
    # floatAddCheckMantissa<TinyFloat>(lhs0, rhs0)
      FuncExpr:
        source: 'floatAddCheckMantissa<TinyFloat>(lhs0, rhs0)'
        name: floatAddCheckMantissa_12
        args:
        - 
          SliceExpr:
            source: 'lhs0'
            var: lhs0
            offset: 0
            size: 12
        - 
          SliceExpr:
            source: 'rhs0'
            var: rhs0
            offset: 0
            size: 12
# 
# func TinyFloat floatAddCheckMantissa<TinyFloat>(TinyFloat lhs, TinyFloat rhs) {
#   zero = isZero[sign<Tiny>(rhs.mantissa)]
#   return zero ? lhs : floatAddShiftMantissa<TinyFloat>(lhs, rhs)
# }
  floatAddCheckMantissa_12:
    returnType: 
      ConstTypeName:
        typeName: TinyFloat
        size: 12
        fields:
          mantissa: 
            size: '9'
            offset: '0'
          exponent: 
            size: '3'
            offset: '9'
    params:
      - 
        argName: lhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
      - 
        argName: rhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
    assigns: 
      zero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(rhs.mantissa)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'rhs.mantissa'
                    var: rhs
                    offset: 0
                    size: 9
                    fields: 
                      - mantissa
    return: 
    # zero ? lhs : floatAddShiftMantissa<TinyFloat>(lhs, rhs)
      CondExpr:
        source: 'zero ? lhs : floatAddShiftMantissa<TinyFloat>(lhs, rhs)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 12
        else:
          FuncExpr:
            source: 'floatAddShiftMantissa<TinyFloat>(lhs, rhs)'
            name: floatAddShiftMantissa_12
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 12
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 12
# 
# func TinyFloat floatAddShiftMantissa<TinyFloat>(TinyFloat lhs, TinyFloat rhs) {
#   addValues = equal<Tryte>(lhs.exponent, rhs.exponent)
#   return addValues ? floatAddMantissas<TinyFloat>(lhs, rhs) : floatAddDoShiftMantissa<TinyFloat>(lhs, rhs)
# }
  floatAddShiftMantissa_12:
    returnType: 
      ConstTypeName:
        typeName: TinyFloat
        size: 12
        fields:
          mantissa: 
            size: '9'
            offset: '0'
          exponent: 
            size: '3'
            offset: '9'
    params:
      - 
        argName: lhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
      - 
        argName: rhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
    assigns: 
      addValues:
        FuncExpr:
          source: 'equal<Tryte>(lhs.exponent, rhs.exponent)'
          name: equal_3
          args:
          - 
            SliceExpr:
              source: 'lhs.exponent'
              var: lhs
              offset: 9
              size: 3
              fields: 
                - exponent
          - 
            SliceExpr:
              source: 'rhs.exponent'
              var: rhs
              offset: 9
              size: 3
              fields: 
                - exponent
    return: 
    # addValues ? floatAddMantissas<TinyFloat>(lhs, rhs) : floatAddDoShiftMantissa<TinyFloat>(lhs, rhs)
      CondExpr:
        source: 'addValues ? floatAddMantissas<TinyFloat>(lhs, rhs) : floatAddDoShiftMantissa<TinyFloat>(lhs, rhs)'
        if: 
          SliceExpr:
            source: 'addValues'
            var: addValues
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'floatAddMantissas<TinyFloat>(lhs, rhs)'
            name: floatAddMantissas_12
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 12
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 12
        else:
          FuncExpr:
            source: 'floatAddDoShiftMantissa<TinyFloat>(lhs, rhs)'
            name: floatAddDoShiftMantissa_12
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 12
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 12
# 
# func TinyFloat floatAddDoShiftMantissa<TinyFloat>(TinyFloat lhs, TinyFloat rhs) {
#   shifted = TinyFloat{
#     mantissa = lshift<Tiny>(rhs.mantissa)
#     exponent = incr<Tryte>(rhs.exponent)
#   }
#   return floatAddCheckMantissa<TinyFloat>(lhs, shifted)
# }
  floatAddDoShiftMantissa_12:
    returnType: 
      ConstTypeName:
        typeName: TinyFloat
        size: 12
        fields:
          mantissa: 
            size: '9'
            offset: '0'
          exponent: 
            size: '3'
            offset: '9'
    params:
      - 
        argName: lhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
      - 
        argName: rhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
    assigns: 
      shifted:
        TypeExpr:
          source: 'TinyFloat{ /   mantissa = lshift<Tiny>(rhs.mantissa) /   exponent = incr<Tryte>(rhs.exponent) / }'
          type: 
            ConstTypeName:
              typeName: TinyFloat
              size: 12
              fields:
                mantissa: 
                  size: '9'
                  offset: '0'
                exponent: 
                  size: '3'
                  offset: '9'
          fieldValues: 
            mantissa:
              FuncExpr:
                source: 'lshift<Tiny>(rhs.mantissa)'
                name: lshift_9
                args:
                - 
                  SliceExpr:
                    source: 'rhs.mantissa'
                    var: rhs
                    offset: 0
                    size: 9
                    fields: 
                      - mantissa
            exponent:
              FuncExpr:
                source: 'incr<Tryte>(rhs.exponent)'
                name: incr_3
                args:
                - 
                  SliceExpr:
                    source: 'rhs.exponent'
                    var: rhs
                    offset: 9
                    size: 3
                    fields: 
                      - exponent
    return: 
    # floatAddCheckMantissa<TinyFloat>(lhs, shifted)
      FuncExpr:
        source: 'floatAddCheckMantissa<TinyFloat>(lhs, shifted)'
        name: floatAddCheckMantissa_12
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 12
        - 
          SliceExpr:
            source: 'shifted'
            var: shifted
            offset: 0
            size: 12
# 
# func TinyFloat floatAddMantissas<TinyFloat>(TinyFloat lhs, TinyFloat rhs) {
#   sum = fullAdd<Tiny>(lhs.mantissa, rhs.mantissa, 0)
#   carry = notZero[sum[Tiny]]
#   ret0 = TinyFloat{
#     mantissa = carry ? sum[1 : Tiny] : null
#     exponent = incr<Tryte>(carry ? lhs.exponent : null)
#   }
#   val = TinyFloat{
#     mantissa = not[carry] ? sum[0 : Tiny] : null
#     exponent = not[carry] ? lhs.exponent : null
#   }
#   zero = isZero[sign<Tiny>(val.mantissa)]
#   return ret0 | (zero ? 0 : floatAddNormalize<TinyFloat>(val))
# }
  floatAddMantissas_12:
    returnType: 
      ConstTypeName:
        typeName: TinyFloat
        size: 12
        fields:
          mantissa: 
            size: '9'
            offset: '0'
          exponent: 
            size: '3'
            offset: '9'
    params:
      - 
        argName: lhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
      - 
        argName: rhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<Tiny>(lhs.mantissa, rhs.mantissa, 0)'
          name: fullAdd_9
          args:
          - 
            SliceExpr:
              source: 'lhs.mantissa'
              var: lhs
              offset: 0
              size: 9
              fields: 
                - mantissa
          - 
            SliceExpr:
              source: 'rhs.mantissa'
              var: rhs
              offset: 0
              size: 9
              fields: 
                - mantissa
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      carry:
        LutExpr:
          name: notZero
          args: 
            - 
              SliceExpr:
                source: 'sum[Tiny]'
                var: sum
                offset: 9
                size: 1
                start:
                  ConstTypeName:
                    typeName: Tiny
                    size: 9
      ret0:
        TypeExpr:
          source: 'TinyFloat{ /   mantissa = carry ? sum[1 : Tiny] : null /   exponent = incr<Tryte>(carry ? lhs.exponent : null) / }'
          type: 
            ConstTypeName:
              typeName: TinyFloat
              size: 12
              fields:
                mantissa: 
                  size: '9'
                  offset: '0'
                exponent: 
                  size: '3'
                  offset: '9'
          fieldValues: 
            mantissa:
              CondExpr:
                source: 'carry ? sum[1 : Tiny] : null'
                if: 
                  SliceExpr:
                    source: 'carry'
                    var: carry
                    offset: 0
                    size: 1
                then: 
                  SliceExpr:
                    source: 'sum[1 : Tiny]'
                    var: sum
                    offset: 1
                    size: 9
                    start:
                      ConstNumber:
                        value: 1
                    end:
                      ConstTypeName:
                        typeName: Tiny
                        size: 9
                else:
                  NullExpr: ''
            exponent:
              FuncExpr:
                source: 'incr<Tryte>(carry ? lhs.exponent : null)'
                name: incr_3
                args:
                - 
                  CondExpr:
                    source: 'carry ? lhs.exponent : null'
                    if: 
                      SliceExpr:
                        source: 'carry'
                        var: carry
                        offset: 0
                        size: 1
                    then: 
                      SliceExpr:
                        source: 'lhs.exponent'
                        var: lhs
                        offset: 9
                        size: 3
                        fields: 
                          - exponent
                    else:
                      NullExpr: ''
      val:
        TypeExpr:
          source: 'TinyFloat{ /   mantissa = not[carry] ? sum[0 : Tiny] : null /   exponent = not[carry] ? lhs.exponent : null / }'
          type: 
            ConstTypeName:
              typeName: TinyFloat
              size: 12
              fields:
                mantissa: 
                  size: '9'
                  offset: '0'
                exponent: 
                  size: '3'
                  offset: '9'
          fieldValues: 
            mantissa:
              CondExpr:
                source: 'not[carry] ? sum[0 : Tiny] : null'
                if: 
                  LutExpr:
                    name: not
                    args: 
                      - 
                        SliceExpr:
                          source: 'carry'
                          var: carry
                          offset: 0
                          size: 1
                then: 
                  SliceExpr:
                    source: 'sum[0 : Tiny]'
                    var: sum
                    offset: 0
                    size: 9
                    start:
                      ConstNumber:
                        value: 0
                    end:
                      ConstTypeName:
                        typeName: Tiny
                        size: 9
                else:
                  NullExpr: ''
            exponent:
              CondExpr:
                source: 'not[carry] ? lhs.exponent : null'
                if: 
                  LutExpr:
                    name: not
                    args: 
                      - 
                        SliceExpr:
                          source: 'carry'
                          var: carry
                          offset: 0
                          size: 1
                then: 
                  SliceExpr:
                    source: 'lhs.exponent'
                    var: lhs
                    offset: 9
                    size: 3
                    fields: 
                      - exponent
                else:
                  NullExpr: ''
      zero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(val.mantissa)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'val.mantissa'
                    var: val
                    offset: 0
                    size: 9
                    fields: 
                      - mantissa
    return: 
    # ret0 | (zero ? 0 : floatAddNormalize<TinyFloat>(val))
      MergeExpr:
        source: 'ret0 | (zero ? 0 : floatAddNormalize<TinyFloat>(val))'
        lhs: 
          SliceExpr:
            source: 'ret0'
            var: ret0
            offset: 0
            size: 12
        rhs: 
          CondExpr:
            source: 'zero ? 0 : floatAddNormalize<TinyFloat>(val)'
            if: 
              SliceExpr:
                source: 'zero'
                var: zero
                offset: 0
                size: 1
            then: 
              ValueExpr:
                  value: '0'
                  trits: '000000000000'
                  trytes: '9999'
            else:
              FuncExpr:
                source: 'floatAddNormalize<TinyFloat>(val)'
                name: floatAddNormalize_12
                args:
                - 
                  SliceExpr:
                    source: 'val'
                    var: val
                    offset: 0
                    size: 12
# 
# func TinyFloat floatAddNormalize<TinyFloat>(TinyFloat val) {
#   nonZero = notZero[val.mantissa[Tiny - 1]]
#   return nonZero ? val : floatAddDoNormalize<TinyFloat>(val)
# }
  floatAddNormalize_12:
    returnType: 
      ConstTypeName:
        typeName: TinyFloat
        size: 12
        fields:
          mantissa: 
            size: '9'
            offset: '0'
          exponent: 
            size: '3'
            offset: '9'
    params:
      - 
        argName: val
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
    assigns: 
      nonZero:
        LutExpr:
          name: notZero
          args: 
            - 
              SliceExpr:
                source: 'val.mantissa[Tiny - 1]'
                var: val
                offset: 8
                size: 1
                fields: 
                  - mantissa
                start:
                  ConstExpr:
                    operator: '-'
                    lhs: 
                      ConstTypeName:
                        typeName: Tiny
                        size: 9
                    rhs: 
                      ConstNumber:
                        value: 1
    return: 
    # nonZero ? val : floatAddDoNormalize<TinyFloat>(val)
      CondExpr:
        source: 'nonZero ? val : floatAddDoNormalize<TinyFloat>(val)'
        if: 
          SliceExpr:
            source: 'nonZero'
            var: nonZero
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'val'
            var: val
            offset: 0
            size: 12
        else:
          FuncExpr:
            source: 'floatAddDoNormalize<TinyFloat>(val)'
            name: floatAddDoNormalize_12
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 12
# 
# func TinyFloat floatAddDoNormalize<TinyFloat>(TinyFloat val) {
#   val1 = TinyFloat{
#     mantissa = rshift<Tiny>(val.mantissa)
#     exponent = decr<Tryte>(val.exponent)
#   }
#   return floatAddNormalize<TinyFloat>(val1)
# }
  floatAddDoNormalize_12:
    returnType: 
      ConstTypeName:
        typeName: TinyFloat
        size: 12
        fields:
          mantissa: 
            size: '9'
            offset: '0'
          exponent: 
            size: '3'
            offset: '9'
    params:
      - 
        argName: val
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
    assigns: 
      val1:
        TypeExpr:
          source: 'TinyFloat{ /   mantissa = rshift<Tiny>(val.mantissa) /   exponent = decr<Tryte>(val.exponent) / }'
          type: 
            ConstTypeName:
              typeName: TinyFloat
              size: 12
              fields:
                mantissa: 
                  size: '9'
                  offset: '0'
                exponent: 
                  size: '3'
                  offset: '9'
          fieldValues: 
            mantissa:
              FuncExpr:
                source: 'rshift<Tiny>(val.mantissa)'
                name: rshift_9
                args:
                - 
                  SliceExpr:
                    source: 'val.mantissa'
                    var: val
                    offset: 0
                    size: 9
                    fields: 
                      - mantissa
            exponent:
              FuncExpr:
                source: 'decr<Tryte>(val.exponent)'
                name: decr_3
                args:
                - 
                  SliceExpr:
                    source: 'val.exponent'
                    var: val
                    offset: 9
                    size: 3
                    fields: 
                      - exponent
    return: 
    # floatAddNormalize<TinyFloat>(val1)
      FuncExpr:
        source: 'floatAddNormalize<TinyFloat>(val1)'
        name: floatAddNormalize_12
        args:
        - 
          SliceExpr:
            source: 'val1'
            var: val1
            offset: 0
            size: 12
# 
# func TinyFloat floatDiv<TinyFloat>(TinyFloat lhs, TinyFloat rhs) {
#   zero = or[isZero[sign<Tiny>(lhs.mantissa)], isZero[sign<Tiny>(rhs.mantissa)]]
#   return zero ? 0 : floatDivNonZero<TinyFloat>(lhs, rhs)
# }
  floatDiv_12:
    returnType: 
      ConstTypeName:
        typeName: TinyFloat
        size: 12
        fields:
          mantissa: 
            size: '9'
            offset: '0'
          exponent: 
            size: '3'
            offset: '9'
    params:
      - 
        argName: lhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
      - 
        argName: rhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
    assigns: 
      zero:
        LutExpr:
          name: or
          args: 
            - 
              LutExpr:
                name: isZero
                args: 
                  - 
                    FuncExpr:
                      source: 'sign<Tiny>(lhs.mantissa)'
                      name: sign_9
                      args:
                      - 
                        SliceExpr:
                          source: 'lhs.mantissa'
                          var: lhs
                          offset: 0
                          size: 9
                          fields: 
                            - mantissa
            - 
              LutExpr:
                name: isZero
                args: 
                  - 
                    FuncExpr:
                      source: 'sign<Tiny>(rhs.mantissa)'
                      name: sign_9
                      args:
                      - 
                        SliceExpr:
                          source: 'rhs.mantissa'
                          var: rhs
                          offset: 0
                          size: 9
                          fields: 
                            - mantissa
    return: 
    # zero ? 0 : floatDivNonZero<TinyFloat>(lhs, rhs)
      CondExpr:
        source: 'zero ? 0 : floatDivNonZero<TinyFloat>(lhs, rhs)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000'
              trytes: '9999'
        else:
          FuncExpr:
            source: 'floatDivNonZero<TinyFloat>(lhs, rhs)'
            name: floatDivNonZero_12
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 12
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 12
# 
# func TinyFloat floatDivNonZero<TinyFloat>(TinyFloat lhs, TinyFloat rhs) {
#   zero = as<M2>(0)
#   quotient = div<M3>(zero & lhs.mantissa, rhs.mantissa & zero)
#   sum = sub<Tryte>(lhs.exponent, rhs.exponent)
#   isNormalized = isZero[quotient[Tiny * 2]]
#   normalized = TinyFloat{
#     mantissa = quotient[Tiny : Tiny]
#     exponent = sum
#   }
#   corrected = TinyFloat{
#     mantissa = quotient[Tiny + 1 : Tiny]
#     exponent = incr<Tryte>(sum)
#   }
#   return isNormalized ? normalized : corrected
# }
  floatDivNonZero_12:
    returnType: 
      ConstTypeName:
        typeName: TinyFloat
        size: 12
        fields:
          mantissa: 
            size: '9'
            offset: '0'
          exponent: 
            size: '3'
            offset: '9'
    params:
      - 
        argName: lhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
      - 
        argName: rhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
    assigns: 
      zero:
        FuncExpr:
          source: 'as<M2>(0)'
          name: as_18
          args:
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000'
                trytes: '999999'
      quotient:
        FuncExpr:
          source: 'div<M3>(zero & lhs.mantissa, rhs.mantissa & zero)'
          name: div_27
          args:
          - 
            ConcatExpr:
              source: 'zero & lhs.mantissa'
              lhs: 
                SliceExpr:
                  source: 'zero'
                  var: zero
                  offset: 0
                  size: 18
              rhs: 
                SliceExpr:
                  source: 'lhs.mantissa'
                  var: lhs
                  offset: 0
                  size: 9
                  fields: 
                    - mantissa
          - 
            ConcatExpr:
              source: 'rhs.mantissa & zero'
              lhs: 
                SliceExpr:
                  source: 'rhs.mantissa'
                  var: rhs
                  offset: 0
                  size: 9
                  fields: 
                    - mantissa
              rhs: 
                SliceExpr:
                  source: 'zero'
                  var: zero
                  offset: 0
                  size: 18
      sum:
        FuncExpr:
          source: 'sub<Tryte>(lhs.exponent, rhs.exponent)'
          name: sub_3
          args:
          - 
            SliceExpr:
              source: 'lhs.exponent'
              var: lhs
              offset: 9
              size: 3
              fields: 
                - exponent
          - 
            SliceExpr:
              source: 'rhs.exponent'
              var: rhs
              offset: 9
              size: 3
              fields: 
                - exponent
      isNormalized:
        LutExpr:
          name: isZero
          args: 
            - 
              SliceExpr:
                source: 'quotient[Tiny * 2]'
                var: quotient
                offset: 18
                size: 1
                start:
                  ConstTerm:
                    operator: '*'
                    lhs: 
                      ConstTypeName:
                        typeName: Tiny
                        size: 9
                    rhs: 
                      ConstNumber:
                        value: 2
      normalized:
        TypeExpr:
          source: 'TinyFloat{ /   mantissa = quotient[Tiny : Tiny] /   exponent = sum / }'
          type: 
            ConstTypeName:
              typeName: TinyFloat
              size: 12
              fields:
                mantissa: 
                  size: '9'
                  offset: '0'
                exponent: 
                  size: '3'
                  offset: '9'
          fieldValues: 
            mantissa:
              SliceExpr:
                source: 'quotient[Tiny : Tiny]'
                var: quotient
                offset: 9
                size: 9
                start:
                  ConstTypeName:
                    typeName: Tiny
                    size: 9
                end:
                  ConstTypeName:
                    typeName: Tiny
                    size: 9
            exponent:
              SliceExpr:
                source: 'sum'
                var: sum
                offset: 0
                size: 3
      corrected:
        TypeExpr:
          source: 'TinyFloat{ /   mantissa = quotient[Tiny + 1 : Tiny] /   exponent = incr<Tryte>(sum) / }'
          type: 
            ConstTypeName:
              typeName: TinyFloat
              size: 12
              fields:
                mantissa: 
                  size: '9'
                  offset: '0'
                exponent: 
                  size: '3'
                  offset: '9'
          fieldValues: 
            mantissa:
              SliceExpr:
                source: 'quotient[Tiny + 1 : Tiny]'
                var: quotient
                offset: 10
                size: 9
                start:
                  ConstExpr:
                    operator: '+'
                    lhs: 
                      ConstTypeName:
                        typeName: Tiny
                        size: 9
                    rhs: 
                      ConstNumber:
                        value: 1
                end:
                  ConstTypeName:
                    typeName: Tiny
                    size: 9
            exponent:
              FuncExpr:
                source: 'incr<Tryte>(sum)'
                name: incr_3
                args:
                - 
                  SliceExpr:
                    source: 'sum'
                    var: sum
                    offset: 0
                    size: 3
    return: 
    # isNormalized ? normalized : corrected
      CondExpr:
        source: 'isNormalized ? normalized : corrected'
        if: 
          SliceExpr:
            source: 'isNormalized'
            var: isNormalized
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'normalized'
            var: normalized
            offset: 0
            size: 12
        else:
          SliceExpr:
            source: 'corrected'
            var: corrected
            offset: 0
            size: 12
# 
# func TinyFloat floatMul<TinyFloat>(TinyFloat lhs, TinyFloat rhs) {
#   lhsZero = isZero[sign<Tiny>(lhs.mantissa)]
#   rhsZero = isZero[sign<Tiny>(rhs.mantissa)]
#   return or[lhsZero, rhsZero] ? 0 : floatMulNonZero<TinyFloat>(lhs, rhs)
# }
  floatMul_12:
    returnType: 
      ConstTypeName:
        typeName: TinyFloat
        size: 12
        fields:
          mantissa: 
            size: '9'
            offset: '0'
          exponent: 
            size: '3'
            offset: '9'
    params:
      - 
        argName: lhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
      - 
        argName: rhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
    assigns: 
      lhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(lhs.mantissa)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'lhs.mantissa'
                    var: lhs
                    offset: 0
                    size: 9
                    fields: 
                      - mantissa
      rhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(rhs.mantissa)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'rhs.mantissa'
                    var: rhs
                    offset: 0
                    size: 9
                    fields: 
                      - mantissa
    return: 
    # or[lhsZero, rhsZero] ? 0 : floatMulNonZero<TinyFloat>(lhs, rhs)
      CondExpr:
        source: 'or[lhsZero, rhsZero] ? 0 : floatMulNonZero<TinyFloat>(lhs, rhs)'
        if: 
          LutExpr:
            name: or
            args: 
              - 
                SliceExpr:
                  source: 'lhsZero'
                  var: lhsZero
                  offset: 0
                  size: 1
              - 
                SliceExpr:
                  source: 'rhsZero'
                  var: rhsZero
                  offset: 0
                  size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000'
              trytes: '9999'
        else:
          FuncExpr:
            source: 'floatMulNonZero<TinyFloat>(lhs, rhs)'
            name: floatMulNonZero_12
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 12
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 12
# 
# func TinyFloat floatMulNonZero<TinyFloat>(TinyFloat lhs, TinyFloat rhs) {
#   product = fullMulNonZero<Tiny>(lhs.mantissa, rhs.mantissa)
#   sum = add<Tryte>(lhs.exponent, rhs.exponent)
#   return floatMulNormalize<TinyFloat>(product, sum)
# }
  floatMulNonZero_12:
    returnType: 
      ConstTypeName:
        typeName: TinyFloat
        size: 12
        fields:
          mantissa: 
            size: '9'
            offset: '0'
          exponent: 
            size: '3'
            offset: '9'
    params:
      - 
        argName: lhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
      - 
        argName: rhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
    assigns: 
      product:
        FuncExpr:
          source: 'fullMulNonZero<Tiny>(lhs.mantissa, rhs.mantissa)'
          name: fullMulNonZero_9
          args:
          - 
            SliceExpr:
              source: 'lhs.mantissa'
              var: lhs
              offset: 0
              size: 9
              fields: 
                - mantissa
          - 
            SliceExpr:
              source: 'rhs.mantissa'
              var: rhs
              offset: 0
              size: 9
              fields: 
                - mantissa
      sum:
        FuncExpr:
          source: 'add<Tryte>(lhs.exponent, rhs.exponent)'
          name: add_3
          args:
          - 
            SliceExpr:
              source: 'lhs.exponent'
              var: lhs
              offset: 9
              size: 3
              fields: 
                - exponent
          - 
            SliceExpr:
              source: 'rhs.exponent'
              var: rhs
              offset: 9
              size: 3
              fields: 
                - exponent
    return: 
    # floatMulNormalize<TinyFloat>(product, sum)
      FuncExpr:
        source: 'floatMulNormalize<TinyFloat>(product, sum)'
        name: floatMulNormalize_12
        args:
        - 
          SliceExpr:
            source: 'product'
            var: product
            offset: 0
            size: 18
        - 
          SliceExpr:
            source: 'sum'
            var: sum
            offset: 0
            size: 3
# 
# func TinyFloat floatMulNormalize<TinyFloat>(M2 product, Tryte sum) {
#   isNormalized = notZero[product[M2 - 1]]
#   prod0 = isNormalized ? product : null
#   sum0 = isNormalized ? sum : null
#   prod1 = not[isNormalized] ? 0 & product[0 : M2 - 1] : null
#   sum1 = not[isNormalized] ? sum : null
#   normalized = TinyFloat{
#     mantissa = prod0[Tiny : Tiny]
#     exponent = sum0
#   }
#   return normalized | floatMulNormalize<TinyFloat>(prod1, decr<Tryte>(sum1))
# }
  floatMulNormalize_12:
    returnType: 
      ConstTypeName:
        typeName: TinyFloat
        size: 12
        fields:
          mantissa: 
            size: '9'
            offset: '0'
          exponent: 
            size: '3'
            offset: '9'
    params:
      - 
        argName: product
        size: 18
        type: 
          ConstTypeName:
            typeName: M2
            size: 18
      - 
        argName: sum
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
    assigns: 
      isNormalized:
        LutExpr:
          name: notZero
          args: 
            - 
              SliceExpr:
                source: 'product[M2 - 1]'
                var: product
                offset: 17
                size: 1
                start:
                  ConstExpr:
                    operator: '-'
                    lhs: 
                      ConstTypeName:
                        typeName: M2
                        size: 18
                    rhs: 
                      ConstNumber:
                        value: 1
      prod0:
        CondExpr:
          source: 'isNormalized ? product : null'
          if: 
            SliceExpr:
              source: 'isNormalized'
              var: isNormalized
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'product'
              var: product
              offset: 0
              size: 18
          else:
            NullExpr: ''
      sum0:
        CondExpr:
          source: 'isNormalized ? sum : null'
          if: 
            SliceExpr:
              source: 'isNormalized'
              var: isNormalized
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'sum'
              var: sum
              offset: 0
              size: 3
          else:
            NullExpr: ''
      prod1:
        CondExpr:
          source: 'not[isNormalized] ? 0 & product[0 : M2 - 1] : null'
          if: 
            LutExpr:
              name: not
              args: 
                - 
                  SliceExpr:
                    source: 'isNormalized'
                    var: isNormalized
                    offset: 0
                    size: 1
          then: 
            ConcatExpr:
              source: '0 & product[0 : M2 - 1]'
              lhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
              rhs: 
                SliceExpr:
                  source: 'product[0 : M2 - 1]'
                  var: product
                  offset: 0
                  size: 17
                  start:
                    ConstNumber:
                      value: 0
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: M2
                          size: 18
                      rhs: 
                        ConstNumber:
                          value: 1
          else:
            NullExpr: ''
      sum1:
        CondExpr:
          source: 'not[isNormalized] ? sum : null'
          if: 
            LutExpr:
              name: not
              args: 
                - 
                  SliceExpr:
                    source: 'isNormalized'
                    var: isNormalized
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'sum'
              var: sum
              offset: 0
              size: 3
          else:
            NullExpr: ''
      normalized:
        TypeExpr:
          source: 'TinyFloat{ /   mantissa = prod0[Tiny : Tiny] /   exponent = sum0 / }'
          type: 
            ConstTypeName:
              typeName: TinyFloat
              size: 12
              fields:
                mantissa: 
                  size: '9'
                  offset: '0'
                exponent: 
                  size: '3'
                  offset: '9'
          fieldValues: 
            mantissa:
              SliceExpr:
                source: 'prod0[Tiny : Tiny]'
                var: prod0
                offset: 9
                size: 9
                start:
                  ConstTypeName:
                    typeName: Tiny
                    size: 9
                end:
                  ConstTypeName:
                    typeName: Tiny
                    size: 9
            exponent:
              SliceExpr:
                source: 'sum0'
                var: sum0
                offset: 0
                size: 3
    return: 
    # normalized | floatMulNormalize<TinyFloat>(prod1, decr<Tryte>(sum1))
      MergeExpr:
        source: 'normalized | floatMulNormalize<TinyFloat>(prod1, decr<Tryte>(sum1))'
        lhs: 
          SliceExpr:
            source: 'normalized'
            var: normalized
            offset: 0
            size: 12
        rhs: 
          FuncExpr:
            source: 'floatMulNormalize<TinyFloat>(prod1, decr<Tryte>(sum1))'
            name: floatMulNormalize_12
            args:
            - 
              SliceExpr:
                source: 'prod1'
                var: prod1
                offset: 0
                size: 18
            - 
              FuncExpr:
                source: 'decr<Tryte>(sum1)'
                name: decr_3
                args:
                - 
                  SliceExpr:
                    source: 'sum1'
                    var: sum1
                    offset: 0
                    size: 3
# 
# func TinyFloat floatNeg<TinyFloat>(TinyFloat val) {
#   return TinyFloat{
#     mantissa = neg<Tiny>(val.mantissa)
#     exponent = val.exponent
#   }
# }
  floatNeg_12:
    returnType: 
      ConstTypeName:
        typeName: TinyFloat
        size: 12
        fields:
          mantissa: 
            size: '9'
            offset: '0'
          exponent: 
            size: '3'
            offset: '9'
    params:
      - 
        argName: val
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
    return: 
    # TinyFloat{
    #   mantissa = neg<Tiny>(val.mantissa)
    #   exponent = val.exponent
    # }
      TypeExpr:
        source: 'TinyFloat{ /   mantissa = neg<Tiny>(val.mantissa) /   exponent = val.exponent / }'
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
        fieldValues: 
          mantissa:
            FuncExpr:
              source: 'neg<Tiny>(val.mantissa)'
              name: neg_9
              args:
              - 
                SliceExpr:
                  source: 'val.mantissa'
                  var: val
                  offset: 0
                  size: 9
                  fields: 
                    - mantissa
          exponent:
            SliceExpr:
              source: 'val.exponent'
              var: val
              offset: 9
              size: 3
              fields: 
                - exponent
# 
# func TinyFloat floatSub<TinyFloat>(TinyFloat lhs, TinyFloat rhs) {
#   return floatAdd<TinyFloat>(lhs, floatNeg<TinyFloat>(rhs))
# }
  floatSub_12:
    returnType: 
      ConstTypeName:
        typeName: TinyFloat
        size: 12
        fields:
          mantissa: 
            size: '9'
            offset: '0'
          exponent: 
            size: '3'
            offset: '9'
    params:
      - 
        argName: lhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
      - 
        argName: rhs
        size: 12
        type: 
          ConstTypeName:
            typeName: TinyFloat
            size: 12
            fields:
              mantissa: 
                size: '9'
                offset: '0'
              exponent: 
                size: '3'
                offset: '9'
    return: 
    # floatAdd<TinyFloat>(lhs, floatNeg<TinyFloat>(rhs))
      FuncExpr:
        source: 'floatAdd<TinyFloat>(lhs, floatNeg<TinyFloat>(rhs))'
        name: floatAdd_12
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 12
        - 
          FuncExpr:
            source: 'floatNeg<TinyFloat>(rhs)'
            name: floatNeg_12
            args:
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 12
# 
# func M3 div<M3>(M3 lhs, M3 rhs) {
#   ret = divMod<M3>(lhs, rhs)
#   return ret.quotient
# }
  div_27:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 27
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
    assigns: 
      ret:
        FuncExpr:
          source: 'divMod<M3>(lhs, rhs)'
          name: divMod_27
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 27
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 27
        fields: 
          - quotient
# 
# func M3 ceilDiv<M3>(M3 lhs, M3 rhs) {
#   ret = ceilDivMod<M3>(lhs, rhs)
#   return ret.quotient
# }
  ceilDiv_27:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 27
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
    assigns: 
      ret:
        FuncExpr:
          source: 'ceilDivMod<M3>(lhs, rhs)'
          name: ceilDivMod_27
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 27
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 27
        fields: 
          - quotient
# 
# func M3 floorDiv<M3>(M3 lhs, M3 rhs) {
#   ret = floorDivMod<M3>(lhs, rhs)
#   return ret.quotient
# }
  floorDiv_27:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 27
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
    assigns: 
      ret:
        FuncExpr:
          source: 'floorDivMod<M3>(lhs, rhs)'
          name: floorDivMod_27
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 27
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 27
        fields: 
          - quotient
# 
# func M3 roundDiv<M3>(M3 lhs, M3 rhs) {
#   ret = roundDivMod<M3>(lhs, rhs)
#   return ret.quotient
# }
  roundDiv_27:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 27
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
    assigns: 
      ret:
        FuncExpr:
          source: 'roundDivMod<M3>(lhs, rhs)'
          name: roundDivMod_27
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 27
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 27
        fields: 
          - quotient
# 
# func T2 divMod<M3>(M3 lhs, M3 rhs) {
#   absLhs = abs<M3>(lhs)
#   absRhs = abs<M3>(rhs)
#   quorem = roundDivModLoop<M3>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   fix = isNegative[sign<M3>(rem)]
#   quo0 = fix ? decr<M3>(quo) : quo
#   rem0 = fix ? add<M3>(rem, absRhs) : rem
#   return fixSign<M3>(lhs, rhs, quo0, rem0)
# }
  divMod_27:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 54
        fields:
          quotient: 
            size: '27'
            offset: '0'
          remainder: 
            size: '27'
            offset: '27'
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<M3>(lhs)'
          name: abs_27
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 27
      absRhs:
        FuncExpr:
          source: 'abs<M3>(rhs)'
          name: abs_27
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 27
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<M3>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_27
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 27
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000'
                trytes: '999999999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 27
          - 
            ValueExpr:
                value: '1'
                trits: '100000000000000000000000000'
                trytes: 'A99999999'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 27
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 27
          size: 27
          fields: 
            - remainder
      fix:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<M3>(rem)'
                name: sign_27
                args:
                - 
                  SliceExpr:
                    source: 'rem'
                    var: rem
                    offset: 0
                    size: 27
      quo0:
        CondExpr:
          source: 'fix ? decr<M3>(quo) : quo'
          if: 
            SliceExpr:
              source: 'fix'
              var: fix
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'decr<M3>(quo)'
              name: decr_27
              args:
              - 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 27
          else:
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 27
      rem0:
        CondExpr:
          source: 'fix ? add<M3>(rem, absRhs) : rem'
          if: 
            SliceExpr:
              source: 'fix'
              var: fix
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'add<M3>(rem, absRhs)'
              name: add_27
              args:
              - 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 27
              - 
                SliceExpr:
                  source: 'absRhs'
                  var: absRhs
                  offset: 0
                  size: 27
          else:
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 27
    return: 
    # fixSign<M3>(lhs, rhs, quo0, rem0)
      FuncExpr:
        source: 'fixSign<M3>(lhs, rhs, quo0, rem0)'
        name: fixSign_27
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 27
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 27
        - 
          SliceExpr:
            source: 'quo0'
            var: quo0
            offset: 0
            size: 27
        - 
          SliceExpr:
            source: 'rem0'
            var: rem0
            offset: 0
            size: 27
# 
# func T2 ceilDivMod<M3>(M3 lhs, M3 rhs) {
#   absLhs = abs<M3>(lhs)
#   absRhs = abs<M3>(rhs)
#   quorem = roundDivModLoop<M3>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   lhsSign = sign<M3>(lhs)
#   rhsSign = sign<M3>(rhs)
#   remSign = sign<M3>(rem)
#   neg = xor[isNegative[lhsSign], isNegative[rhsSign]]
#   up = and[not[neg], isPositive[remSign]]
#   down = and[neg, isNegative[remSign]]
#   none = nor[up, down]
#   quoN0 = none ? quo : null
#   quoN1 = incr<M3>(up ? quo : null)
#   quoN2 = decr<M3>(down ? quo : null)
#   quo0 = quoN0 | quoN1 | quoN2
#   remN0 = none ? rem : null
#   remN1 = sub<M3>(up ? rem : null, absRhs)
#   remN2 = add<M3>(down ? rem : null, absRhs)
#   rem0 = remN0 | remN1 | remN2
#   return fixSign<M3>(lhs, rhs, quo0, rem0)
# }
  ceilDivMod_27:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 54
        fields:
          quotient: 
            size: '27'
            offset: '0'
          remainder: 
            size: '27'
            offset: '27'
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<M3>(lhs)'
          name: abs_27
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 27
      absRhs:
        FuncExpr:
          source: 'abs<M3>(rhs)'
          name: abs_27
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 27
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<M3>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_27
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 27
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000'
                trytes: '999999999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 27
          - 
            ValueExpr:
                value: '1'
                trits: '100000000000000000000000000'
                trytes: 'A99999999'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 27
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 27
          size: 27
          fields: 
            - remainder
      lhsSign:
        FuncExpr:
          source: 'sign<M3>(lhs)'
          name: sign_27
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 27
      rhsSign:
        FuncExpr:
          source: 'sign<M3>(rhs)'
          name: sign_27
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 27
      remSign:
        FuncExpr:
          source: 'sign<M3>(rem)'
          name: sign_27
          args:
          - 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 27
      neg:
        LutExpr:
          name: xor
          args: 
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'lhsSign'
                      var: lhsSign
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'rhsSign'
                      var: rhsSign
                      offset: 0
                      size: 1
      up:
        LutExpr:
          name: and
          args: 
            - 
              LutExpr:
                name: not
                args: 
                  - 
                    SliceExpr:
                      source: 'neg'
                      var: neg
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isPositive
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      down:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'neg'
                var: neg
                offset: 0
                size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      none:
        LutExpr:
          name: nor
          args: 
            - 
              SliceExpr:
                source: 'up'
                var: up
                offset: 0
                size: 1
            - 
              SliceExpr:
                source: 'down'
                var: down
                offset: 0
                size: 1
      quoN0:
        CondExpr:
          source: 'none ? quo : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 27
          else:
            NullExpr: ''
      quoN1:
        FuncExpr:
          source: 'incr<M3>(up ? quo : null)'
          name: incr_27
          args:
          - 
            CondExpr:
              source: 'up ? quo : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 27
              else:
                NullExpr: ''
      quoN2:
        FuncExpr:
          source: 'decr<M3>(down ? quo : null)'
          name: decr_27
          args:
          - 
            CondExpr:
              source: 'down ? quo : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 27
              else:
                NullExpr: ''
      quo0:
        MergeExpr:
          source: 'quoN0 | quoN1 | quoN2'
          lhs: 
            MergeExpr:
              source: 'quoN0 | quoN1'
              lhs: 
                SliceExpr:
                  source: 'quoN0'
                  var: quoN0
                  offset: 0
                  size: 27
              rhs: 
                SliceExpr:
                  source: 'quoN1'
                  var: quoN1
                  offset: 0
                  size: 27
          rhs: 
            SliceExpr:
              source: 'quoN2'
              var: quoN2
              offset: 0
              size: 27
      remN0:
        CondExpr:
          source: 'none ? rem : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 27
          else:
            NullExpr: ''
      remN1:
        FuncExpr:
          source: 'sub<M3>(up ? rem : null, absRhs)'
          name: sub_27
          args:
          - 
            CondExpr:
              source: 'up ? rem : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 27
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 27
      remN2:
        FuncExpr:
          source: 'add<M3>(down ? rem : null, absRhs)'
          name: add_27
          args:
          - 
            CondExpr:
              source: 'down ? rem : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 27
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 27
      rem0:
        MergeExpr:
          source: 'remN0 | remN1 | remN2'
          lhs: 
            MergeExpr:
              source: 'remN0 | remN1'
              lhs: 
                SliceExpr:
                  source: 'remN0'
                  var: remN0
                  offset: 0
                  size: 27
              rhs: 
                SliceExpr:
                  source: 'remN1'
                  var: remN1
                  offset: 0
                  size: 27
          rhs: 
            SliceExpr:
              source: 'remN2'
              var: remN2
              offset: 0
              size: 27
    return: 
    # fixSign<M3>(lhs, rhs, quo0, rem0)
      FuncExpr:
        source: 'fixSign<M3>(lhs, rhs, quo0, rem0)'
        name: fixSign_27
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 27
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 27
        - 
          SliceExpr:
            source: 'quo0'
            var: quo0
            offset: 0
            size: 27
        - 
          SliceExpr:
            source: 'rem0'
            var: rem0
            offset: 0
            size: 27
# 
# func T2 floorDivMod<M3>(M3 lhs, M3 rhs) {
#   absLhs = abs<M3>(lhs)
#   absRhs = abs<M3>(rhs)
#   quorem = roundDivModLoop<M3>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   lhsSign = sign<M3>(lhs)
#   rhsSign = sign<M3>(rhs)
#   remSign = sign<M3>(rem)
#   neg = xor[isNegative[lhsSign], isNegative[rhsSign]]
#   down = and[not[neg], isNegative[remSign]]
#   up = and[neg, isPositive[remSign]]
#   none = nor[up, down]
#   quoN0 = none ? quo : null
#   quoN1 = incr<M3>(up ? quo : null)
#   quoN2 = decr<M3>(down ? quo : null)
#   quo0 = quoN0 | quoN1 | quoN2
#   remN0 = none ? rem : null
#   remN1 = sub<M3>(up ? rem : null, absRhs)
#   remN2 = add<M3>(down ? rem : null, absRhs)
#   rem0 = remN0 | remN1 | remN2
#   return fixSign<M3>(lhs, rhs, quo0, rem0)
# }
  floorDivMod_27:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 54
        fields:
          quotient: 
            size: '27'
            offset: '0'
          remainder: 
            size: '27'
            offset: '27'
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<M3>(lhs)'
          name: abs_27
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 27
      absRhs:
        FuncExpr:
          source: 'abs<M3>(rhs)'
          name: abs_27
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 27
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<M3>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_27
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 27
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000'
                trytes: '999999999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 27
          - 
            ValueExpr:
                value: '1'
                trits: '100000000000000000000000000'
                trytes: 'A99999999'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 27
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 27
          size: 27
          fields: 
            - remainder
      lhsSign:
        FuncExpr:
          source: 'sign<M3>(lhs)'
          name: sign_27
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 27
      rhsSign:
        FuncExpr:
          source: 'sign<M3>(rhs)'
          name: sign_27
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 27
      remSign:
        FuncExpr:
          source: 'sign<M3>(rem)'
          name: sign_27
          args:
          - 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 27
      neg:
        LutExpr:
          name: xor
          args: 
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'lhsSign'
                      var: lhsSign
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'rhsSign'
                      var: rhsSign
                      offset: 0
                      size: 1
      down:
        LutExpr:
          name: and
          args: 
            - 
              LutExpr:
                name: not
                args: 
                  - 
                    SliceExpr:
                      source: 'neg'
                      var: neg
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      up:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'neg'
                var: neg
                offset: 0
                size: 1
            - 
              LutExpr:
                name: isPositive
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      none:
        LutExpr:
          name: nor
          args: 
            - 
              SliceExpr:
                source: 'up'
                var: up
                offset: 0
                size: 1
            - 
              SliceExpr:
                source: 'down'
                var: down
                offset: 0
                size: 1
      quoN0:
        CondExpr:
          source: 'none ? quo : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 27
          else:
            NullExpr: ''
      quoN1:
        FuncExpr:
          source: 'incr<M3>(up ? quo : null)'
          name: incr_27
          args:
          - 
            CondExpr:
              source: 'up ? quo : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 27
              else:
                NullExpr: ''
      quoN2:
        FuncExpr:
          source: 'decr<M3>(down ? quo : null)'
          name: decr_27
          args:
          - 
            CondExpr:
              source: 'down ? quo : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 27
              else:
                NullExpr: ''
      quo0:
        MergeExpr:
          source: 'quoN0 | quoN1 | quoN2'
          lhs: 
            MergeExpr:
              source: 'quoN0 | quoN1'
              lhs: 
                SliceExpr:
                  source: 'quoN0'
                  var: quoN0
                  offset: 0
                  size: 27
              rhs: 
                SliceExpr:
                  source: 'quoN1'
                  var: quoN1
                  offset: 0
                  size: 27
          rhs: 
            SliceExpr:
              source: 'quoN2'
              var: quoN2
              offset: 0
              size: 27
      remN0:
        CondExpr:
          source: 'none ? rem : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 27
          else:
            NullExpr: ''
      remN1:
        FuncExpr:
          source: 'sub<M3>(up ? rem : null, absRhs)'
          name: sub_27
          args:
          - 
            CondExpr:
              source: 'up ? rem : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 27
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 27
      remN2:
        FuncExpr:
          source: 'add<M3>(down ? rem : null, absRhs)'
          name: add_27
          args:
          - 
            CondExpr:
              source: 'down ? rem : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 27
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 27
      rem0:
        MergeExpr:
          source: 'remN0 | remN1 | remN2'
          lhs: 
            MergeExpr:
              source: 'remN0 | remN1'
              lhs: 
                SliceExpr:
                  source: 'remN0'
                  var: remN0
                  offset: 0
                  size: 27
              rhs: 
                SliceExpr:
                  source: 'remN1'
                  var: remN1
                  offset: 0
                  size: 27
          rhs: 
            SliceExpr:
              source: 'remN2'
              var: remN2
              offset: 0
              size: 27
    return: 
    # fixSign<M3>(lhs, rhs, quo0, rem0)
      FuncExpr:
        source: 'fixSign<M3>(lhs, rhs, quo0, rem0)'
        name: fixSign_27
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 27
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 27
        - 
          SliceExpr:
            source: 'quo0'
            var: quo0
            offset: 0
            size: 27
        - 
          SliceExpr:
            source: 'rem0'
            var: rem0
            offset: 0
            size: 27
# 
# func T2 roundDivMod<M3>(M3 lhs, M3 rhs) {
#   absLhs = abs<M3>(lhs)
#   absRhs = abs<M3>(rhs)
#   quorem = roundDivModLoop<M3>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   return fixSign<M3>(lhs, rhs, quo, rem)
# }
  roundDivMod_27:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 54
        fields:
          quotient: 
            size: '27'
            offset: '0'
          remainder: 
            size: '27'
            offset: '27'
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<M3>(lhs)'
          name: abs_27
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 27
      absRhs:
        FuncExpr:
          source: 'abs<M3>(rhs)'
          name: abs_27
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 27
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<M3>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_27
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 27
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000'
                trytes: '999999999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 27
          - 
            ValueExpr:
                value: '1'
                trits: '100000000000000000000000000'
                trytes: 'A99999999'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 27
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 27
          size: 27
          fields: 
            - remainder
    return: 
    # fixSign<M3>(lhs, rhs, quo, rem)
      FuncExpr:
        source: 'fixSign<M3>(lhs, rhs, quo, rem)'
        name: fixSign_27
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 27
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 27
        - 
          SliceExpr:
            source: 'quo'
            var: quo
            offset: 0
            size: 27
        - 
          SliceExpr:
            source: 'rem'
            var: rem
            offset: 0
            size: 27
# 
# func T2 roundDivModLoop<M3>(M3 quo, M3 rem, M3 div, M3 shf) {
#   quorem = roundDivModPass<M3>(quo, rem, div)
#   newShf = rshift<M3>(shf)
#   zero = isZero[sign<M3>(newShf)]
#   quo1 = quorem.quotient
#   rem1 = quorem.remainder
#   return zero ? quorem : roundDivModLoop<M3>(quo1, rem1, div, newShf)
# }
  roundDivModLoop_27:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 54
        fields:
          quotient: 
            size: '27'
            offset: '0'
          remainder: 
            size: '27'
            offset: '27'
    params:
      - 
        argName: quo
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: rem
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: div
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: shf
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
    assigns: 
      quorem:
        FuncExpr:
          source: 'roundDivModPass<M3>(quo, rem, div)'
          name: roundDivModPass_27
          args:
          - 
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'div'
              var: div
              offset: 0
              size: 27
      newShf:
        FuncExpr:
          source: 'rshift<M3>(shf)'
          name: rshift_27
          args:
          - 
            SliceExpr:
              source: 'shf'
              var: shf
              offset: 0
              size: 27
      zero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<M3>(newShf)'
                name: sign_27
                args:
                - 
                  SliceExpr:
                    source: 'newShf'
                    var: newShf
                    offset: 0
                    size: 27
      quo1:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 27
          fields: 
            - quotient
      rem1:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 27
          size: 27
          fields: 
            - remainder
    return: 
    # zero ? quorem : roundDivModLoop<M3>(quo1, rem1, div, newShf)
      CondExpr:
        source: 'zero ? quorem : roundDivModLoop<M3>(quo1, rem1, div, newShf)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'quorem'
            var: quorem
            offset: 0
            size: 54
        else:
          FuncExpr:
            source: 'roundDivModLoop<M3>(quo1, rem1, div, newShf)'
            name: roundDivModLoop_27
            args:
            - 
              SliceExpr:
                source: 'quo1'
                var: quo1
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'rem1'
                var: rem1
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'div'
                var: div
                offset: 0
                size: 27
            - 
              SliceExpr:
                source: 'newShf'
                var: newShf
                offset: 0
                size: 27
# 
# func T2 roundDivModPass<M3>(M3 quo, M3 rem, M3 div) {
#   quorem = as<T2>(rshift<T2>(quo & rem))
#   quo0 = quorem.quotient
#   rem0 = quorem.remainder
#   remSign = sign<M3>(rem0)
#   quoSign = sign<M3>(quo0)
#   low = sub<M3>(rem0, div)
#   neg1 = neg<M3>(low)
#   cmp1 = cmp<M3>(neg1, rem0)
#   posRem = isPositive[remSign]
#   posQuo = isPositive[quoSign]
#   test1 = and[posRem, or[isLess[cmp1], and[isZero[cmp1], posQuo]]]
#   high = add<M3>(rem0, div)
#   neg2 = neg<M3>(high)
#   cmp2 = cmp<M3>(neg2, rem0)
#   negRem = isNegative[remSign]
#   negQuo = isNegative[quoSign]
#   test2 = and[negRem, or[isGreater[cmp2], and[isEqual[cmp2], negQuo]]]
#   quorem1 = T2{
#     quotient = incr<M3>(quo0)
#     remainder = low
#   }
#   quorem2 = T2{
#     quotient = decr<M3>(quo0)
#     remainder = high
#   }
#   return test1 ? quorem1 : test2 ? quorem2 : quorem
# }
  roundDivModPass_27:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 54
        fields:
          quotient: 
            size: '27'
            offset: '0'
          remainder: 
            size: '27'
            offset: '27'
    params:
      - 
        argName: quo
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: rem
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: div
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
    assigns: 
      quorem:
        FuncExpr:
          source: 'as<T2>(rshift<T2>(quo & rem))'
          name: as_54
          args:
          - 
            FuncExpr:
              source: 'rshift<T2>(quo & rem)'
              name: rshift_54
              args:
              - 
                ConcatExpr:
                  source: 'quo & rem'
                  lhs: 
                    SliceExpr:
                      source: 'quo'
                      var: quo
                      offset: 0
                      size: 27
                  rhs: 
                    SliceExpr:
                      source: 'rem'
                      var: rem
                      offset: 0
                      size: 27
      quo0:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 27
          fields: 
            - quotient
      rem0:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 27
          size: 27
          fields: 
            - remainder
      remSign:
        FuncExpr:
          source: 'sign<M3>(rem0)'
          name: sign_27
          args:
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 27
      quoSign:
        FuncExpr:
          source: 'sign<M3>(quo0)'
          name: sign_27
          args:
          - 
            SliceExpr:
              source: 'quo0'
              var: quo0
              offset: 0
              size: 27
      low:
        FuncExpr:
          source: 'sub<M3>(rem0, div)'
          name: sub_27
          args:
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'div'
              var: div
              offset: 0
              size: 27
      neg1:
        FuncExpr:
          source: 'neg<M3>(low)'
          name: neg_27
          args:
          - 
            SliceExpr:
              source: 'low'
              var: low
              offset: 0
              size: 27
      cmp1:
        FuncExpr:
          source: 'cmp<M3>(neg1, rem0)'
          name: cmp_27
          args:
          - 
            SliceExpr:
              source: 'neg1'
              var: neg1
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 27
      posRem:
        LutExpr:
          name: isPositive
          args: 
            - 
              SliceExpr:
                source: 'remSign'
                var: remSign
                offset: 0
                size: 1
      posQuo:
        LutExpr:
          name: isPositive
          args: 
            - 
              SliceExpr:
                source: 'quoSign'
                var: quoSign
                offset: 0
                size: 1
      test1:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'posRem'
                var: posRem
                offset: 0
                size: 1
            - 
              LutExpr:
                name: or
                args: 
                  - 
                    LutExpr:
                      name: isLess
                      args: 
                        - 
                          SliceExpr:
                            source: 'cmp1'
                            var: cmp1
                            offset: 0
                            size: 1
                  - 
                    LutExpr:
                      name: and
                      args: 
                        - 
                          LutExpr:
                            name: isZero
                            args: 
                              - 
                                SliceExpr:
                                  source: 'cmp1'
                                  var: cmp1
                                  offset: 0
                                  size: 1
                        - 
                          SliceExpr:
                            source: 'posQuo'
                            var: posQuo
                            offset: 0
                            size: 1
      high:
        FuncExpr:
          source: 'add<M3>(rem0, div)'
          name: add_27
          args:
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'div'
              var: div
              offset: 0
              size: 27
      neg2:
        FuncExpr:
          source: 'neg<M3>(high)'
          name: neg_27
          args:
          - 
            SliceExpr:
              source: 'high'
              var: high
              offset: 0
              size: 27
      cmp2:
        FuncExpr:
          source: 'cmp<M3>(neg2, rem0)'
          name: cmp_27
          args:
          - 
            SliceExpr:
              source: 'neg2'
              var: neg2
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 27
      negRem:
        LutExpr:
          name: isNegative
          args: 
            - 
              SliceExpr:
                source: 'remSign'
                var: remSign
                offset: 0
                size: 1
      negQuo:
        LutExpr:
          name: isNegative
          args: 
            - 
              SliceExpr:
                source: 'quoSign'
                var: quoSign
                offset: 0
                size: 1
      test2:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'negRem'
                var: negRem
                offset: 0
                size: 1
            - 
              LutExpr:
                name: or
                args: 
                  - 
                    LutExpr:
                      name: isGreater
                      args: 
                        - 
                          SliceExpr:
                            source: 'cmp2'
                            var: cmp2
                            offset: 0
                            size: 1
                  - 
                    LutExpr:
                      name: and
                      args: 
                        - 
                          LutExpr:
                            name: isEqual
                            args: 
                              - 
                                SliceExpr:
                                  source: 'cmp2'
                                  var: cmp2
                                  offset: 0
                                  size: 1
                        - 
                          SliceExpr:
                            source: 'negQuo'
                            var: negQuo
                            offset: 0
                            size: 1
      quorem1:
        TypeExpr:
          source: 'T2{ /   quotient = incr<M3>(quo0) /   remainder = low / }'
          type: 
            ConstTypeName:
              typeName: T2
              size: 54
              fields:
                quotient: 
                  size: '27'
                  offset: '0'
                remainder: 
                  size: '27'
                  offset: '27'
          fieldValues: 
            quotient:
              FuncExpr:
                source: 'incr<M3>(quo0)'
                name: incr_27
                args:
                - 
                  SliceExpr:
                    source: 'quo0'
                    var: quo0
                    offset: 0
                    size: 27
            remainder:
              SliceExpr:
                source: 'low'
                var: low
                offset: 0
                size: 27
      quorem2:
        TypeExpr:
          source: 'T2{ /   quotient = decr<M3>(quo0) /   remainder = high / }'
          type: 
            ConstTypeName:
              typeName: T2
              size: 54
              fields:
                quotient: 
                  size: '27'
                  offset: '0'
                remainder: 
                  size: '27'
                  offset: '27'
          fieldValues: 
            quotient:
              FuncExpr:
                source: 'decr<M3>(quo0)'
                name: decr_27
                args:
                - 
                  SliceExpr:
                    source: 'quo0'
                    var: quo0
                    offset: 0
                    size: 27
            remainder:
              SliceExpr:
                source: 'high'
                var: high
                offset: 0
                size: 27
    return: 
    # test1 ? quorem1 : test2 ? quorem2 : quorem
      CondExpr:
        source: 'test1 ? quorem1 : test2 ? quorem2 : quorem'
        if: 
          SliceExpr:
            source: 'test1'
            var: test1
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'quorem1'
            var: quorem1
            offset: 0
            size: 54
        else:
          CondExpr:
            source: 'test2 ? quorem2 : quorem'
            if: 
              SliceExpr:
                source: 'test2'
                var: test2
                offset: 0
                size: 1
            then: 
              SliceExpr:
                source: 'quorem2'
                var: quorem2
                offset: 0
                size: 54
            else:
              SliceExpr:
                source: 'quorem'
                var: quorem
                offset: 0
                size: 54
# 
# func T2 fixSign<M3>(M3 lhs, M3 rhs, M3 quo, M3 rem) {
#   lhsSign = sign<M3>(lhs)
#   rhsSign = sign<M3>(rhs)
#   negRem = isNegative[lhsSign]
#   negQuo = xor[negRem, isNegative[rhsSign]]
#   quo1 = negQuo ? neg<M3>(quo) : quo
#   rem1 = negRem ? neg<M3>(rem) : rem
#   return T2{
#     quotient = quo1
#     remainder = rem1
#   }
# }
  fixSign_27:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 54
        fields:
          quotient: 
            size: '27'
            offset: '0'
          remainder: 
            size: '27'
            offset: '27'
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: quo
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: rem
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
    assigns: 
      lhsSign:
        FuncExpr:
          source: 'sign<M3>(lhs)'
          name: sign_27
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 27
      rhsSign:
        FuncExpr:
          source: 'sign<M3>(rhs)'
          name: sign_27
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 27
      negRem:
        LutExpr:
          name: isNegative
          args: 
            - 
              SliceExpr:
                source: 'lhsSign'
                var: lhsSign
                offset: 0
                size: 1
      negQuo:
        LutExpr:
          name: xor
          args: 
            - 
              SliceExpr:
                source: 'negRem'
                var: negRem
                offset: 0
                size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'rhsSign'
                      var: rhsSign
                      offset: 0
                      size: 1
      quo1:
        CondExpr:
          source: 'negQuo ? neg<M3>(quo) : quo'
          if: 
            SliceExpr:
              source: 'negQuo'
              var: negQuo
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'neg<M3>(quo)'
              name: neg_27
              args:
              - 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 27
          else:
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 27
      rem1:
        CondExpr:
          source: 'negRem ? neg<M3>(rem) : rem'
          if: 
            SliceExpr:
              source: 'negRem'
              var: negRem
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'neg<M3>(rem)'
              name: neg_27
              args:
              - 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 27
          else:
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 27
    return: 
    # T2{
    #   quotient = quo1
    #   remainder = rem1
    # }
      TypeExpr:
        source: 'T2{ /   quotient = quo1 /   remainder = rem1 / }'
        type: 
          ConstTypeName:
            typeName: T2
            size: 54
            fields:
              quotient: 
                size: '27'
                offset: '0'
              remainder: 
                size: '27'
                offset: '27'
        fieldValues: 
          quotient:
            SliceExpr:
              source: 'quo1'
              var: quo1
              offset: 0
              size: 27
          remainder:
            SliceExpr:
              source: 'rem1'
              var: rem1
              offset: 0
              size: 27
# 
# func M3 abs<M3>(M3 val) {
#   return isNegative[sign<M3>(val)] ? neg<M3>(val) : val
# }
  abs_27:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 27
    params:
      - 
        argName: val
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
    return: 
    # isNegative[sign<M3>(val)] ? neg<M3>(val) : val
      CondExpr:
        source: 'isNegative[sign<M3>(val)] ? neg<M3>(val) : val'
        if: 
          LutExpr:
            name: isNegative
            args: 
              - 
                FuncExpr:
                  source: 'sign<M3>(val)'
                  name: sign_27
                  args:
                  - 
                    SliceExpr:
                      source: 'val'
                      var: val
                      offset: 0
                      size: 27
        then: 
          FuncExpr:
            source: 'neg<M3>(val)'
            name: neg_27
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 27
        else:
          SliceExpr:
            source: 'val'
            var: val
            offset: 0
            size: 27
# 
# func T2 as<T2>(T2 val) {
#   return val
# }
  as_54:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 54
        fields:
          quotient: 
            size: '27'
            offset: '0'
          remainder: 
            size: '27'
            offset: '27'
    params:
      - 
        argName: val
        size: 54
        type: 
          ConstTypeName:
            typeName: T2
            size: 54
            fields:
              quotient: 
                size: '27'
                offset: '0'
              remainder: 
                size: '27'
                offset: '27'
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 54
# 
# func M3 sub<M3>(M3 lhs, M3 rhs) {
#   sum = fullAdd<M3>(lhs, neg<M3>(rhs), 0)
#   return sum.value
# }
  sub_27:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 27
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<M3>(lhs, neg<M3>(rhs), 0)'
          name: fullAdd_27
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 27
          - 
            FuncExpr:
              source: 'neg<M3>(rhs)'
              name: neg_27
              args:
              - 
                SliceExpr:
                  source: 'rhs'
                  var: rhs
                  offset: 0
                  size: 27
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
    return: 
    # sum.value
      SliceExpr:
        source: 'sum.value'
        var: sum
        offset: 0
        size: 27
        fields: 
          - value
# 
# func M3 add<M3>(M3 lhs, M3 rhs) {
#   sum = fullAdd<M3>(lhs, rhs, 0)
#   return sum.value
# }
  add_27:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 27
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: M3
            size: 27
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<M3>(lhs, rhs, 0)'
          name: fullAdd_27
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 27
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
    return: 
    # sum.value
      SliceExpr:
        source: 'sum.value'
        var: sum
        offset: 0
        size: 27
        fields: 
          - value
# 
# func Tryte sub<Tryte>(Tryte lhs, Tryte rhs) {
#   sum = fullAdd<Tryte>(lhs, neg<Tryte>(rhs), 0)
#   return sum.value
# }
  sub_3:
    returnType: 
      ConstTypeName:
        typeName: Tryte
        size: 3
    params:
      - 
        argName: lhs
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
      - 
        argName: rhs
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<Tryte>(lhs, neg<Tryte>(rhs), 0)'
          name: fullAdd_3
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 3
          - 
            FuncExpr:
              source: 'neg<Tryte>(rhs)'
              name: neg_3
              args:
              - 
                SliceExpr:
                  source: 'rhs'
                  var: rhs
                  offset: 0
                  size: 3
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
    return: 
    # sum.value
      SliceExpr:
        source: 'sum.value'
        var: sum
        offset: 0
        size: 3
        fields: 
          - value
# 
# func Tryte incr<Tryte>(Tryte val) {
#   halfSum = halfAdd<Tryte>(val, 1)
#   return halfSum.value
# }
  incr_3:
    returnType: 
      ConstTypeName:
        typeName: Tryte
        size: 3
    params:
      - 
        argName: val
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
    assigns: 
      halfSum:
        FuncExpr:
          source: 'halfAdd<Tryte>(val, 1)'
          name: halfAdd_3
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 3
          - 
            ValueExpr:
                value: '1'
                trits: '1'
                trytes: 'A'
    return: 
    # halfSum.value
      SliceExpr:
        source: 'halfSum.value'
        var: halfSum
        offset: 0
        size: 3
        fields: 
          - value
# 
# func Double floatAdd<Double>(Double lhs, Double rhs) {
#   smaller = isLess[cmp<Tiny>(lhs.exponent, rhs.exponent)]
#   lhs0 = smaller ? rhs : lhs
#   rhs0 = smaller ? lhs : rhs
#   return floatAddCheckMantissa<Double>(lhs0, rhs0)
# }
  floatAdd_45:
    returnType: 
      ConstTypeName:
        typeName: Double
        size: 45
        fields:
          mantissa: 
            size: '36'
            offset: '0'
          exponent: 
            size: '9'
            offset: '36'
    params:
      - 
        argName: lhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
      - 
        argName: rhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
    assigns: 
      smaller:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(lhs.exponent, rhs.exponent)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'lhs.exponent'
                    var: lhs
                    offset: 36
                    size: 9
                    fields: 
                      - exponent
                - 
                  SliceExpr:
                    source: 'rhs.exponent'
                    var: rhs
                    offset: 36
                    size: 9
                    fields: 
                      - exponent
      lhs0:
        CondExpr:
          source: 'smaller ? rhs : lhs'
          if: 
            SliceExpr:
              source: 'smaller'
              var: smaller
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 45
          else:
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 45
      rhs0:
        CondExpr:
          source: 'smaller ? lhs : rhs'
          if: 
            SliceExpr:
              source: 'smaller'
              var: smaller
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 45
          else:
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 45
    return: 
    # floatAddCheckMantissa<Double>(lhs0, rhs0)
      FuncExpr:
        source: 'floatAddCheckMantissa<Double>(lhs0, rhs0)'
        name: floatAddCheckMantissa_45
        args:
        - 
          SliceExpr:
            source: 'lhs0'
            var: lhs0
            offset: 0
            size: 45
        - 
          SliceExpr:
            source: 'rhs0'
            var: rhs0
            offset: 0
            size: 45
# 
# func Double floatAddCheckMantissa<Double>(Double lhs, Double rhs) {
#   zero = isZero[sign<Tiny4>(rhs.mantissa)]
#   return zero ? lhs : floatAddShiftMantissa<Double>(lhs, rhs)
# }
  floatAddCheckMantissa_45:
    returnType: 
      ConstTypeName:
        typeName: Double
        size: 45
        fields:
          mantissa: 
            size: '36'
            offset: '0'
          exponent: 
            size: '9'
            offset: '36'
    params:
      - 
        argName: lhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
      - 
        argName: rhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
    assigns: 
      zero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny4>(rhs.mantissa)'
                name: sign_36
                args:
                - 
                  SliceExpr:
                    source: 'rhs.mantissa'
                    var: rhs
                    offset: 0
                    size: 36
                    fields: 
                      - mantissa
    return: 
    # zero ? lhs : floatAddShiftMantissa<Double>(lhs, rhs)
      CondExpr:
        source: 'zero ? lhs : floatAddShiftMantissa<Double>(lhs, rhs)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 45
        else:
          FuncExpr:
            source: 'floatAddShiftMantissa<Double>(lhs, rhs)'
            name: floatAddShiftMantissa_45
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 45
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 45
# 
# func Double floatAddShiftMantissa<Double>(Double lhs, Double rhs) {
#   addValues = equal<Tiny>(lhs.exponent, rhs.exponent)
#   return addValues ? floatAddMantissas<Double>(lhs, rhs) : floatAddDoShiftMantissa<Double>(lhs, rhs)
# }
  floatAddShiftMantissa_45:
    returnType: 
      ConstTypeName:
        typeName: Double
        size: 45
        fields:
          mantissa: 
            size: '36'
            offset: '0'
          exponent: 
            size: '9'
            offset: '36'
    params:
      - 
        argName: lhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
      - 
        argName: rhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
    assigns: 
      addValues:
        FuncExpr:
          source: 'equal<Tiny>(lhs.exponent, rhs.exponent)'
          name: equal_9
          args:
          - 
            SliceExpr:
              source: 'lhs.exponent'
              var: lhs
              offset: 36
              size: 9
              fields: 
                - exponent
          - 
            SliceExpr:
              source: 'rhs.exponent'
              var: rhs
              offset: 36
              size: 9
              fields: 
                - exponent
    return: 
    # addValues ? floatAddMantissas<Double>(lhs, rhs) : floatAddDoShiftMantissa<Double>(lhs, rhs)
      CondExpr:
        source: 'addValues ? floatAddMantissas<Double>(lhs, rhs) : floatAddDoShiftMantissa<Double>(lhs, rhs)'
        if: 
          SliceExpr:
            source: 'addValues'
            var: addValues
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'floatAddMantissas<Double>(lhs, rhs)'
            name: floatAddMantissas_45
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 45
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 45
        else:
          FuncExpr:
            source: 'floatAddDoShiftMantissa<Double>(lhs, rhs)'
            name: floatAddDoShiftMantissa_45
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 45
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 45
# 
# func Double floatAddDoShiftMantissa<Double>(Double lhs, Double rhs) {
#   shifted = Double{
#     mantissa = lshift<Tiny4>(rhs.mantissa)
#     exponent = incr<Tiny>(rhs.exponent)
#   }
#   return floatAddCheckMantissa<Double>(lhs, shifted)
# }
  floatAddDoShiftMantissa_45:
    returnType: 
      ConstTypeName:
        typeName: Double
        size: 45
        fields:
          mantissa: 
            size: '36'
            offset: '0'
          exponent: 
            size: '9'
            offset: '36'
    params:
      - 
        argName: lhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
      - 
        argName: rhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
    assigns: 
      shifted:
        TypeExpr:
          source: 'Double{ /   mantissa = lshift<Tiny4>(rhs.mantissa) /   exponent = incr<Tiny>(rhs.exponent) / }'
          type: 
            ConstTypeName:
              typeName: Double
              size: 45
              fields:
                mantissa: 
                  size: '36'
                  offset: '0'
                exponent: 
                  size: '9'
                  offset: '36'
          fieldValues: 
            mantissa:
              FuncExpr:
                source: 'lshift<Tiny4>(rhs.mantissa)'
                name: lshift_36
                args:
                - 
                  SliceExpr:
                    source: 'rhs.mantissa'
                    var: rhs
                    offset: 0
                    size: 36
                    fields: 
                      - mantissa
            exponent:
              FuncExpr:
                source: 'incr<Tiny>(rhs.exponent)'
                name: incr_9
                args:
                - 
                  SliceExpr:
                    source: 'rhs.exponent'
                    var: rhs
                    offset: 36
                    size: 9
                    fields: 
                      - exponent
    return: 
    # floatAddCheckMantissa<Double>(lhs, shifted)
      FuncExpr:
        source: 'floatAddCheckMantissa<Double>(lhs, shifted)'
        name: floatAddCheckMantissa_45
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 45
        - 
          SliceExpr:
            source: 'shifted'
            var: shifted
            offset: 0
            size: 45
# 
# func Double floatAddMantissas<Double>(Double lhs, Double rhs) {
#   sum = fullAdd<Tiny4>(lhs.mantissa, rhs.mantissa, 0)
#   carry = notZero[sum[Tiny4]]
#   ret0 = Double{
#     mantissa = carry ? sum[1 : Tiny4] : null
#     exponent = incr<Tiny>(carry ? lhs.exponent : null)
#   }
#   val = Double{
#     mantissa = not[carry] ? sum[0 : Tiny4] : null
#     exponent = not[carry] ? lhs.exponent : null
#   }
#   zero = isZero[sign<Tiny4>(val.mantissa)]
#   return ret0 | (zero ? 0 : floatAddNormalize<Double>(val))
# }
  floatAddMantissas_45:
    returnType: 
      ConstTypeName:
        typeName: Double
        size: 45
        fields:
          mantissa: 
            size: '36'
            offset: '0'
          exponent: 
            size: '9'
            offset: '36'
    params:
      - 
        argName: lhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
      - 
        argName: rhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<Tiny4>(lhs.mantissa, rhs.mantissa, 0)'
          name: fullAdd_36
          args:
          - 
            SliceExpr:
              source: 'lhs.mantissa'
              var: lhs
              offset: 0
              size: 36
              fields: 
                - mantissa
          - 
            SliceExpr:
              source: 'rhs.mantissa'
              var: rhs
              offset: 0
              size: 36
              fields: 
                - mantissa
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      carry:
        LutExpr:
          name: notZero
          args: 
            - 
              SliceExpr:
                source: 'sum[Tiny4]'
                var: sum
                offset: 36
                size: 1
                start:
                  ConstTypeName:
                    typeName: Tiny4
                    size: 36
      ret0:
        TypeExpr:
          source: 'Double{ /   mantissa = carry ? sum[1 : Tiny4] : null /   exponent = incr<Tiny>(carry ? lhs.exponent : null) / }'
          type: 
            ConstTypeName:
              typeName: Double
              size: 45
              fields:
                mantissa: 
                  size: '36'
                  offset: '0'
                exponent: 
                  size: '9'
                  offset: '36'
          fieldValues: 
            mantissa:
              CondExpr:
                source: 'carry ? sum[1 : Tiny4] : null'
                if: 
                  SliceExpr:
                    source: 'carry'
                    var: carry
                    offset: 0
                    size: 1
                then: 
                  SliceExpr:
                    source: 'sum[1 : Tiny4]'
                    var: sum
                    offset: 1
                    size: 36
                    start:
                      ConstNumber:
                        value: 1
                    end:
                      ConstTypeName:
                        typeName: Tiny4
                        size: 36
                else:
                  NullExpr: ''
            exponent:
              FuncExpr:
                source: 'incr<Tiny>(carry ? lhs.exponent : null)'
                name: incr_9
                args:
                - 
                  CondExpr:
                    source: 'carry ? lhs.exponent : null'
                    if: 
                      SliceExpr:
                        source: 'carry'
                        var: carry
                        offset: 0
                        size: 1
                    then: 
                      SliceExpr:
                        source: 'lhs.exponent'
                        var: lhs
                        offset: 36
                        size: 9
                        fields: 
                          - exponent
                    else:
                      NullExpr: ''
      val:
        TypeExpr:
          source: 'Double{ /   mantissa = not[carry] ? sum[0 : Tiny4] : null /   exponent = not[carry] ? lhs.exponent : null / }'
          type: 
            ConstTypeName:
              typeName: Double
              size: 45
              fields:
                mantissa: 
                  size: '36'
                  offset: '0'
                exponent: 
                  size: '9'
                  offset: '36'
          fieldValues: 
            mantissa:
              CondExpr:
                source: 'not[carry] ? sum[0 : Tiny4] : null'
                if: 
                  LutExpr:
                    name: not
                    args: 
                      - 
                        SliceExpr:
                          source: 'carry'
                          var: carry
                          offset: 0
                          size: 1
                then: 
                  SliceExpr:
                    source: 'sum[0 : Tiny4]'
                    var: sum
                    offset: 0
                    size: 36
                    start:
                      ConstNumber:
                        value: 0
                    end:
                      ConstTypeName:
                        typeName: Tiny4
                        size: 36
                else:
                  NullExpr: ''
            exponent:
              CondExpr:
                source: 'not[carry] ? lhs.exponent : null'
                if: 
                  LutExpr:
                    name: not
                    args: 
                      - 
                        SliceExpr:
                          source: 'carry'
                          var: carry
                          offset: 0
                          size: 1
                then: 
                  SliceExpr:
                    source: 'lhs.exponent'
                    var: lhs
                    offset: 36
                    size: 9
                    fields: 
                      - exponent
                else:
                  NullExpr: ''
      zero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny4>(val.mantissa)'
                name: sign_36
                args:
                - 
                  SliceExpr:
                    source: 'val.mantissa'
                    var: val
                    offset: 0
                    size: 36
                    fields: 
                      - mantissa
    return: 
    # ret0 | (zero ? 0 : floatAddNormalize<Double>(val))
      MergeExpr:
        source: 'ret0 | (zero ? 0 : floatAddNormalize<Double>(val))'
        lhs: 
          SliceExpr:
            source: 'ret0'
            var: ret0
            offset: 0
            size: 45
        rhs: 
          CondExpr:
            source: 'zero ? 0 : floatAddNormalize<Double>(val)'
            if: 
              SliceExpr:
                source: 'zero'
                var: zero
                offset: 0
                size: 1
            then: 
              ValueExpr:
                  value: '0'
                  trits: '000000000000000000000000000000000000000000000'
                  trytes: '999999999999999'
            else:
              FuncExpr:
                source: 'floatAddNormalize<Double>(val)'
                name: floatAddNormalize_45
                args:
                - 
                  SliceExpr:
                    source: 'val'
                    var: val
                    offset: 0
                    size: 45
# 
# func Double floatAddNormalize<Double>(Double val) {
#   nonZero = notZero[val.mantissa[Tiny4 - 1]]
#   return nonZero ? val : floatAddDoNormalize<Double>(val)
# }
  floatAddNormalize_45:
    returnType: 
      ConstTypeName:
        typeName: Double
        size: 45
        fields:
          mantissa: 
            size: '36'
            offset: '0'
          exponent: 
            size: '9'
            offset: '36'
    params:
      - 
        argName: val
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
    assigns: 
      nonZero:
        LutExpr:
          name: notZero
          args: 
            - 
              SliceExpr:
                source: 'val.mantissa[Tiny4 - 1]'
                var: val
                offset: 35
                size: 1
                fields: 
                  - mantissa
                start:
                  ConstExpr:
                    operator: '-'
                    lhs: 
                      ConstTypeName:
                        typeName: Tiny4
                        size: 36
                    rhs: 
                      ConstNumber:
                        value: 1
    return: 
    # nonZero ? val : floatAddDoNormalize<Double>(val)
      CondExpr:
        source: 'nonZero ? val : floatAddDoNormalize<Double>(val)'
        if: 
          SliceExpr:
            source: 'nonZero'
            var: nonZero
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'val'
            var: val
            offset: 0
            size: 45
        else:
          FuncExpr:
            source: 'floatAddDoNormalize<Double>(val)'
            name: floatAddDoNormalize_45
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 45
# 
# func Double floatAddDoNormalize<Double>(Double val) {
#   val1 = Double{
#     mantissa = rshift<Tiny4>(val.mantissa)
#     exponent = decr<Tiny>(val.exponent)
#   }
#   return floatAddNormalize<Double>(val1)
# }
  floatAddDoNormalize_45:
    returnType: 
      ConstTypeName:
        typeName: Double
        size: 45
        fields:
          mantissa: 
            size: '36'
            offset: '0'
          exponent: 
            size: '9'
            offset: '36'
    params:
      - 
        argName: val
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
    assigns: 
      val1:
        TypeExpr:
          source: 'Double{ /   mantissa = rshift<Tiny4>(val.mantissa) /   exponent = decr<Tiny>(val.exponent) / }'
          type: 
            ConstTypeName:
              typeName: Double
              size: 45
              fields:
                mantissa: 
                  size: '36'
                  offset: '0'
                exponent: 
                  size: '9'
                  offset: '36'
          fieldValues: 
            mantissa:
              FuncExpr:
                source: 'rshift<Tiny4>(val.mantissa)'
                name: rshift_36
                args:
                - 
                  SliceExpr:
                    source: 'val.mantissa'
                    var: val
                    offset: 0
                    size: 36
                    fields: 
                      - mantissa
            exponent:
              FuncExpr:
                source: 'decr<Tiny>(val.exponent)'
                name: decr_9
                args:
                - 
                  SliceExpr:
                    source: 'val.exponent'
                    var: val
                    offset: 36
                    size: 9
                    fields: 
                      - exponent
    return: 
    # floatAddNormalize<Double>(val1)
      FuncExpr:
        source: 'floatAddNormalize<Double>(val1)'
        name: floatAddNormalize_45
        args:
        - 
          SliceExpr:
            source: 'val1'
            var: val1
            offset: 0
            size: 45
# 
# func Double floatDiv<Double>(Double lhs, Double rhs) {
#   zero = or[isZero[sign<Tiny4>(lhs.mantissa)], isZero[sign<Tiny4>(rhs.mantissa)]]
#   return zero ? 0 : floatDivNonZero<Double>(lhs, rhs)
# }
  floatDiv_45:
    returnType: 
      ConstTypeName:
        typeName: Double
        size: 45
        fields:
          mantissa: 
            size: '36'
            offset: '0'
          exponent: 
            size: '9'
            offset: '36'
    params:
      - 
        argName: lhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
      - 
        argName: rhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
    assigns: 
      zero:
        LutExpr:
          name: or
          args: 
            - 
              LutExpr:
                name: isZero
                args: 
                  - 
                    FuncExpr:
                      source: 'sign<Tiny4>(lhs.mantissa)'
                      name: sign_36
                      args:
                      - 
                        SliceExpr:
                          source: 'lhs.mantissa'
                          var: lhs
                          offset: 0
                          size: 36
                          fields: 
                            - mantissa
            - 
              LutExpr:
                name: isZero
                args: 
                  - 
                    FuncExpr:
                      source: 'sign<Tiny4>(rhs.mantissa)'
                      name: sign_36
                      args:
                      - 
                        SliceExpr:
                          source: 'rhs.mantissa'
                          var: rhs
                          offset: 0
                          size: 36
                          fields: 
                            - mantissa
    return: 
    # zero ? 0 : floatDivNonZero<Double>(lhs, rhs)
      CondExpr:
        source: 'zero ? 0 : floatDivNonZero<Double>(lhs, rhs)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000000000000000000000'
              trytes: '999999999999999'
        else:
          FuncExpr:
            source: 'floatDivNonZero<Double>(lhs, rhs)'
            name: floatDivNonZero_45
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 45
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 45
# 
# func Double floatDivNonZero<Double>(Double lhs, Double rhs) {
#   zero = as<M2>(0)
#   quotient = div<M3>(zero & lhs.mantissa, rhs.mantissa & zero)
#   sum = sub<Tiny>(lhs.exponent, rhs.exponent)
#   isNormalized = isZero[quotient[Tiny4 * 2]]
#   normalized = Double{
#     mantissa = quotient[Tiny4 : Tiny4]
#     exponent = sum
#   }
#   corrected = Double{
#     mantissa = quotient[Tiny4 + 1 : Tiny4]
#     exponent = incr<Tiny>(sum)
#   }
#   return isNormalized ? normalized : corrected
# }
  floatDivNonZero_45:
    returnType: 
      ConstTypeName:
        typeName: Double
        size: 45
        fields:
          mantissa: 
            size: '36'
            offset: '0'
          exponent: 
            size: '9'
            offset: '36'
    params:
      - 
        argName: lhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
      - 
        argName: rhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
    assigns: 
      zero:
        FuncExpr:
          source: 'as<M2>(0)'
          name: as_72
          args:
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: '999999999999999999999999'
      quotient:
        FuncExpr:
          source: 'div<M3>(zero & lhs.mantissa, rhs.mantissa & zero)'
          name: div_108
          args:
          - 
            ConcatExpr:
              source: 'zero & lhs.mantissa'
              lhs: 
                SliceExpr:
                  source: 'zero'
                  var: zero
                  offset: 0
                  size: 72
              rhs: 
                SliceExpr:
                  source: 'lhs.mantissa'
                  var: lhs
                  offset: 0
                  size: 36
                  fields: 
                    - mantissa
          - 
            ConcatExpr:
              source: 'rhs.mantissa & zero'
              lhs: 
                SliceExpr:
                  source: 'rhs.mantissa'
                  var: rhs
                  offset: 0
                  size: 36
                  fields: 
                    - mantissa
              rhs: 
                SliceExpr:
                  source: 'zero'
                  var: zero
                  offset: 0
                  size: 72
      sum:
        FuncExpr:
          source: 'sub<Tiny>(lhs.exponent, rhs.exponent)'
          name: sub_9
          args:
          - 
            SliceExpr:
              source: 'lhs.exponent'
              var: lhs
              offset: 36
              size: 9
              fields: 
                - exponent
          - 
            SliceExpr:
              source: 'rhs.exponent'
              var: rhs
              offset: 36
              size: 9
              fields: 
                - exponent
      isNormalized:
        LutExpr:
          name: isZero
          args: 
            - 
              SliceExpr:
                source: 'quotient[Tiny4 * 2]'
                var: quotient
                offset: 72
                size: 1
                start:
                  ConstTerm:
                    operator: '*'
                    lhs: 
                      ConstTypeName:
                        typeName: Tiny4
                        size: 36
                    rhs: 
                      ConstNumber:
                        value: 2
      normalized:
        TypeExpr:
          source: 'Double{ /   mantissa = quotient[Tiny4 : Tiny4] /   exponent = sum / }'
          type: 
            ConstTypeName:
              typeName: Double
              size: 45
              fields:
                mantissa: 
                  size: '36'
                  offset: '0'
                exponent: 
                  size: '9'
                  offset: '36'
          fieldValues: 
            mantissa:
              SliceExpr:
                source: 'quotient[Tiny4 : Tiny4]'
                var: quotient
                offset: 36
                size: 36
                start:
                  ConstTypeName:
                    typeName: Tiny4
                    size: 36
                end:
                  ConstTypeName:
                    typeName: Tiny4
                    size: 36
            exponent:
              SliceExpr:
                source: 'sum'
                var: sum
                offset: 0
                size: 9
      corrected:
        TypeExpr:
          source: 'Double{ /   mantissa = quotient[Tiny4 + 1 : Tiny4] /   exponent = incr<Tiny>(sum) / }'
          type: 
            ConstTypeName:
              typeName: Double
              size: 45
              fields:
                mantissa: 
                  size: '36'
                  offset: '0'
                exponent: 
                  size: '9'
                  offset: '36'
          fieldValues: 
            mantissa:
              SliceExpr:
                source: 'quotient[Tiny4 + 1 : Tiny4]'
                var: quotient
                offset: 37
                size: 36
                start:
                  ConstExpr:
                    operator: '+'
                    lhs: 
                      ConstTypeName:
                        typeName: Tiny4
                        size: 36
                    rhs: 
                      ConstNumber:
                        value: 1
                end:
                  ConstTypeName:
                    typeName: Tiny4
                    size: 36
            exponent:
              FuncExpr:
                source: 'incr<Tiny>(sum)'
                name: incr_9
                args:
                - 
                  SliceExpr:
                    source: 'sum'
                    var: sum
                    offset: 0
                    size: 9
    return: 
    # isNormalized ? normalized : corrected
      CondExpr:
        source: 'isNormalized ? normalized : corrected'
        if: 
          SliceExpr:
            source: 'isNormalized'
            var: isNormalized
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'normalized'
            var: normalized
            offset: 0
            size: 45
        else:
          SliceExpr:
            source: 'corrected'
            var: corrected
            offset: 0
            size: 45
# 
# func Double floatMul<Double>(Double lhs, Double rhs) {
#   lhsZero = isZero[sign<Tiny4>(lhs.mantissa)]
#   rhsZero = isZero[sign<Tiny4>(rhs.mantissa)]
#   return or[lhsZero, rhsZero] ? 0 : floatMulNonZero<Double>(lhs, rhs)
# }
  floatMul_45:
    returnType: 
      ConstTypeName:
        typeName: Double
        size: 45
        fields:
          mantissa: 
            size: '36'
            offset: '0'
          exponent: 
            size: '9'
            offset: '36'
    params:
      - 
        argName: lhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
      - 
        argName: rhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
    assigns: 
      lhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny4>(lhs.mantissa)'
                name: sign_36
                args:
                - 
                  SliceExpr:
                    source: 'lhs.mantissa'
                    var: lhs
                    offset: 0
                    size: 36
                    fields: 
                      - mantissa
      rhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny4>(rhs.mantissa)'
                name: sign_36
                args:
                - 
                  SliceExpr:
                    source: 'rhs.mantissa'
                    var: rhs
                    offset: 0
                    size: 36
                    fields: 
                      - mantissa
    return: 
    # or[lhsZero, rhsZero] ? 0 : floatMulNonZero<Double>(lhs, rhs)
      CondExpr:
        source: 'or[lhsZero, rhsZero] ? 0 : floatMulNonZero<Double>(lhs, rhs)'
        if: 
          LutExpr:
            name: or
            args: 
              - 
                SliceExpr:
                  source: 'lhsZero'
                  var: lhsZero
                  offset: 0
                  size: 1
              - 
                SliceExpr:
                  source: 'rhsZero'
                  var: rhsZero
                  offset: 0
                  size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000000000000000000000'
              trytes: '999999999999999'
        else:
          FuncExpr:
            source: 'floatMulNonZero<Double>(lhs, rhs)'
            name: floatMulNonZero_45
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 45
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 45
# 
# func Double floatMulNonZero<Double>(Double lhs, Double rhs) {
#   product = fullMulNonZero<Tiny4>(lhs.mantissa, rhs.mantissa)
#   sum = add<Tiny>(lhs.exponent, rhs.exponent)
#   return floatMulNormalize<Double>(product, sum)
# }
  floatMulNonZero_45:
    returnType: 
      ConstTypeName:
        typeName: Double
        size: 45
        fields:
          mantissa: 
            size: '36'
            offset: '0'
          exponent: 
            size: '9'
            offset: '36'
    params:
      - 
        argName: lhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
      - 
        argName: rhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
    assigns: 
      product:
        FuncExpr:
          source: 'fullMulNonZero<Tiny4>(lhs.mantissa, rhs.mantissa)'
          name: fullMulNonZero_36
          args:
          - 
            SliceExpr:
              source: 'lhs.mantissa'
              var: lhs
              offset: 0
              size: 36
              fields: 
                - mantissa
          - 
            SliceExpr:
              source: 'rhs.mantissa'
              var: rhs
              offset: 0
              size: 36
              fields: 
                - mantissa
      sum:
        FuncExpr:
          source: 'add<Tiny>(lhs.exponent, rhs.exponent)'
          name: add_9
          args:
          - 
            SliceExpr:
              source: 'lhs.exponent'
              var: lhs
              offset: 36
              size: 9
              fields: 
                - exponent
          - 
            SliceExpr:
              source: 'rhs.exponent'
              var: rhs
              offset: 36
              size: 9
              fields: 
                - exponent
    return: 
    # floatMulNormalize<Double>(product, sum)
      FuncExpr:
        source: 'floatMulNormalize<Double>(product, sum)'
        name: floatMulNormalize_45
        args:
        - 
          SliceExpr:
            source: 'product'
            var: product
            offset: 0
            size: 72
        - 
          SliceExpr:
            source: 'sum'
            var: sum
            offset: 0
            size: 9
# 
# func Double floatMulNormalize<Double>(M2 product, Tiny sum) {
#   isNormalized = notZero[product[M2 - 1]]
#   prod0 = isNormalized ? product : null
#   sum0 = isNormalized ? sum : null
#   prod1 = not[isNormalized] ? 0 & product[0 : M2 - 1] : null
#   sum1 = not[isNormalized] ? sum : null
#   normalized = Double{
#     mantissa = prod0[Tiny4 : Tiny4]
#     exponent = sum0
#   }
#   return normalized | floatMulNormalize<Double>(prod1, decr<Tiny>(sum1))
# }
  floatMulNormalize_45:
    returnType: 
      ConstTypeName:
        typeName: Double
        size: 45
        fields:
          mantissa: 
            size: '36'
            offset: '0'
          exponent: 
            size: '9'
            offset: '36'
    params:
      - 
        argName: product
        size: 72
        type: 
          ConstTypeName:
            typeName: M2
            size: 72
      - 
        argName: sum
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      isNormalized:
        LutExpr:
          name: notZero
          args: 
            - 
              SliceExpr:
                source: 'product[M2 - 1]'
                var: product
                offset: 71
                size: 1
                start:
                  ConstExpr:
                    operator: '-'
                    lhs: 
                      ConstTypeName:
                        typeName: M2
                        size: 72
                    rhs: 
                      ConstNumber:
                        value: 1
      prod0:
        CondExpr:
          source: 'isNormalized ? product : null'
          if: 
            SliceExpr:
              source: 'isNormalized'
              var: isNormalized
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'product'
              var: product
              offset: 0
              size: 72
          else:
            NullExpr: ''
      sum0:
        CondExpr:
          source: 'isNormalized ? sum : null'
          if: 
            SliceExpr:
              source: 'isNormalized'
              var: isNormalized
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'sum'
              var: sum
              offset: 0
              size: 9
          else:
            NullExpr: ''
      prod1:
        CondExpr:
          source: 'not[isNormalized] ? 0 & product[0 : M2 - 1] : null'
          if: 
            LutExpr:
              name: not
              args: 
                - 
                  SliceExpr:
                    source: 'isNormalized'
                    var: isNormalized
                    offset: 0
                    size: 1
          then: 
            ConcatExpr:
              source: '0 & product[0 : M2 - 1]'
              lhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
              rhs: 
                SliceExpr:
                  source: 'product[0 : M2 - 1]'
                  var: product
                  offset: 0
                  size: 71
                  start:
                    ConstNumber:
                      value: 0
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: M2
                          size: 72
                      rhs: 
                        ConstNumber:
                          value: 1
          else:
            NullExpr: ''
      sum1:
        CondExpr:
          source: 'not[isNormalized] ? sum : null'
          if: 
            LutExpr:
              name: not
              args: 
                - 
                  SliceExpr:
                    source: 'isNormalized'
                    var: isNormalized
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'sum'
              var: sum
              offset: 0
              size: 9
          else:
            NullExpr: ''
      normalized:
        TypeExpr:
          source: 'Double{ /   mantissa = prod0[Tiny4 : Tiny4] /   exponent = sum0 / }'
          type: 
            ConstTypeName:
              typeName: Double
              size: 45
              fields:
                mantissa: 
                  size: '36'
                  offset: '0'
                exponent: 
                  size: '9'
                  offset: '36'
          fieldValues: 
            mantissa:
              SliceExpr:
                source: 'prod0[Tiny4 : Tiny4]'
                var: prod0
                offset: 36
                size: 36
                start:
                  ConstTypeName:
                    typeName: Tiny4
                    size: 36
                end:
                  ConstTypeName:
                    typeName: Tiny4
                    size: 36
            exponent:
              SliceExpr:
                source: 'sum0'
                var: sum0
                offset: 0
                size: 9
    return: 
    # normalized | floatMulNormalize<Double>(prod1, decr<Tiny>(sum1))
      MergeExpr:
        source: 'normalized | floatMulNormalize<Double>(prod1, decr<Tiny>(sum1))'
        lhs: 
          SliceExpr:
            source: 'normalized'
            var: normalized
            offset: 0
            size: 45
        rhs: 
          FuncExpr:
            source: 'floatMulNormalize<Double>(prod1, decr<Tiny>(sum1))'
            name: floatMulNormalize_45
            args:
            - 
              SliceExpr:
                source: 'prod1'
                var: prod1
                offset: 0
                size: 72
            - 
              FuncExpr:
                source: 'decr<Tiny>(sum1)'
                name: decr_9
                args:
                - 
                  SliceExpr:
                    source: 'sum1'
                    var: sum1
                    offset: 0
                    size: 9
# 
# func Double floatNeg<Double>(Double val) {
#   return Double{
#     mantissa = neg<Tiny4>(val.mantissa)
#     exponent = val.exponent
#   }
# }
  floatNeg_45:
    returnType: 
      ConstTypeName:
        typeName: Double
        size: 45
        fields:
          mantissa: 
            size: '36'
            offset: '0'
          exponent: 
            size: '9'
            offset: '36'
    params:
      - 
        argName: val
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
    return: 
    # Double{
    #   mantissa = neg<Tiny4>(val.mantissa)
    #   exponent = val.exponent
    # }
      TypeExpr:
        source: 'Double{ /   mantissa = neg<Tiny4>(val.mantissa) /   exponent = val.exponent / }'
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
        fieldValues: 
          mantissa:
            FuncExpr:
              source: 'neg<Tiny4>(val.mantissa)'
              name: neg_36
              args:
              - 
                SliceExpr:
                  source: 'val.mantissa'
                  var: val
                  offset: 0
                  size: 36
                  fields: 
                    - mantissa
          exponent:
            SliceExpr:
              source: 'val.exponent'
              var: val
              offset: 36
              size: 9
              fields: 
                - exponent
# 
# func Double floatSub<Double>(Double lhs, Double rhs) {
#   return floatAdd<Double>(lhs, floatNeg<Double>(rhs))
# }
  floatSub_45:
    returnType: 
      ConstTypeName:
        typeName: Double
        size: 45
        fields:
          mantissa: 
            size: '36'
            offset: '0'
          exponent: 
            size: '9'
            offset: '36'
    params:
      - 
        argName: lhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
      - 
        argName: rhs
        size: 45
        type: 
          ConstTypeName:
            typeName: Double
            size: 45
            fields:
              mantissa: 
                size: '36'
                offset: '0'
              exponent: 
                size: '9'
                offset: '36'
    return: 
    # floatAdd<Double>(lhs, floatNeg<Double>(rhs))
      FuncExpr:
        source: 'floatAdd<Double>(lhs, floatNeg<Double>(rhs))'
        name: floatAdd_45
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 45
        - 
          FuncExpr:
            source: 'floatNeg<Double>(rhs)'
            name: floatNeg_45
            args:
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 45
# 
# func Trit sign<Tiny4>(Tiny4 val) {
#   val0 = sign<A>(val[0 : A])
#   val1 = sign<B>(val[A : B])
#   return sign[val0, val1, 0]
# }
  sign_36:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: val
        size: 36
        type: 
          ConstTypeName:
            typeName: Tiny4
            size: 36
    assigns: 
      val0:
        FuncExpr:
          source: 'sign<A>(val[0 : A])'
          name: sign_18
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 18
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 18
      val1:
        FuncExpr:
          source: 'sign<B>(val[A : B])'
          name: sign_18
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 18
              size: 18
              start:
                ConstTypeName:
                  typeName: A
                  size: 18
              end:
                ConstTypeName:
                  typeName: B
                  size: 18
    return: 
    # sign[val0, val1, 0]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
# 
# func M2 as<M2>(M2 val) {
#   return val
# }
  as_72:
    returnType: 
      ConstTypeName:
        typeName: M2
        size: 72
    params:
      - 
        argName: val
        size: 72
        type: 
          ConstTypeName:
            typeName: M2
            size: 72
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 72
# 
# func M3 div<M3>(M3 lhs, M3 rhs) {
#   ret = divMod<M3>(lhs, rhs)
#   return ret.quotient
# }
  div_108:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 108
    params:
      - 
        argName: lhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: rhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      ret:
        FuncExpr:
          source: 'divMod<M3>(lhs, rhs)'
          name: divMod_108
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 108
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 108
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 108
        fields: 
          - quotient
# 
# func M3 ceilDiv<M3>(M3 lhs, M3 rhs) {
#   ret = ceilDivMod<M3>(lhs, rhs)
#   return ret.quotient
# }
  ceilDiv_108:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 108
    params:
      - 
        argName: lhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: rhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      ret:
        FuncExpr:
          source: 'ceilDivMod<M3>(lhs, rhs)'
          name: ceilDivMod_108
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 108
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 108
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 108
        fields: 
          - quotient
# 
# func M3 floorDiv<M3>(M3 lhs, M3 rhs) {
#   ret = floorDivMod<M3>(lhs, rhs)
#   return ret.quotient
# }
  floorDiv_108:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 108
    params:
      - 
        argName: lhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: rhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      ret:
        FuncExpr:
          source: 'floorDivMod<M3>(lhs, rhs)'
          name: floorDivMod_108
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 108
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 108
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 108
        fields: 
          - quotient
# 
# func M3 roundDiv<M3>(M3 lhs, M3 rhs) {
#   ret = roundDivMod<M3>(lhs, rhs)
#   return ret.quotient
# }
  roundDiv_108:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 108
    params:
      - 
        argName: lhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: rhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      ret:
        FuncExpr:
          source: 'roundDivMod<M3>(lhs, rhs)'
          name: roundDivMod_108
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 108
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 108
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 108
        fields: 
          - quotient
# 
# func T2 divMod<M3>(M3 lhs, M3 rhs) {
#   absLhs = abs<M3>(lhs)
#   absRhs = abs<M3>(rhs)
#   quorem = roundDivModLoop<M3>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   fix = isNegative[sign<M3>(rem)]
#   quo0 = fix ? decr<M3>(quo) : quo
#   rem0 = fix ? add<M3>(rem, absRhs) : rem
#   return fixSign<M3>(lhs, rhs, quo0, rem0)
# }
  divMod_108:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 216
        fields:
          quotient: 
            size: '108'
            offset: '0'
          remainder: 
            size: '108'
            offset: '108'
    params:
      - 
        argName: lhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: rhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<M3>(lhs)'
          name: abs_108
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 108
      absRhs:
        FuncExpr:
          source: 'abs<M3>(rhs)'
          name: abs_108
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 108
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<M3>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_108
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 108
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: '999999999999999999999999999999999999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 108
          - 
            ValueExpr:
                value: '1'
                trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: 'A99999999999999999999999999999999999'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 108
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 108
          size: 108
          fields: 
            - remainder
      fix:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<M3>(rem)'
                name: sign_108
                args:
                - 
                  SliceExpr:
                    source: 'rem'
                    var: rem
                    offset: 0
                    size: 108
      quo0:
        CondExpr:
          source: 'fix ? decr<M3>(quo) : quo'
          if: 
            SliceExpr:
              source: 'fix'
              var: fix
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'decr<M3>(quo)'
              name: decr_108
              args:
              - 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 108
          else:
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 108
      rem0:
        CondExpr:
          source: 'fix ? add<M3>(rem, absRhs) : rem'
          if: 
            SliceExpr:
              source: 'fix'
              var: fix
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'add<M3>(rem, absRhs)'
              name: add_108
              args:
              - 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 108
              - 
                SliceExpr:
                  source: 'absRhs'
                  var: absRhs
                  offset: 0
                  size: 108
          else:
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 108
    return: 
    # fixSign<M3>(lhs, rhs, quo0, rem0)
      FuncExpr:
        source: 'fixSign<M3>(lhs, rhs, quo0, rem0)'
        name: fixSign_108
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 108
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 108
        - 
          SliceExpr:
            source: 'quo0'
            var: quo0
            offset: 0
            size: 108
        - 
          SliceExpr:
            source: 'rem0'
            var: rem0
            offset: 0
            size: 108
# 
# func T2 ceilDivMod<M3>(M3 lhs, M3 rhs) {
#   absLhs = abs<M3>(lhs)
#   absRhs = abs<M3>(rhs)
#   quorem = roundDivModLoop<M3>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   lhsSign = sign<M3>(lhs)
#   rhsSign = sign<M3>(rhs)
#   remSign = sign<M3>(rem)
#   neg = xor[isNegative[lhsSign], isNegative[rhsSign]]
#   up = and[not[neg], isPositive[remSign]]
#   down = and[neg, isNegative[remSign]]
#   none = nor[up, down]
#   quoN0 = none ? quo : null
#   quoN1 = incr<M3>(up ? quo : null)
#   quoN2 = decr<M3>(down ? quo : null)
#   quo0 = quoN0 | quoN1 | quoN2
#   remN0 = none ? rem : null
#   remN1 = sub<M3>(up ? rem : null, absRhs)
#   remN2 = add<M3>(down ? rem : null, absRhs)
#   rem0 = remN0 | remN1 | remN2
#   return fixSign<M3>(lhs, rhs, quo0, rem0)
# }
  ceilDivMod_108:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 216
        fields:
          quotient: 
            size: '108'
            offset: '0'
          remainder: 
            size: '108'
            offset: '108'
    params:
      - 
        argName: lhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: rhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<M3>(lhs)'
          name: abs_108
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 108
      absRhs:
        FuncExpr:
          source: 'abs<M3>(rhs)'
          name: abs_108
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 108
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<M3>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_108
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 108
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: '999999999999999999999999999999999999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 108
          - 
            ValueExpr:
                value: '1'
                trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: 'A99999999999999999999999999999999999'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 108
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 108
          size: 108
          fields: 
            - remainder
      lhsSign:
        FuncExpr:
          source: 'sign<M3>(lhs)'
          name: sign_108
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 108
      rhsSign:
        FuncExpr:
          source: 'sign<M3>(rhs)'
          name: sign_108
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 108
      remSign:
        FuncExpr:
          source: 'sign<M3>(rem)'
          name: sign_108
          args:
          - 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 108
      neg:
        LutExpr:
          name: xor
          args: 
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'lhsSign'
                      var: lhsSign
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'rhsSign'
                      var: rhsSign
                      offset: 0
                      size: 1
      up:
        LutExpr:
          name: and
          args: 
            - 
              LutExpr:
                name: not
                args: 
                  - 
                    SliceExpr:
                      source: 'neg'
                      var: neg
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isPositive
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      down:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'neg'
                var: neg
                offset: 0
                size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      none:
        LutExpr:
          name: nor
          args: 
            - 
              SliceExpr:
                source: 'up'
                var: up
                offset: 0
                size: 1
            - 
              SliceExpr:
                source: 'down'
                var: down
                offset: 0
                size: 1
      quoN0:
        CondExpr:
          source: 'none ? quo : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 108
          else:
            NullExpr: ''
      quoN1:
        FuncExpr:
          source: 'incr<M3>(up ? quo : null)'
          name: incr_108
          args:
          - 
            CondExpr:
              source: 'up ? quo : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 108
              else:
                NullExpr: ''
      quoN2:
        FuncExpr:
          source: 'decr<M3>(down ? quo : null)'
          name: decr_108
          args:
          - 
            CondExpr:
              source: 'down ? quo : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 108
              else:
                NullExpr: ''
      quo0:
        MergeExpr:
          source: 'quoN0 | quoN1 | quoN2'
          lhs: 
            MergeExpr:
              source: 'quoN0 | quoN1'
              lhs: 
                SliceExpr:
                  source: 'quoN0'
                  var: quoN0
                  offset: 0
                  size: 108
              rhs: 
                SliceExpr:
                  source: 'quoN1'
                  var: quoN1
                  offset: 0
                  size: 108
          rhs: 
            SliceExpr:
              source: 'quoN2'
              var: quoN2
              offset: 0
              size: 108
      remN0:
        CondExpr:
          source: 'none ? rem : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 108
          else:
            NullExpr: ''
      remN1:
        FuncExpr:
          source: 'sub<M3>(up ? rem : null, absRhs)'
          name: sub_108
          args:
          - 
            CondExpr:
              source: 'up ? rem : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 108
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 108
      remN2:
        FuncExpr:
          source: 'add<M3>(down ? rem : null, absRhs)'
          name: add_108
          args:
          - 
            CondExpr:
              source: 'down ? rem : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 108
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 108
      rem0:
        MergeExpr:
          source: 'remN0 | remN1 | remN2'
          lhs: 
            MergeExpr:
              source: 'remN0 | remN1'
              lhs: 
                SliceExpr:
                  source: 'remN0'
                  var: remN0
                  offset: 0
                  size: 108
              rhs: 
                SliceExpr:
                  source: 'remN1'
                  var: remN1
                  offset: 0
                  size: 108
          rhs: 
            SliceExpr:
              source: 'remN2'
              var: remN2
              offset: 0
              size: 108
    return: 
    # fixSign<M3>(lhs, rhs, quo0, rem0)
      FuncExpr:
        source: 'fixSign<M3>(lhs, rhs, quo0, rem0)'
        name: fixSign_108
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 108
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 108
        - 
          SliceExpr:
            source: 'quo0'
            var: quo0
            offset: 0
            size: 108
        - 
          SliceExpr:
            source: 'rem0'
            var: rem0
            offset: 0
            size: 108
# 
# func T2 floorDivMod<M3>(M3 lhs, M3 rhs) {
#   absLhs = abs<M3>(lhs)
#   absRhs = abs<M3>(rhs)
#   quorem = roundDivModLoop<M3>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   lhsSign = sign<M3>(lhs)
#   rhsSign = sign<M3>(rhs)
#   remSign = sign<M3>(rem)
#   neg = xor[isNegative[lhsSign], isNegative[rhsSign]]
#   down = and[not[neg], isNegative[remSign]]
#   up = and[neg, isPositive[remSign]]
#   none = nor[up, down]
#   quoN0 = none ? quo : null
#   quoN1 = incr<M3>(up ? quo : null)
#   quoN2 = decr<M3>(down ? quo : null)
#   quo0 = quoN0 | quoN1 | quoN2
#   remN0 = none ? rem : null
#   remN1 = sub<M3>(up ? rem : null, absRhs)
#   remN2 = add<M3>(down ? rem : null, absRhs)
#   rem0 = remN0 | remN1 | remN2
#   return fixSign<M3>(lhs, rhs, quo0, rem0)
# }
  floorDivMod_108:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 216
        fields:
          quotient: 
            size: '108'
            offset: '0'
          remainder: 
            size: '108'
            offset: '108'
    params:
      - 
        argName: lhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: rhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<M3>(lhs)'
          name: abs_108
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 108
      absRhs:
        FuncExpr:
          source: 'abs<M3>(rhs)'
          name: abs_108
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 108
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<M3>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_108
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 108
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: '999999999999999999999999999999999999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 108
          - 
            ValueExpr:
                value: '1'
                trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: 'A99999999999999999999999999999999999'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 108
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 108
          size: 108
          fields: 
            - remainder
      lhsSign:
        FuncExpr:
          source: 'sign<M3>(lhs)'
          name: sign_108
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 108
      rhsSign:
        FuncExpr:
          source: 'sign<M3>(rhs)'
          name: sign_108
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 108
      remSign:
        FuncExpr:
          source: 'sign<M3>(rem)'
          name: sign_108
          args:
          - 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 108
      neg:
        LutExpr:
          name: xor
          args: 
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'lhsSign'
                      var: lhsSign
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'rhsSign'
                      var: rhsSign
                      offset: 0
                      size: 1
      down:
        LutExpr:
          name: and
          args: 
            - 
              LutExpr:
                name: not
                args: 
                  - 
                    SliceExpr:
                      source: 'neg'
                      var: neg
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      up:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'neg'
                var: neg
                offset: 0
                size: 1
            - 
              LutExpr:
                name: isPositive
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      none:
        LutExpr:
          name: nor
          args: 
            - 
              SliceExpr:
                source: 'up'
                var: up
                offset: 0
                size: 1
            - 
              SliceExpr:
                source: 'down'
                var: down
                offset: 0
                size: 1
      quoN0:
        CondExpr:
          source: 'none ? quo : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 108
          else:
            NullExpr: ''
      quoN1:
        FuncExpr:
          source: 'incr<M3>(up ? quo : null)'
          name: incr_108
          args:
          - 
            CondExpr:
              source: 'up ? quo : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 108
              else:
                NullExpr: ''
      quoN2:
        FuncExpr:
          source: 'decr<M3>(down ? quo : null)'
          name: decr_108
          args:
          - 
            CondExpr:
              source: 'down ? quo : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 108
              else:
                NullExpr: ''
      quo0:
        MergeExpr:
          source: 'quoN0 | quoN1 | quoN2'
          lhs: 
            MergeExpr:
              source: 'quoN0 | quoN1'
              lhs: 
                SliceExpr:
                  source: 'quoN0'
                  var: quoN0
                  offset: 0
                  size: 108
              rhs: 
                SliceExpr:
                  source: 'quoN1'
                  var: quoN1
                  offset: 0
                  size: 108
          rhs: 
            SliceExpr:
              source: 'quoN2'
              var: quoN2
              offset: 0
              size: 108
      remN0:
        CondExpr:
          source: 'none ? rem : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 108
          else:
            NullExpr: ''
      remN1:
        FuncExpr:
          source: 'sub<M3>(up ? rem : null, absRhs)'
          name: sub_108
          args:
          - 
            CondExpr:
              source: 'up ? rem : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 108
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 108
      remN2:
        FuncExpr:
          source: 'add<M3>(down ? rem : null, absRhs)'
          name: add_108
          args:
          - 
            CondExpr:
              source: 'down ? rem : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 108
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 108
      rem0:
        MergeExpr:
          source: 'remN0 | remN1 | remN2'
          lhs: 
            MergeExpr:
              source: 'remN0 | remN1'
              lhs: 
                SliceExpr:
                  source: 'remN0'
                  var: remN0
                  offset: 0
                  size: 108
              rhs: 
                SliceExpr:
                  source: 'remN1'
                  var: remN1
                  offset: 0
                  size: 108
          rhs: 
            SliceExpr:
              source: 'remN2'
              var: remN2
              offset: 0
              size: 108
    return: 
    # fixSign<M3>(lhs, rhs, quo0, rem0)
      FuncExpr:
        source: 'fixSign<M3>(lhs, rhs, quo0, rem0)'
        name: fixSign_108
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 108
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 108
        - 
          SliceExpr:
            source: 'quo0'
            var: quo0
            offset: 0
            size: 108
        - 
          SliceExpr:
            source: 'rem0'
            var: rem0
            offset: 0
            size: 108
# 
# func T2 roundDivMod<M3>(M3 lhs, M3 rhs) {
#   absLhs = abs<M3>(lhs)
#   absRhs = abs<M3>(rhs)
#   quorem = roundDivModLoop<M3>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   return fixSign<M3>(lhs, rhs, quo, rem)
# }
  roundDivMod_108:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 216
        fields:
          quotient: 
            size: '108'
            offset: '0'
          remainder: 
            size: '108'
            offset: '108'
    params:
      - 
        argName: lhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: rhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<M3>(lhs)'
          name: abs_108
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 108
      absRhs:
        FuncExpr:
          source: 'abs<M3>(rhs)'
          name: abs_108
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 108
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<M3>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_108
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 108
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: '999999999999999999999999999999999999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 108
          - 
            ValueExpr:
                value: '1'
                trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: 'A99999999999999999999999999999999999'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 108
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 108
          size: 108
          fields: 
            - remainder
    return: 
    # fixSign<M3>(lhs, rhs, quo, rem)
      FuncExpr:
        source: 'fixSign<M3>(lhs, rhs, quo, rem)'
        name: fixSign_108
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 108
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 108
        - 
          SliceExpr:
            source: 'quo'
            var: quo
            offset: 0
            size: 108
        - 
          SliceExpr:
            source: 'rem'
            var: rem
            offset: 0
            size: 108
# 
# func T2 roundDivModLoop<M3>(M3 quo, M3 rem, M3 div, M3 shf) {
#   quorem = roundDivModPass<M3>(quo, rem, div)
#   newShf = rshift<M3>(shf)
#   zero = isZero[sign<M3>(newShf)]
#   quo1 = quorem.quotient
#   rem1 = quorem.remainder
#   return zero ? quorem : roundDivModLoop<M3>(quo1, rem1, div, newShf)
# }
  roundDivModLoop_108:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 216
        fields:
          quotient: 
            size: '108'
            offset: '0'
          remainder: 
            size: '108'
            offset: '108'
    params:
      - 
        argName: quo
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: rem
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: div
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: shf
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      quorem:
        FuncExpr:
          source: 'roundDivModPass<M3>(quo, rem, div)'
          name: roundDivModPass_108
          args:
          - 
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 108
          - 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 108
          - 
            SliceExpr:
              source: 'div'
              var: div
              offset: 0
              size: 108
      newShf:
        FuncExpr:
          source: 'rshift<M3>(shf)'
          name: rshift_108
          args:
          - 
            SliceExpr:
              source: 'shf'
              var: shf
              offset: 0
              size: 108
      zero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<M3>(newShf)'
                name: sign_108
                args:
                - 
                  SliceExpr:
                    source: 'newShf'
                    var: newShf
                    offset: 0
                    size: 108
      quo1:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 108
          fields: 
            - quotient
      rem1:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 108
          size: 108
          fields: 
            - remainder
    return: 
    # zero ? quorem : roundDivModLoop<M3>(quo1, rem1, div, newShf)
      CondExpr:
        source: 'zero ? quorem : roundDivModLoop<M3>(quo1, rem1, div, newShf)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'quorem'
            var: quorem
            offset: 0
            size: 216
        else:
          FuncExpr:
            source: 'roundDivModLoop<M3>(quo1, rem1, div, newShf)'
            name: roundDivModLoop_108
            args:
            - 
              SliceExpr:
                source: 'quo1'
                var: quo1
                offset: 0
                size: 108
            - 
              SliceExpr:
                source: 'rem1'
                var: rem1
                offset: 0
                size: 108
            - 
              SliceExpr:
                source: 'div'
                var: div
                offset: 0
                size: 108
            - 
              SliceExpr:
                source: 'newShf'
                var: newShf
                offset: 0
                size: 108
# 
# func T2 roundDivModPass<M3>(M3 quo, M3 rem, M3 div) {
#   quorem = as<T2>(rshift<T2>(quo & rem))
#   quo0 = quorem.quotient
#   rem0 = quorem.remainder
#   remSign = sign<M3>(rem0)
#   quoSign = sign<M3>(quo0)
#   low = sub<M3>(rem0, div)
#   neg1 = neg<M3>(low)
#   cmp1 = cmp<M3>(neg1, rem0)
#   posRem = isPositive[remSign]
#   posQuo = isPositive[quoSign]
#   test1 = and[posRem, or[isLess[cmp1], and[isZero[cmp1], posQuo]]]
#   high = add<M3>(rem0, div)
#   neg2 = neg<M3>(high)
#   cmp2 = cmp<M3>(neg2, rem0)
#   negRem = isNegative[remSign]
#   negQuo = isNegative[quoSign]
#   test2 = and[negRem, or[isGreater[cmp2], and[isEqual[cmp2], negQuo]]]
#   quorem1 = T2{
#     quotient = incr<M3>(quo0)
#     remainder = low
#   }
#   quorem2 = T2{
#     quotient = decr<M3>(quo0)
#     remainder = high
#   }
#   return test1 ? quorem1 : test2 ? quorem2 : quorem
# }
  roundDivModPass_108:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 216
        fields:
          quotient: 
            size: '108'
            offset: '0'
          remainder: 
            size: '108'
            offset: '108'
    params:
      - 
        argName: quo
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: rem
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: div
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      quorem:
        FuncExpr:
          source: 'as<T2>(rshift<T2>(quo & rem))'
          name: as_216
          args:
          - 
            FuncExpr:
              source: 'rshift<T2>(quo & rem)'
              name: rshift_216
              args:
              - 
                ConcatExpr:
                  source: 'quo & rem'
                  lhs: 
                    SliceExpr:
                      source: 'quo'
                      var: quo
                      offset: 0
                      size: 108
                  rhs: 
                    SliceExpr:
                      source: 'rem'
                      var: rem
                      offset: 0
                      size: 108
      quo0:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 108
          fields: 
            - quotient
      rem0:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 108
          size: 108
          fields: 
            - remainder
      remSign:
        FuncExpr:
          source: 'sign<M3>(rem0)'
          name: sign_108
          args:
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 108
      quoSign:
        FuncExpr:
          source: 'sign<M3>(quo0)'
          name: sign_108
          args:
          - 
            SliceExpr:
              source: 'quo0'
              var: quo0
              offset: 0
              size: 108
      low:
        FuncExpr:
          source: 'sub<M3>(rem0, div)'
          name: sub_108
          args:
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 108
          - 
            SliceExpr:
              source: 'div'
              var: div
              offset: 0
              size: 108
      neg1:
        FuncExpr:
          source: 'neg<M3>(low)'
          name: neg_108
          args:
          - 
            SliceExpr:
              source: 'low'
              var: low
              offset: 0
              size: 108
      cmp1:
        FuncExpr:
          source: 'cmp<M3>(neg1, rem0)'
          name: cmp_108
          args:
          - 
            SliceExpr:
              source: 'neg1'
              var: neg1
              offset: 0
              size: 108
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 108
      posRem:
        LutExpr:
          name: isPositive
          args: 
            - 
              SliceExpr:
                source: 'remSign'
                var: remSign
                offset: 0
                size: 1
      posQuo:
        LutExpr:
          name: isPositive
          args: 
            - 
              SliceExpr:
                source: 'quoSign'
                var: quoSign
                offset: 0
                size: 1
      test1:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'posRem'
                var: posRem
                offset: 0
                size: 1
            - 
              LutExpr:
                name: or
                args: 
                  - 
                    LutExpr:
                      name: isLess
                      args: 
                        - 
                          SliceExpr:
                            source: 'cmp1'
                            var: cmp1
                            offset: 0
                            size: 1
                  - 
                    LutExpr:
                      name: and
                      args: 
                        - 
                          LutExpr:
                            name: isZero
                            args: 
                              - 
                                SliceExpr:
                                  source: 'cmp1'
                                  var: cmp1
                                  offset: 0
                                  size: 1
                        - 
                          SliceExpr:
                            source: 'posQuo'
                            var: posQuo
                            offset: 0
                            size: 1
      high:
        FuncExpr:
          source: 'add<M3>(rem0, div)'
          name: add_108
          args:
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 108
          - 
            SliceExpr:
              source: 'div'
              var: div
              offset: 0
              size: 108
      neg2:
        FuncExpr:
          source: 'neg<M3>(high)'
          name: neg_108
          args:
          - 
            SliceExpr:
              source: 'high'
              var: high
              offset: 0
              size: 108
      cmp2:
        FuncExpr:
          source: 'cmp<M3>(neg2, rem0)'
          name: cmp_108
          args:
          - 
            SliceExpr:
              source: 'neg2'
              var: neg2
              offset: 0
              size: 108
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 108
      negRem:
        LutExpr:
          name: isNegative
          args: 
            - 
              SliceExpr:
                source: 'remSign'
                var: remSign
                offset: 0
                size: 1
      negQuo:
        LutExpr:
          name: isNegative
          args: 
            - 
              SliceExpr:
                source: 'quoSign'
                var: quoSign
                offset: 0
                size: 1
      test2:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'negRem'
                var: negRem
                offset: 0
                size: 1
            - 
              LutExpr:
                name: or
                args: 
                  - 
                    LutExpr:
                      name: isGreater
                      args: 
                        - 
                          SliceExpr:
                            source: 'cmp2'
                            var: cmp2
                            offset: 0
                            size: 1
                  - 
                    LutExpr:
                      name: and
                      args: 
                        - 
                          LutExpr:
                            name: isEqual
                            args: 
                              - 
                                SliceExpr:
                                  source: 'cmp2'
                                  var: cmp2
                                  offset: 0
                                  size: 1
                        - 
                          SliceExpr:
                            source: 'negQuo'
                            var: negQuo
                            offset: 0
                            size: 1
      quorem1:
        TypeExpr:
          source: 'T2{ /   quotient = incr<M3>(quo0) /   remainder = low / }'
          type: 
            ConstTypeName:
              typeName: T2
              size: 216
              fields:
                quotient: 
                  size: '108'
                  offset: '0'
                remainder: 
                  size: '108'
                  offset: '108'
          fieldValues: 
            quotient:
              FuncExpr:
                source: 'incr<M3>(quo0)'
                name: incr_108
                args:
                - 
                  SliceExpr:
                    source: 'quo0'
                    var: quo0
                    offset: 0
                    size: 108
            remainder:
              SliceExpr:
                source: 'low'
                var: low
                offset: 0
                size: 108
      quorem2:
        TypeExpr:
          source: 'T2{ /   quotient = decr<M3>(quo0) /   remainder = high / }'
          type: 
            ConstTypeName:
              typeName: T2
              size: 216
              fields:
                quotient: 
                  size: '108'
                  offset: '0'
                remainder: 
                  size: '108'
                  offset: '108'
          fieldValues: 
            quotient:
              FuncExpr:
                source: 'decr<M3>(quo0)'
                name: decr_108
                args:
                - 
                  SliceExpr:
                    source: 'quo0'
                    var: quo0
                    offset: 0
                    size: 108
            remainder:
              SliceExpr:
                source: 'high'
                var: high
                offset: 0
                size: 108
    return: 
    # test1 ? quorem1 : test2 ? quorem2 : quorem
      CondExpr:
        source: 'test1 ? quorem1 : test2 ? quorem2 : quorem'
        if: 
          SliceExpr:
            source: 'test1'
            var: test1
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'quorem1'
            var: quorem1
            offset: 0
            size: 216
        else:
          CondExpr:
            source: 'test2 ? quorem2 : quorem'
            if: 
              SliceExpr:
                source: 'test2'
                var: test2
                offset: 0
                size: 1
            then: 
              SliceExpr:
                source: 'quorem2'
                var: quorem2
                offset: 0
                size: 216
            else:
              SliceExpr:
                source: 'quorem'
                var: quorem
                offset: 0
                size: 216
# 
# func T2 fixSign<M3>(M3 lhs, M3 rhs, M3 quo, M3 rem) {
#   lhsSign = sign<M3>(lhs)
#   rhsSign = sign<M3>(rhs)
#   negRem = isNegative[lhsSign]
#   negQuo = xor[negRem, isNegative[rhsSign]]
#   quo1 = negQuo ? neg<M3>(quo) : quo
#   rem1 = negRem ? neg<M3>(rem) : rem
#   return T2{
#     quotient = quo1
#     remainder = rem1
#   }
# }
  fixSign_108:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 216
        fields:
          quotient: 
            size: '108'
            offset: '0'
          remainder: 
            size: '108'
            offset: '108'
    params:
      - 
        argName: lhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: rhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: quo
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: rem
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      lhsSign:
        FuncExpr:
          source: 'sign<M3>(lhs)'
          name: sign_108
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 108
      rhsSign:
        FuncExpr:
          source: 'sign<M3>(rhs)'
          name: sign_108
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 108
      negRem:
        LutExpr:
          name: isNegative
          args: 
            - 
              SliceExpr:
                source: 'lhsSign'
                var: lhsSign
                offset: 0
                size: 1
      negQuo:
        LutExpr:
          name: xor
          args: 
            - 
              SliceExpr:
                source: 'negRem'
                var: negRem
                offset: 0
                size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'rhsSign'
                      var: rhsSign
                      offset: 0
                      size: 1
      quo1:
        CondExpr:
          source: 'negQuo ? neg<M3>(quo) : quo'
          if: 
            SliceExpr:
              source: 'negQuo'
              var: negQuo
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'neg<M3>(quo)'
              name: neg_108
              args:
              - 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 108
          else:
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 108
      rem1:
        CondExpr:
          source: 'negRem ? neg<M3>(rem) : rem'
          if: 
            SliceExpr:
              source: 'negRem'
              var: negRem
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'neg<M3>(rem)'
              name: neg_108
              args:
              - 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 108
          else:
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 108
    return: 
    # T2{
    #   quotient = quo1
    #   remainder = rem1
    # }
      TypeExpr:
        source: 'T2{ /   quotient = quo1 /   remainder = rem1 / }'
        type: 
          ConstTypeName:
            typeName: T2
            size: 216
            fields:
              quotient: 
                size: '108'
                offset: '0'
              remainder: 
                size: '108'
                offset: '108'
        fieldValues: 
          quotient:
            SliceExpr:
              source: 'quo1'
              var: quo1
              offset: 0
              size: 108
          remainder:
            SliceExpr:
              source: 'rem1'
              var: rem1
              offset: 0
              size: 108
# 
# func M3 abs<M3>(M3 val) {
#   return isNegative[sign<M3>(val)] ? neg<M3>(val) : val
# }
  abs_108:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 108
    params:
      - 
        argName: val
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    return: 
    # isNegative[sign<M3>(val)] ? neg<M3>(val) : val
      CondExpr:
        source: 'isNegative[sign<M3>(val)] ? neg<M3>(val) : val'
        if: 
          LutExpr:
            name: isNegative
            args: 
              - 
                FuncExpr:
                  source: 'sign<M3>(val)'
                  name: sign_108
                  args:
                  - 
                    SliceExpr:
                      source: 'val'
                      var: val
                      offset: 0
                      size: 108
        then: 
          FuncExpr:
            source: 'neg<M3>(val)'
            name: neg_108
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 108
        else:
          SliceExpr:
            source: 'val'
            var: val
            offset: 0
            size: 108
# 
# func Trit sign<M3>(M3 val) {
#   val0 = sign<A>(val[0 : A])
#   val1 = sign<B>(val[A : B])
#   return sign[val0, val1, 0]
# }
  sign_108:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: val
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      val0:
        FuncExpr:
          source: 'sign<A>(val[0 : A])'
          name: sign_54
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 54
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 54
      val1:
        FuncExpr:
          source: 'sign<B>(val[A : B])'
          name: sign_54
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 54
              size: 54
              start:
                ConstTypeName:
                  typeName: A
                  size: 54
              end:
                ConstTypeName:
                  typeName: B
                  size: 54
    return: 
    # sign[val0, val1, 0]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
# 
# func M3 neg<M3>(M3 val) {
#   val0 = neg<A>(val[0 : A])
#   val1 = neg<B>(val[A : B])
#   return val0 & val1
# }
  neg_108:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 108
    params:
      - 
        argName: val
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      val0:
        FuncExpr:
          source: 'neg<A>(val[0 : A])'
          name: neg_54
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 54
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 54
      val1:
        FuncExpr:
          source: 'neg<B>(val[A : B])'
          name: neg_54
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 54
              size: 54
              start:
                ConstTypeName:
                  typeName: A
                  size: 54
              end:
                ConstTypeName:
                  typeName: B
                  size: 54
    return: 
    # val0 & val1
      ConcatExpr:
        source: 'val0 & val1'
        lhs: 
          SliceExpr:
            source: 'val0'
            var: val0
            offset: 0
            size: 54
        rhs: 
          SliceExpr:
            source: 'val1'
            var: val1
            offset: 0
            size: 54
# 
# func T2 as<T2>(T2 val) {
#   return val
# }
  as_216:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 216
        fields:
          quotient: 
            size: '108'
            offset: '0'
          remainder: 
            size: '108'
            offset: '108'
    params:
      - 
        argName: val
        size: 216
        type: 
          ConstTypeName:
            typeName: T2
            size: 216
            fields:
              quotient: 
                size: '108'
                offset: '0'
              remainder: 
                size: '108'
                offset: '108'
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 216
# 
# func T2 rshift<T2>(T2 val) {
#   return 0 & val[0 : T2 - 1]
# }
  rshift_216:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 216
        fields:
          quotient: 
            size: '108'
            offset: '0'
          remainder: 
            size: '108'
            offset: '108'
    params:
      - 
        argName: val
        size: 216
        type: 
          ConstTypeName:
            typeName: T2
            size: 216
            fields:
              quotient: 
                size: '108'
                offset: '0'
              remainder: 
                size: '108'
                offset: '108'
    return: 
    # 0 & val[0 : T2 - 1]
      ConcatExpr:
        source: '0 & val[0 : T2 - 1]'
        lhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        rhs: 
          SliceExpr:
            source: 'val[0 : T2 - 1]'
            var: val
            offset: 0
            size: 215
            start:
              ConstNumber:
                value: 0
            end:
              ConstExpr:
                operator: '-'
                lhs: 
                  ConstTypeName:
                    typeName: T2
                    size: 216
                    fields:
                      quotient: 
                        size: '108'
                        offset: '0'
                      remainder: 
                        size: '108'
                        offset: '108'
                rhs: 
                  ConstNumber:
                    value: 1
# 
# func M3 sub<M3>(M3 lhs, M3 rhs) {
#   sum = fullAdd<M3>(lhs, neg<M3>(rhs), 0)
#   return sum.value
# }
  sub_108:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 108
    params:
      - 
        argName: lhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: rhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<M3>(lhs, neg<M3>(rhs), 0)'
          name: fullAdd_108
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 108
          - 
            FuncExpr:
              source: 'neg<M3>(rhs)'
              name: neg_108
              args:
              - 
                SliceExpr:
                  source: 'rhs'
                  var: rhs
                  offset: 0
                  size: 108
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
    return: 
    # sum.value
      SliceExpr:
        source: 'sum.value'
        var: sum
        offset: 0
        size: 108
        fields: 
          - value
# 
# func TCarry fullAdd<M3>(M3 lhs, M3 rhs, Carry carry) {
#   add0 = fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)
#   add1 = fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)
#   return add0.value & add1
# }
  fullAdd_108:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 109
        fields:
          value: 
            size: '108'
            offset: '0'
          carry: 
            size: '1'
            offset: '108'
    params:
      - 
        argName: lhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: rhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)'
          name: fullAdd_54
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 54
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 54
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 54
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 54
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)'
          name: fullAdd_54
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 54
              size: 54
              start:
                ConstTypeName:
                  typeName: A
                  size: 54
              end:
                ConstTypeName:
                  typeName: B
                  size: 54
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 54
              size: 54
              start:
                ConstTypeName:
                  typeName: A
                  size: 54
              end:
                ConstTypeName:
                  typeName: B
                  size: 54
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 54
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1
      ConcatExpr:
        source: 'add0.value & add1'
        lhs: 
          SliceExpr:
            source: 'add0.value'
            var: add0
            offset: 0
            size: 54
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'add1'
            var: add1
            offset: 0
            size: 55
# 
# func Trit cmp<M3>(M3 lhs, M3 rhs) {
#   val0 = cmp<A>(lhs[0 : A], rhs[0 : A])
#   val1 = cmp<B>(lhs[A : B], rhs[A : B])
#   return sign[val0, val1, 0]
# }
  cmp_108:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: lhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: rhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      val0:
        FuncExpr:
          source: 'cmp<A>(lhs[0 : A], rhs[0 : A])'
          name: cmp_54
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 54
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 54
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 54
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 54
      val1:
        FuncExpr:
          source: 'cmp<B>(lhs[A : B], rhs[A : B])'
          name: cmp_54
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 54
              size: 54
              start:
                ConstTypeName:
                  typeName: A
                  size: 54
              end:
                ConstTypeName:
                  typeName: B
                  size: 54
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 54
              size: 54
              start:
                ConstTypeName:
                  typeName: A
                  size: 54
              end:
                ConstTypeName:
                  typeName: B
                  size: 54
    return: 
    # sign[val0, val1, 0]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
# 
# func M3 add<M3>(M3 lhs, M3 rhs) {
#   sum = fullAdd<M3>(lhs, rhs, 0)
#   return sum.value
# }
  add_108:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 108
    params:
      - 
        argName: lhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: rhs
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<M3>(lhs, rhs, 0)'
          name: fullAdd_108
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 108
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 108
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
    return: 
    # sum.value
      SliceExpr:
        source: 'sum.value'
        var: sum
        offset: 0
        size: 108
        fields: 
          - value
# 
# func M3 incr<M3>(M3 val) {
#   halfSum = halfAdd<M3>(val, 1)
#   return halfSum.value
# }
  incr_108:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 108
    params:
      - 
        argName: val
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      halfSum:
        FuncExpr:
          source: 'halfAdd<M3>(val, 1)'
          name: halfAdd_108
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 108
          - 
            ValueExpr:
                value: '1'
                trits: '1'
                trytes: 'A'
    return: 
    # halfSum.value
      SliceExpr:
        source: 'halfSum.value'
        var: halfSum
        offset: 0
        size: 108
        fields: 
          - value
# 
# func TCarry halfAdd<M3>(M3 val, Carry carry) {
#   add0 = halfAdd<A>(val[0 : A], carry)
#   add1 = halfAdd<B>(val[A : B], add0.carry)
#   return add0.value & add1
# }
  halfAdd_108:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 109
        fields:
          value: 
            size: '108'
            offset: '0'
          carry: 
            size: '1'
            offset: '108'
    params:
      - 
        argName: val
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'halfAdd<A>(val[0 : A], carry)'
          name: halfAdd_54
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 54
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 54
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'halfAdd<B>(val[A : B], add0.carry)'
          name: halfAdd_54
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 54
              size: 54
              start:
                ConstTypeName:
                  typeName: A
                  size: 54
              end:
                ConstTypeName:
                  typeName: B
                  size: 54
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 54
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1
      ConcatExpr:
        source: 'add0.value & add1'
        lhs: 
          SliceExpr:
            source: 'add0.value'
            var: add0
            offset: 0
            size: 54
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'add1'
            var: add1
            offset: 0
            size: 55
# 
# func M3 decr<M3>(M3 val) {
#   halfSum = halfAdd<M3>(val, -)
#   return halfSum.value
# }
  decr_108:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 108
    params:
      - 
        argName: val
        size: 108
        type: 
          ConstTypeName:
            typeName: M3
            size: 108
    assigns: 
      halfSum:
        FuncExpr:
          source: 'halfAdd<M3>(val, -)'
          name: halfAdd_108
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 108
          - 
            ValueExpr:
                value: '-'
                trits: '-'
                trytes: 'Z'
    return: 
    # halfSum.value
      SliceExpr:
        source: 'halfSum.value'
        var: halfSum
        offset: 0
        size: 108
        fields: 
          - value
# 
# func HugeFloat floatAdd<HugeFloat>(HugeFloat lhs, HugeFloat rhs) {
#   smaller = isLess[cmp<Tiny2>(lhs.exponent, rhs.exponent)]
#   lhs0 = smaller ? rhs : lhs
#   rhs0 = smaller ? lhs : rhs
#   return floatAddCheckMantissa<HugeFloat>(lhs0, rhs0)
# }
  floatAdd_72:
    returnType: 
      ConstTypeName:
        typeName: HugeFloat
        size: 72
        fields:
          mantissa: 
            size: '54'
            offset: '0'
          exponent: 
            size: '18'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
      - 
        argName: rhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
    assigns: 
      smaller:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny2>(lhs.exponent, rhs.exponent)'
                name: cmp_18
                args:
                - 
                  SliceExpr:
                    source: 'lhs.exponent'
                    var: lhs
                    offset: 54
                    size: 18
                    fields: 
                      - exponent
                - 
                  SliceExpr:
                    source: 'rhs.exponent'
                    var: rhs
                    offset: 54
                    size: 18
                    fields: 
                      - exponent
      lhs0:
        CondExpr:
          source: 'smaller ? rhs : lhs'
          if: 
            SliceExpr:
              source: 'smaller'
              var: smaller
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 72
          else:
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 72
      rhs0:
        CondExpr:
          source: 'smaller ? lhs : rhs'
          if: 
            SliceExpr:
              source: 'smaller'
              var: smaller
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 72
          else:
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 72
    return: 
    # floatAddCheckMantissa<HugeFloat>(lhs0, rhs0)
      FuncExpr:
        source: 'floatAddCheckMantissa<HugeFloat>(lhs0, rhs0)'
        name: floatAddCheckMantissa_72
        args:
        - 
          SliceExpr:
            source: 'lhs0'
            var: lhs0
            offset: 0
            size: 72
        - 
          SliceExpr:
            source: 'rhs0'
            var: rhs0
            offset: 0
            size: 72
# 
# func HugeFloat floatAddCheckMantissa<HugeFloat>(HugeFloat lhs, HugeFloat rhs) {
#   zero = isZero[sign<Int2>(rhs.mantissa)]
#   return zero ? lhs : floatAddShiftMantissa<HugeFloat>(lhs, rhs)
# }
  floatAddCheckMantissa_72:
    returnType: 
      ConstTypeName:
        typeName: HugeFloat
        size: 72
        fields:
          mantissa: 
            size: '54'
            offset: '0'
          exponent: 
            size: '18'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
      - 
        argName: rhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
    assigns: 
      zero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Int2>(rhs.mantissa)'
                name: sign_54
                args:
                - 
                  SliceExpr:
                    source: 'rhs.mantissa'
                    var: rhs
                    offset: 0
                    size: 54
                    fields: 
                      - mantissa
    return: 
    # zero ? lhs : floatAddShiftMantissa<HugeFloat>(lhs, rhs)
      CondExpr:
        source: 'zero ? lhs : floatAddShiftMantissa<HugeFloat>(lhs, rhs)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 72
        else:
          FuncExpr:
            source: 'floatAddShiftMantissa<HugeFloat>(lhs, rhs)'
            name: floatAddShiftMantissa_72
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 72
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 72
# 
# func HugeFloat floatAddShiftMantissa<HugeFloat>(HugeFloat lhs, HugeFloat rhs) {
#   addValues = equal<Tiny2>(lhs.exponent, rhs.exponent)
#   return addValues ? floatAddMantissas<HugeFloat>(lhs, rhs) : floatAddDoShiftMantissa<HugeFloat>(lhs, rhs)
# }
  floatAddShiftMantissa_72:
    returnType: 
      ConstTypeName:
        typeName: HugeFloat
        size: 72
        fields:
          mantissa: 
            size: '54'
            offset: '0'
          exponent: 
            size: '18'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
      - 
        argName: rhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
    assigns: 
      addValues:
        FuncExpr:
          source: 'equal<Tiny2>(lhs.exponent, rhs.exponent)'
          name: equal_18
          args:
          - 
            SliceExpr:
              source: 'lhs.exponent'
              var: lhs
              offset: 54
              size: 18
              fields: 
                - exponent
          - 
            SliceExpr:
              source: 'rhs.exponent'
              var: rhs
              offset: 54
              size: 18
              fields: 
                - exponent
    return: 
    # addValues ? floatAddMantissas<HugeFloat>(lhs, rhs) : floatAddDoShiftMantissa<HugeFloat>(lhs, rhs)
      CondExpr:
        source: 'addValues ? floatAddMantissas<HugeFloat>(lhs, rhs) : floatAddDoShiftMantissa<HugeFloat>(lhs, rhs)'
        if: 
          SliceExpr:
            source: 'addValues'
            var: addValues
            offset: 0
            size: 1
        then: 
          FuncExpr:
            source: 'floatAddMantissas<HugeFloat>(lhs, rhs)'
            name: floatAddMantissas_72
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 72
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 72
        else:
          FuncExpr:
            source: 'floatAddDoShiftMantissa<HugeFloat>(lhs, rhs)'
            name: floatAddDoShiftMantissa_72
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 72
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 72
# 
# func HugeFloat floatAddDoShiftMantissa<HugeFloat>(HugeFloat lhs, HugeFloat rhs) {
#   shifted = HugeFloat{
#     mantissa = lshift<Int2>(rhs.mantissa)
#     exponent = incr<Tiny2>(rhs.exponent)
#   }
#   return floatAddCheckMantissa<HugeFloat>(lhs, shifted)
# }
  floatAddDoShiftMantissa_72:
    returnType: 
      ConstTypeName:
        typeName: HugeFloat
        size: 72
        fields:
          mantissa: 
            size: '54'
            offset: '0'
          exponent: 
            size: '18'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
      - 
        argName: rhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
    assigns: 
      shifted:
        TypeExpr:
          source: 'HugeFloat{ /   mantissa = lshift<Int2>(rhs.mantissa) /   exponent = incr<Tiny2>(rhs.exponent) / }'
          type: 
            ConstTypeName:
              typeName: HugeFloat
              size: 72
              fields:
                mantissa: 
                  size: '54'
                  offset: '0'
                exponent: 
                  size: '18'
                  offset: '54'
          fieldValues: 
            mantissa:
              FuncExpr:
                source: 'lshift<Int2>(rhs.mantissa)'
                name: lshift_54
                args:
                - 
                  SliceExpr:
                    source: 'rhs.mantissa'
                    var: rhs
                    offset: 0
                    size: 54
                    fields: 
                      - mantissa
            exponent:
              FuncExpr:
                source: 'incr<Tiny2>(rhs.exponent)'
                name: incr_18
                args:
                - 
                  SliceExpr:
                    source: 'rhs.exponent'
                    var: rhs
                    offset: 54
                    size: 18
                    fields: 
                      - exponent
    return: 
    # floatAddCheckMantissa<HugeFloat>(lhs, shifted)
      FuncExpr:
        source: 'floatAddCheckMantissa<HugeFloat>(lhs, shifted)'
        name: floatAddCheckMantissa_72
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 72
        - 
          SliceExpr:
            source: 'shifted'
            var: shifted
            offset: 0
            size: 72
# 
# func HugeFloat floatAddMantissas<HugeFloat>(HugeFloat lhs, HugeFloat rhs) {
#   sum = fullAdd<Int2>(lhs.mantissa, rhs.mantissa, 0)
#   carry = notZero[sum[Int2]]
#   ret0 = HugeFloat{
#     mantissa = carry ? sum[1 : Int2] : null
#     exponent = incr<Tiny2>(carry ? lhs.exponent : null)
#   }
#   val = HugeFloat{
#     mantissa = not[carry] ? sum[0 : Int2] : null
#     exponent = not[carry] ? lhs.exponent : null
#   }
#   zero = isZero[sign<Int2>(val.mantissa)]
#   return ret0 | (zero ? 0 : floatAddNormalize<HugeFloat>(val))
# }
  floatAddMantissas_72:
    returnType: 
      ConstTypeName:
        typeName: HugeFloat
        size: 72
        fields:
          mantissa: 
            size: '54'
            offset: '0'
          exponent: 
            size: '18'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
      - 
        argName: rhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<Int2>(lhs.mantissa, rhs.mantissa, 0)'
          name: fullAdd_54
          args:
          - 
            SliceExpr:
              source: 'lhs.mantissa'
              var: lhs
              offset: 0
              size: 54
              fields: 
                - mantissa
          - 
            SliceExpr:
              source: 'rhs.mantissa'
              var: rhs
              offset: 0
              size: 54
              fields: 
                - mantissa
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      carry:
        LutExpr:
          name: notZero
          args: 
            - 
              SliceExpr:
                source: 'sum[Int2]'
                var: sum
                offset: 54
                size: 1
                start:
                  ConstTypeName:
                    typeName: Int2
                    size: 54
      ret0:
        TypeExpr:
          source: 'HugeFloat{ /   mantissa = carry ? sum[1 : Int2] : null /   exponent = incr<Tiny2>(carry ? lhs.exponent : null) / }'
          type: 
            ConstTypeName:
              typeName: HugeFloat
              size: 72
              fields:
                mantissa: 
                  size: '54'
                  offset: '0'
                exponent: 
                  size: '18'
                  offset: '54'
          fieldValues: 
            mantissa:
              CondExpr:
                source: 'carry ? sum[1 : Int2] : null'
                if: 
                  SliceExpr:
                    source: 'carry'
                    var: carry
                    offset: 0
                    size: 1
                then: 
                  SliceExpr:
                    source: 'sum[1 : Int2]'
                    var: sum
                    offset: 1
                    size: 54
                    start:
                      ConstNumber:
                        value: 1
                    end:
                      ConstTypeName:
                        typeName: Int2
                        size: 54
                else:
                  NullExpr: ''
            exponent:
              FuncExpr:
                source: 'incr<Tiny2>(carry ? lhs.exponent : null)'
                name: incr_18
                args:
                - 
                  CondExpr:
                    source: 'carry ? lhs.exponent : null'
                    if: 
                      SliceExpr:
                        source: 'carry'
                        var: carry
                        offset: 0
                        size: 1
                    then: 
                      SliceExpr:
                        source: 'lhs.exponent'
                        var: lhs
                        offset: 54
                        size: 18
                        fields: 
                          - exponent
                    else:
                      NullExpr: ''
      val:
        TypeExpr:
          source: 'HugeFloat{ /   mantissa = not[carry] ? sum[0 : Int2] : null /   exponent = not[carry] ? lhs.exponent : null / }'
          type: 
            ConstTypeName:
              typeName: HugeFloat
              size: 72
              fields:
                mantissa: 
                  size: '54'
                  offset: '0'
                exponent: 
                  size: '18'
                  offset: '54'
          fieldValues: 
            mantissa:
              CondExpr:
                source: 'not[carry] ? sum[0 : Int2] : null'
                if: 
                  LutExpr:
                    name: not
                    args: 
                      - 
                        SliceExpr:
                          source: 'carry'
                          var: carry
                          offset: 0
                          size: 1
                then: 
                  SliceExpr:
                    source: 'sum[0 : Int2]'
                    var: sum
                    offset: 0
                    size: 54
                    start:
                      ConstNumber:
                        value: 0
                    end:
                      ConstTypeName:
                        typeName: Int2
                        size: 54
                else:
                  NullExpr: ''
            exponent:
              CondExpr:
                source: 'not[carry] ? lhs.exponent : null'
                if: 
                  LutExpr:
                    name: not
                    args: 
                      - 
                        SliceExpr:
                          source: 'carry'
                          var: carry
                          offset: 0
                          size: 1
                then: 
                  SliceExpr:
                    source: 'lhs.exponent'
                    var: lhs
                    offset: 54
                    size: 18
                    fields: 
                      - exponent
                else:
                  NullExpr: ''
      zero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Int2>(val.mantissa)'
                name: sign_54
                args:
                - 
                  SliceExpr:
                    source: 'val.mantissa'
                    var: val
                    offset: 0
                    size: 54
                    fields: 
                      - mantissa
    return: 
    # ret0 | (zero ? 0 : floatAddNormalize<HugeFloat>(val))
      MergeExpr:
        source: 'ret0 | (zero ? 0 : floatAddNormalize<HugeFloat>(val))'
        lhs: 
          SliceExpr:
            source: 'ret0'
            var: ret0
            offset: 0
            size: 72
        rhs: 
          CondExpr:
            source: 'zero ? 0 : floatAddNormalize<HugeFloat>(val)'
            if: 
              SliceExpr:
                source: 'zero'
                var: zero
                offset: 0
                size: 1
            then: 
              ValueExpr:
                  value: '0'
                  trits: '000000000000000000000000000000000000000000000000000000000000000000000000'
                  trytes: '999999999999999999999999'
            else:
              FuncExpr:
                source: 'floatAddNormalize<HugeFloat>(val)'
                name: floatAddNormalize_72
                args:
                - 
                  SliceExpr:
                    source: 'val'
                    var: val
                    offset: 0
                    size: 72
# 
# func HugeFloat floatAddNormalize<HugeFloat>(HugeFloat val) {
#   nonZero = notZero[val.mantissa[Int2 - 1]]
#   return nonZero ? val : floatAddDoNormalize<HugeFloat>(val)
# }
  floatAddNormalize_72:
    returnType: 
      ConstTypeName:
        typeName: HugeFloat
        size: 72
        fields:
          mantissa: 
            size: '54'
            offset: '0'
          exponent: 
            size: '18'
            offset: '54'
    params:
      - 
        argName: val
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
    assigns: 
      nonZero:
        LutExpr:
          name: notZero
          args: 
            - 
              SliceExpr:
                source: 'val.mantissa[Int2 - 1]'
                var: val
                offset: 53
                size: 1
                fields: 
                  - mantissa
                start:
                  ConstExpr:
                    operator: '-'
                    lhs: 
                      ConstTypeName:
                        typeName: Int2
                        size: 54
                    rhs: 
                      ConstNumber:
                        value: 1
    return: 
    # nonZero ? val : floatAddDoNormalize<HugeFloat>(val)
      CondExpr:
        source: 'nonZero ? val : floatAddDoNormalize<HugeFloat>(val)'
        if: 
          SliceExpr:
            source: 'nonZero'
            var: nonZero
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'val'
            var: val
            offset: 0
            size: 72
        else:
          FuncExpr:
            source: 'floatAddDoNormalize<HugeFloat>(val)'
            name: floatAddDoNormalize_72
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 72
# 
# func HugeFloat floatAddDoNormalize<HugeFloat>(HugeFloat val) {
#   val1 = HugeFloat{
#     mantissa = rshift<Int2>(val.mantissa)
#     exponent = decr<Tiny2>(val.exponent)
#   }
#   return floatAddNormalize<HugeFloat>(val1)
# }
  floatAddDoNormalize_72:
    returnType: 
      ConstTypeName:
        typeName: HugeFloat
        size: 72
        fields:
          mantissa: 
            size: '54'
            offset: '0'
          exponent: 
            size: '18'
            offset: '54'
    params:
      - 
        argName: val
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
    assigns: 
      val1:
        TypeExpr:
          source: 'HugeFloat{ /   mantissa = rshift<Int2>(val.mantissa) /   exponent = decr<Tiny2>(val.exponent) / }'
          type: 
            ConstTypeName:
              typeName: HugeFloat
              size: 72
              fields:
                mantissa: 
                  size: '54'
                  offset: '0'
                exponent: 
                  size: '18'
                  offset: '54'
          fieldValues: 
            mantissa:
              FuncExpr:
                source: 'rshift<Int2>(val.mantissa)'
                name: rshift_54
                args:
                - 
                  SliceExpr:
                    source: 'val.mantissa'
                    var: val
                    offset: 0
                    size: 54
                    fields: 
                      - mantissa
            exponent:
              FuncExpr:
                source: 'decr<Tiny2>(val.exponent)'
                name: decr_18
                args:
                - 
                  SliceExpr:
                    source: 'val.exponent'
                    var: val
                    offset: 54
                    size: 18
                    fields: 
                      - exponent
    return: 
    # floatAddNormalize<HugeFloat>(val1)
      FuncExpr:
        source: 'floatAddNormalize<HugeFloat>(val1)'
        name: floatAddNormalize_72
        args:
        - 
          SliceExpr:
            source: 'val1'
            var: val1
            offset: 0
            size: 72
# 
# func HugeFloat floatDiv<HugeFloat>(HugeFloat lhs, HugeFloat rhs) {
#   zero = or[isZero[sign<Int2>(lhs.mantissa)], isZero[sign<Int2>(rhs.mantissa)]]
#   return zero ? 0 : floatDivNonZero<HugeFloat>(lhs, rhs)
# }
  floatDiv_72:
    returnType: 
      ConstTypeName:
        typeName: HugeFloat
        size: 72
        fields:
          mantissa: 
            size: '54'
            offset: '0'
          exponent: 
            size: '18'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
      - 
        argName: rhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
    assigns: 
      zero:
        LutExpr:
          name: or
          args: 
            - 
              LutExpr:
                name: isZero
                args: 
                  - 
                    FuncExpr:
                      source: 'sign<Int2>(lhs.mantissa)'
                      name: sign_54
                      args:
                      - 
                        SliceExpr:
                          source: 'lhs.mantissa'
                          var: lhs
                          offset: 0
                          size: 54
                          fields: 
                            - mantissa
            - 
              LutExpr:
                name: isZero
                args: 
                  - 
                    FuncExpr:
                      source: 'sign<Int2>(rhs.mantissa)'
                      name: sign_54
                      args:
                      - 
                        SliceExpr:
                          source: 'rhs.mantissa'
                          var: rhs
                          offset: 0
                          size: 54
                          fields: 
                            - mantissa
    return: 
    # zero ? 0 : floatDivNonZero<HugeFloat>(lhs, rhs)
      CondExpr:
        source: 'zero ? 0 : floatDivNonZero<HugeFloat>(lhs, rhs)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: '999999999999999999999999'
        else:
          FuncExpr:
            source: 'floatDivNonZero<HugeFloat>(lhs, rhs)'
            name: floatDivNonZero_72
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 72
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 72
# 
# func HugeFloat floatDivNonZero<HugeFloat>(HugeFloat lhs, HugeFloat rhs) {
#   zero = as<M2>(0)
#   quotient = div<M3>(zero & lhs.mantissa, rhs.mantissa & zero)
#   sum = sub<Tiny2>(lhs.exponent, rhs.exponent)
#   isNormalized = isZero[quotient[Int2 * 2]]
#   normalized = HugeFloat{
#     mantissa = quotient[Int2 : Int2]
#     exponent = sum
#   }
#   corrected = HugeFloat{
#     mantissa = quotient[Int2 + 1 : Int2]
#     exponent = incr<Tiny2>(sum)
#   }
#   return isNormalized ? normalized : corrected
# }
  floatDivNonZero_72:
    returnType: 
      ConstTypeName:
        typeName: HugeFloat
        size: 72
        fields:
          mantissa: 
            size: '54'
            offset: '0'
          exponent: 
            size: '18'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
      - 
        argName: rhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
    assigns: 
      zero:
        FuncExpr:
          source: 'as<M2>(0)'
          name: as_108
          args:
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: '999999999999999999999999999999999999'
      quotient:
        FuncExpr:
          source: 'div<M3>(zero & lhs.mantissa, rhs.mantissa & zero)'
          name: div_162
          args:
          - 
            ConcatExpr:
              source: 'zero & lhs.mantissa'
              lhs: 
                SliceExpr:
                  source: 'zero'
                  var: zero
                  offset: 0
                  size: 108
              rhs: 
                SliceExpr:
                  source: 'lhs.mantissa'
                  var: lhs
                  offset: 0
                  size: 54
                  fields: 
                    - mantissa
          - 
            ConcatExpr:
              source: 'rhs.mantissa & zero'
              lhs: 
                SliceExpr:
                  source: 'rhs.mantissa'
                  var: rhs
                  offset: 0
                  size: 54
                  fields: 
                    - mantissa
              rhs: 
                SliceExpr:
                  source: 'zero'
                  var: zero
                  offset: 0
                  size: 108
      sum:
        FuncExpr:
          source: 'sub<Tiny2>(lhs.exponent, rhs.exponent)'
          name: sub_18
          args:
          - 
            SliceExpr:
              source: 'lhs.exponent'
              var: lhs
              offset: 54
              size: 18
              fields: 
                - exponent
          - 
            SliceExpr:
              source: 'rhs.exponent'
              var: rhs
              offset: 54
              size: 18
              fields: 
                - exponent
      isNormalized:
        LutExpr:
          name: isZero
          args: 
            - 
              SliceExpr:
                source: 'quotient[Int2 * 2]'
                var: quotient
                offset: 108
                size: 1
                start:
                  ConstTerm:
                    operator: '*'
                    lhs: 
                      ConstTypeName:
                        typeName: Int2
                        size: 54
                    rhs: 
                      ConstNumber:
                        value: 2
      normalized:
        TypeExpr:
          source: 'HugeFloat{ /   mantissa = quotient[Int2 : Int2] /   exponent = sum / }'
          type: 
            ConstTypeName:
              typeName: HugeFloat
              size: 72
              fields:
                mantissa: 
                  size: '54'
                  offset: '0'
                exponent: 
                  size: '18'
                  offset: '54'
          fieldValues: 
            mantissa:
              SliceExpr:
                source: 'quotient[Int2 : Int2]'
                var: quotient
                offset: 54
                size: 54
                start:
                  ConstTypeName:
                    typeName: Int2
                    size: 54
                end:
                  ConstTypeName:
                    typeName: Int2
                    size: 54
            exponent:
              SliceExpr:
                source: 'sum'
                var: sum
                offset: 0
                size: 18
      corrected:
        TypeExpr:
          source: 'HugeFloat{ /   mantissa = quotient[Int2 + 1 : Int2] /   exponent = incr<Tiny2>(sum) / }'
          type: 
            ConstTypeName:
              typeName: HugeFloat
              size: 72
              fields:
                mantissa: 
                  size: '54'
                  offset: '0'
                exponent: 
                  size: '18'
                  offset: '54'
          fieldValues: 
            mantissa:
              SliceExpr:
                source: 'quotient[Int2 + 1 : Int2]'
                var: quotient
                offset: 55
                size: 54
                start:
                  ConstExpr:
                    operator: '+'
                    lhs: 
                      ConstTypeName:
                        typeName: Int2
                        size: 54
                    rhs: 
                      ConstNumber:
                        value: 1
                end:
                  ConstTypeName:
                    typeName: Int2
                    size: 54
            exponent:
              FuncExpr:
                source: 'incr<Tiny2>(sum)'
                name: incr_18
                args:
                - 
                  SliceExpr:
                    source: 'sum'
                    var: sum
                    offset: 0
                    size: 18
    return: 
    # isNormalized ? normalized : corrected
      CondExpr:
        source: 'isNormalized ? normalized : corrected'
        if: 
          SliceExpr:
            source: 'isNormalized'
            var: isNormalized
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'normalized'
            var: normalized
            offset: 0
            size: 72
        else:
          SliceExpr:
            source: 'corrected'
            var: corrected
            offset: 0
            size: 72
# 
# func HugeFloat floatMul<HugeFloat>(HugeFloat lhs, HugeFloat rhs) {
#   lhsZero = isZero[sign<Int2>(lhs.mantissa)]
#   rhsZero = isZero[sign<Int2>(rhs.mantissa)]
#   return or[lhsZero, rhsZero] ? 0 : floatMulNonZero<HugeFloat>(lhs, rhs)
# }
  floatMul_72:
    returnType: 
      ConstTypeName:
        typeName: HugeFloat
        size: 72
        fields:
          mantissa: 
            size: '54'
            offset: '0'
          exponent: 
            size: '18'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
      - 
        argName: rhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
    assigns: 
      lhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Int2>(lhs.mantissa)'
                name: sign_54
                args:
                - 
                  SliceExpr:
                    source: 'lhs.mantissa'
                    var: lhs
                    offset: 0
                    size: 54
                    fields: 
                      - mantissa
      rhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Int2>(rhs.mantissa)'
                name: sign_54
                args:
                - 
                  SliceExpr:
                    source: 'rhs.mantissa'
                    var: rhs
                    offset: 0
                    size: 54
                    fields: 
                      - mantissa
    return: 
    # or[lhsZero, rhsZero] ? 0 : floatMulNonZero<HugeFloat>(lhs, rhs)
      CondExpr:
        source: 'or[lhsZero, rhsZero] ? 0 : floatMulNonZero<HugeFloat>(lhs, rhs)'
        if: 
          LutExpr:
            name: or
            args: 
              - 
                SliceExpr:
                  source: 'lhsZero'
                  var: lhsZero
                  offset: 0
                  size: 1
              - 
                SliceExpr:
                  source: 'rhsZero'
                  var: rhsZero
                  offset: 0
                  size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: '999999999999999999999999'
        else:
          FuncExpr:
            source: 'floatMulNonZero<HugeFloat>(lhs, rhs)'
            name: floatMulNonZero_72
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 72
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 72
# 
# func HugeFloat floatMulNonZero<HugeFloat>(HugeFloat lhs, HugeFloat rhs) {
#   product = fullMulNonZero<Int2>(lhs.mantissa, rhs.mantissa)
#   sum = add<Tiny2>(lhs.exponent, rhs.exponent)
#   return floatMulNormalize<HugeFloat>(product, sum)
# }
  floatMulNonZero_72:
    returnType: 
      ConstTypeName:
        typeName: HugeFloat
        size: 72
        fields:
          mantissa: 
            size: '54'
            offset: '0'
          exponent: 
            size: '18'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
      - 
        argName: rhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
    assigns: 
      product:
        FuncExpr:
          source: 'fullMulNonZero<Int2>(lhs.mantissa, rhs.mantissa)'
          name: fullMulNonZero_54
          args:
          - 
            SliceExpr:
              source: 'lhs.mantissa'
              var: lhs
              offset: 0
              size: 54
              fields: 
                - mantissa
          - 
            SliceExpr:
              source: 'rhs.mantissa'
              var: rhs
              offset: 0
              size: 54
              fields: 
                - mantissa
      sum:
        FuncExpr:
          source: 'add<Tiny2>(lhs.exponent, rhs.exponent)'
          name: add_18
          args:
          - 
            SliceExpr:
              source: 'lhs.exponent'
              var: lhs
              offset: 54
              size: 18
              fields: 
                - exponent
          - 
            SliceExpr:
              source: 'rhs.exponent'
              var: rhs
              offset: 54
              size: 18
              fields: 
                - exponent
    return: 
    # floatMulNormalize<HugeFloat>(product, sum)
      FuncExpr:
        source: 'floatMulNormalize<HugeFloat>(product, sum)'
        name: floatMulNormalize_72
        args:
        - 
          SliceExpr:
            source: 'product'
            var: product
            offset: 0
            size: 108
        - 
          SliceExpr:
            source: 'sum'
            var: sum
            offset: 0
            size: 18
# 
# func HugeFloat floatMulNormalize<HugeFloat>(M2 product, Tiny2 sum) {
#   isNormalized = notZero[product[M2 - 1]]
#   prod0 = isNormalized ? product : null
#   sum0 = isNormalized ? sum : null
#   prod1 = not[isNormalized] ? 0 & product[0 : M2 - 1] : null
#   sum1 = not[isNormalized] ? sum : null
#   normalized = HugeFloat{
#     mantissa = prod0[Int2 : Int2]
#     exponent = sum0
#   }
#   return normalized | floatMulNormalize<HugeFloat>(prod1, decr<Tiny2>(sum1))
# }
  floatMulNormalize_72:
    returnType: 
      ConstTypeName:
        typeName: HugeFloat
        size: 72
        fields:
          mantissa: 
            size: '54'
            offset: '0'
          exponent: 
            size: '18'
            offset: '54'
    params:
      - 
        argName: product
        size: 108
        type: 
          ConstTypeName:
            typeName: M2
            size: 108
      - 
        argName: sum
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
    assigns: 
      isNormalized:
        LutExpr:
          name: notZero
          args: 
            - 
              SliceExpr:
                source: 'product[M2 - 1]'
                var: product
                offset: 107
                size: 1
                start:
                  ConstExpr:
                    operator: '-'
                    lhs: 
                      ConstTypeName:
                        typeName: M2
                        size: 108
                    rhs: 
                      ConstNumber:
                        value: 1
      prod0:
        CondExpr:
          source: 'isNormalized ? product : null'
          if: 
            SliceExpr:
              source: 'isNormalized'
              var: isNormalized
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'product'
              var: product
              offset: 0
              size: 108
          else:
            NullExpr: ''
      sum0:
        CondExpr:
          source: 'isNormalized ? sum : null'
          if: 
            SliceExpr:
              source: 'isNormalized'
              var: isNormalized
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'sum'
              var: sum
              offset: 0
              size: 18
          else:
            NullExpr: ''
      prod1:
        CondExpr:
          source: 'not[isNormalized] ? 0 & product[0 : M2 - 1] : null'
          if: 
            LutExpr:
              name: not
              args: 
                - 
                  SliceExpr:
                    source: 'isNormalized'
                    var: isNormalized
                    offset: 0
                    size: 1
          then: 
            ConcatExpr:
              source: '0 & product[0 : M2 - 1]'
              lhs: 
                ValueExpr:
                    value: '0'
                    trits: '0'
                    trytes: '9'
              rhs: 
                SliceExpr:
                  source: 'product[0 : M2 - 1]'
                  var: product
                  offset: 0
                  size: 107
                  start:
                    ConstNumber:
                      value: 0
                  end:
                    ConstExpr:
                      operator: '-'
                      lhs: 
                        ConstTypeName:
                          typeName: M2
                          size: 108
                      rhs: 
                        ConstNumber:
                          value: 1
          else:
            NullExpr: ''
      sum1:
        CondExpr:
          source: 'not[isNormalized] ? sum : null'
          if: 
            LutExpr:
              name: not
              args: 
                - 
                  SliceExpr:
                    source: 'isNormalized'
                    var: isNormalized
                    offset: 0
                    size: 1
          then: 
            SliceExpr:
              source: 'sum'
              var: sum
              offset: 0
              size: 18
          else:
            NullExpr: ''
      normalized:
        TypeExpr:
          source: 'HugeFloat{ /   mantissa = prod0[Int2 : Int2] /   exponent = sum0 / }'
          type: 
            ConstTypeName:
              typeName: HugeFloat
              size: 72
              fields:
                mantissa: 
                  size: '54'
                  offset: '0'
                exponent: 
                  size: '18'
                  offset: '54'
          fieldValues: 
            mantissa:
              SliceExpr:
                source: 'prod0[Int2 : Int2]'
                var: prod0
                offset: 54
                size: 54
                start:
                  ConstTypeName:
                    typeName: Int2
                    size: 54
                end:
                  ConstTypeName:
                    typeName: Int2
                    size: 54
            exponent:
              SliceExpr:
                source: 'sum0'
                var: sum0
                offset: 0
                size: 18
    return: 
    # normalized | floatMulNormalize<HugeFloat>(prod1, decr<Tiny2>(sum1))
      MergeExpr:
        source: 'normalized | floatMulNormalize<HugeFloat>(prod1, decr<Tiny2>(sum1))'
        lhs: 
          SliceExpr:
            source: 'normalized'
            var: normalized
            offset: 0
            size: 72
        rhs: 
          FuncExpr:
            source: 'floatMulNormalize<HugeFloat>(prod1, decr<Tiny2>(sum1))'
            name: floatMulNormalize_72
            args:
            - 
              SliceExpr:
                source: 'prod1'
                var: prod1
                offset: 0
                size: 108
            - 
              FuncExpr:
                source: 'decr<Tiny2>(sum1)'
                name: decr_18
                args:
                - 
                  SliceExpr:
                    source: 'sum1'
                    var: sum1
                    offset: 0
                    size: 18
# 
# func HugeFloat floatNeg<HugeFloat>(HugeFloat val) {
#   return HugeFloat{
#     mantissa = neg<Int2>(val.mantissa)
#     exponent = val.exponent
#   }
# }
  floatNeg_72:
    returnType: 
      ConstTypeName:
        typeName: HugeFloat
        size: 72
        fields:
          mantissa: 
            size: '54'
            offset: '0'
          exponent: 
            size: '18'
            offset: '54'
    params:
      - 
        argName: val
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
    return: 
    # HugeFloat{
    #   mantissa = neg<Int2>(val.mantissa)
    #   exponent = val.exponent
    # }
      TypeExpr:
        source: 'HugeFloat{ /   mantissa = neg<Int2>(val.mantissa) /   exponent = val.exponent / }'
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
        fieldValues: 
          mantissa:
            FuncExpr:
              source: 'neg<Int2>(val.mantissa)'
              name: neg_54
              args:
              - 
                SliceExpr:
                  source: 'val.mantissa'
                  var: val
                  offset: 0
                  size: 54
                  fields: 
                    - mantissa
          exponent:
            SliceExpr:
              source: 'val.exponent'
              var: val
              offset: 54
              size: 18
              fields: 
                - exponent
# 
# func HugeFloat floatSub<HugeFloat>(HugeFloat lhs, HugeFloat rhs) {
#   return floatAdd<HugeFloat>(lhs, floatNeg<HugeFloat>(rhs))
# }
  floatSub_72:
    returnType: 
      ConstTypeName:
        typeName: HugeFloat
        size: 72
        fields:
          mantissa: 
            size: '54'
            offset: '0'
          exponent: 
            size: '18'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
      - 
        argName: rhs
        size: 72
        type: 
          ConstTypeName:
            typeName: HugeFloat
            size: 72
            fields:
              mantissa: 
                size: '54'
                offset: '0'
              exponent: 
                size: '18'
                offset: '54'
    return: 
    # floatAdd<HugeFloat>(lhs, floatNeg<HugeFloat>(rhs))
      FuncExpr:
        source: 'floatAdd<HugeFloat>(lhs, floatNeg<HugeFloat>(rhs))'
        name: floatAdd_72
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 72
        - 
          FuncExpr:
            source: 'floatNeg<HugeFloat>(rhs)'
            name: floatNeg_72
            args:
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 72
# 
# func M3 div<M3>(M3 lhs, M3 rhs) {
#   ret = divMod<M3>(lhs, rhs)
#   return ret.quotient
# }
  div_162:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 162
    params:
      - 
        argName: lhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: rhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      ret:
        FuncExpr:
          source: 'divMod<M3>(lhs, rhs)'
          name: divMod_162
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 162
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 162
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 162
        fields: 
          - quotient
# 
# func M3 ceilDiv<M3>(M3 lhs, M3 rhs) {
#   ret = ceilDivMod<M3>(lhs, rhs)
#   return ret.quotient
# }
  ceilDiv_162:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 162
    params:
      - 
        argName: lhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: rhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      ret:
        FuncExpr:
          source: 'ceilDivMod<M3>(lhs, rhs)'
          name: ceilDivMod_162
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 162
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 162
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 162
        fields: 
          - quotient
# 
# func M3 floorDiv<M3>(M3 lhs, M3 rhs) {
#   ret = floorDivMod<M3>(lhs, rhs)
#   return ret.quotient
# }
  floorDiv_162:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 162
    params:
      - 
        argName: lhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: rhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      ret:
        FuncExpr:
          source: 'floorDivMod<M3>(lhs, rhs)'
          name: floorDivMod_162
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 162
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 162
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 162
        fields: 
          - quotient
# 
# func M3 roundDiv<M3>(M3 lhs, M3 rhs) {
#   ret = roundDivMod<M3>(lhs, rhs)
#   return ret.quotient
# }
  roundDiv_162:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 162
    params:
      - 
        argName: lhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: rhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      ret:
        FuncExpr:
          source: 'roundDivMod<M3>(lhs, rhs)'
          name: roundDivMod_162
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 162
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 162
    return: 
    # ret.quotient
      SliceExpr:
        source: 'ret.quotient'
        var: ret
        offset: 0
        size: 162
        fields: 
          - quotient
# 
# func T2 divMod<M3>(M3 lhs, M3 rhs) {
#   absLhs = abs<M3>(lhs)
#   absRhs = abs<M3>(rhs)
#   quorem = roundDivModLoop<M3>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   fix = isNegative[sign<M3>(rem)]
#   quo0 = fix ? decr<M3>(quo) : quo
#   rem0 = fix ? add<M3>(rem, absRhs) : rem
#   return fixSign<M3>(lhs, rhs, quo0, rem0)
# }
  divMod_162:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 324
        fields:
          quotient: 
            size: '162'
            offset: '0'
          remainder: 
            size: '162'
            offset: '162'
    params:
      - 
        argName: lhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: rhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<M3>(lhs)'
          name: abs_162
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 162
      absRhs:
        FuncExpr:
          source: 'abs<M3>(rhs)'
          name: abs_162
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 162
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<M3>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_162
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 162
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: '999999999999999999999999999999999999999999999999999999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 162
          - 
            ValueExpr:
                value: '1'
                trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: 'A99999999999999999999999999999999999999999999999999999'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 162
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 162
          size: 162
          fields: 
            - remainder
      fix:
        LutExpr:
          name: isNegative
          args: 
            - 
              FuncExpr:
                source: 'sign<M3>(rem)'
                name: sign_162
                args:
                - 
                  SliceExpr:
                    source: 'rem'
                    var: rem
                    offset: 0
                    size: 162
      quo0:
        CondExpr:
          source: 'fix ? decr<M3>(quo) : quo'
          if: 
            SliceExpr:
              source: 'fix'
              var: fix
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'decr<M3>(quo)'
              name: decr_162
              args:
              - 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 162
          else:
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 162
      rem0:
        CondExpr:
          source: 'fix ? add<M3>(rem, absRhs) : rem'
          if: 
            SliceExpr:
              source: 'fix'
              var: fix
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'add<M3>(rem, absRhs)'
              name: add_162
              args:
              - 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 162
              - 
                SliceExpr:
                  source: 'absRhs'
                  var: absRhs
                  offset: 0
                  size: 162
          else:
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 162
    return: 
    # fixSign<M3>(lhs, rhs, quo0, rem0)
      FuncExpr:
        source: 'fixSign<M3>(lhs, rhs, quo0, rem0)'
        name: fixSign_162
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 162
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 162
        - 
          SliceExpr:
            source: 'quo0'
            var: quo0
            offset: 0
            size: 162
        - 
          SliceExpr:
            source: 'rem0'
            var: rem0
            offset: 0
            size: 162
# 
# func T2 ceilDivMod<M3>(M3 lhs, M3 rhs) {
#   absLhs = abs<M3>(lhs)
#   absRhs = abs<M3>(rhs)
#   quorem = roundDivModLoop<M3>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   lhsSign = sign<M3>(lhs)
#   rhsSign = sign<M3>(rhs)
#   remSign = sign<M3>(rem)
#   neg = xor[isNegative[lhsSign], isNegative[rhsSign]]
#   up = and[not[neg], isPositive[remSign]]
#   down = and[neg, isNegative[remSign]]
#   none = nor[up, down]
#   quoN0 = none ? quo : null
#   quoN1 = incr<M3>(up ? quo : null)
#   quoN2 = decr<M3>(down ? quo : null)
#   quo0 = quoN0 | quoN1 | quoN2
#   remN0 = none ? rem : null
#   remN1 = sub<M3>(up ? rem : null, absRhs)
#   remN2 = add<M3>(down ? rem : null, absRhs)
#   rem0 = remN0 | remN1 | remN2
#   return fixSign<M3>(lhs, rhs, quo0, rem0)
# }
  ceilDivMod_162:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 324
        fields:
          quotient: 
            size: '162'
            offset: '0'
          remainder: 
            size: '162'
            offset: '162'
    params:
      - 
        argName: lhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: rhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<M3>(lhs)'
          name: abs_162
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 162
      absRhs:
        FuncExpr:
          source: 'abs<M3>(rhs)'
          name: abs_162
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 162
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<M3>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_162
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 162
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: '999999999999999999999999999999999999999999999999999999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 162
          - 
            ValueExpr:
                value: '1'
                trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: 'A99999999999999999999999999999999999999999999999999999'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 162
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 162
          size: 162
          fields: 
            - remainder
      lhsSign:
        FuncExpr:
          source: 'sign<M3>(lhs)'
          name: sign_162
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 162
      rhsSign:
        FuncExpr:
          source: 'sign<M3>(rhs)'
          name: sign_162
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 162
      remSign:
        FuncExpr:
          source: 'sign<M3>(rem)'
          name: sign_162
          args:
          - 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 162
      neg:
        LutExpr:
          name: xor
          args: 
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'lhsSign'
                      var: lhsSign
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'rhsSign'
                      var: rhsSign
                      offset: 0
                      size: 1
      up:
        LutExpr:
          name: and
          args: 
            - 
              LutExpr:
                name: not
                args: 
                  - 
                    SliceExpr:
                      source: 'neg'
                      var: neg
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isPositive
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      down:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'neg'
                var: neg
                offset: 0
                size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      none:
        LutExpr:
          name: nor
          args: 
            - 
              SliceExpr:
                source: 'up'
                var: up
                offset: 0
                size: 1
            - 
              SliceExpr:
                source: 'down'
                var: down
                offset: 0
                size: 1
      quoN0:
        CondExpr:
          source: 'none ? quo : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 162
          else:
            NullExpr: ''
      quoN1:
        FuncExpr:
          source: 'incr<M3>(up ? quo : null)'
          name: incr_162
          args:
          - 
            CondExpr:
              source: 'up ? quo : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 162
              else:
                NullExpr: ''
      quoN2:
        FuncExpr:
          source: 'decr<M3>(down ? quo : null)'
          name: decr_162
          args:
          - 
            CondExpr:
              source: 'down ? quo : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 162
              else:
                NullExpr: ''
      quo0:
        MergeExpr:
          source: 'quoN0 | quoN1 | quoN2'
          lhs: 
            MergeExpr:
              source: 'quoN0 | quoN1'
              lhs: 
                SliceExpr:
                  source: 'quoN0'
                  var: quoN0
                  offset: 0
                  size: 162
              rhs: 
                SliceExpr:
                  source: 'quoN1'
                  var: quoN1
                  offset: 0
                  size: 162
          rhs: 
            SliceExpr:
              source: 'quoN2'
              var: quoN2
              offset: 0
              size: 162
      remN0:
        CondExpr:
          source: 'none ? rem : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 162
          else:
            NullExpr: ''
      remN1:
        FuncExpr:
          source: 'sub<M3>(up ? rem : null, absRhs)'
          name: sub_162
          args:
          - 
            CondExpr:
              source: 'up ? rem : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 162
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 162
      remN2:
        FuncExpr:
          source: 'add<M3>(down ? rem : null, absRhs)'
          name: add_162
          args:
          - 
            CondExpr:
              source: 'down ? rem : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 162
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 162
      rem0:
        MergeExpr:
          source: 'remN0 | remN1 | remN2'
          lhs: 
            MergeExpr:
              source: 'remN0 | remN1'
              lhs: 
                SliceExpr:
                  source: 'remN0'
                  var: remN0
                  offset: 0
                  size: 162
              rhs: 
                SliceExpr:
                  source: 'remN1'
                  var: remN1
                  offset: 0
                  size: 162
          rhs: 
            SliceExpr:
              source: 'remN2'
              var: remN2
              offset: 0
              size: 162
    return: 
    # fixSign<M3>(lhs, rhs, quo0, rem0)
      FuncExpr:
        source: 'fixSign<M3>(lhs, rhs, quo0, rem0)'
        name: fixSign_162
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 162
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 162
        - 
          SliceExpr:
            source: 'quo0'
            var: quo0
            offset: 0
            size: 162
        - 
          SliceExpr:
            source: 'rem0'
            var: rem0
            offset: 0
            size: 162
# 
# func T2 floorDivMod<M3>(M3 lhs, M3 rhs) {
#   absLhs = abs<M3>(lhs)
#   absRhs = abs<M3>(rhs)
#   quorem = roundDivModLoop<M3>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   lhsSign = sign<M3>(lhs)
#   rhsSign = sign<M3>(rhs)
#   remSign = sign<M3>(rem)
#   neg = xor[isNegative[lhsSign], isNegative[rhsSign]]
#   down = and[not[neg], isNegative[remSign]]
#   up = and[neg, isPositive[remSign]]
#   none = nor[up, down]
#   quoN0 = none ? quo : null
#   quoN1 = incr<M3>(up ? quo : null)
#   quoN2 = decr<M3>(down ? quo : null)
#   quo0 = quoN0 | quoN1 | quoN2
#   remN0 = none ? rem : null
#   remN1 = sub<M3>(up ? rem : null, absRhs)
#   remN2 = add<M3>(down ? rem : null, absRhs)
#   rem0 = remN0 | remN1 | remN2
#   return fixSign<M3>(lhs, rhs, quo0, rem0)
# }
  floorDivMod_162:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 324
        fields:
          quotient: 
            size: '162'
            offset: '0'
          remainder: 
            size: '162'
            offset: '162'
    params:
      - 
        argName: lhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: rhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<M3>(lhs)'
          name: abs_162
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 162
      absRhs:
        FuncExpr:
          source: 'abs<M3>(rhs)'
          name: abs_162
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 162
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<M3>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_162
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 162
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: '999999999999999999999999999999999999999999999999999999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 162
          - 
            ValueExpr:
                value: '1'
                trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: 'A99999999999999999999999999999999999999999999999999999'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 162
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 162
          size: 162
          fields: 
            - remainder
      lhsSign:
        FuncExpr:
          source: 'sign<M3>(lhs)'
          name: sign_162
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 162
      rhsSign:
        FuncExpr:
          source: 'sign<M3>(rhs)'
          name: sign_162
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 162
      remSign:
        FuncExpr:
          source: 'sign<M3>(rem)'
          name: sign_162
          args:
          - 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 162
      neg:
        LutExpr:
          name: xor
          args: 
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'lhsSign'
                      var: lhsSign
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'rhsSign'
                      var: rhsSign
                      offset: 0
                      size: 1
      down:
        LutExpr:
          name: and
          args: 
            - 
              LutExpr:
                name: not
                args: 
                  - 
                    SliceExpr:
                      source: 'neg'
                      var: neg
                      offset: 0
                      size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      up:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'neg'
                var: neg
                offset: 0
                size: 1
            - 
              LutExpr:
                name: isPositive
                args: 
                  - 
                    SliceExpr:
                      source: 'remSign'
                      var: remSign
                      offset: 0
                      size: 1
      none:
        LutExpr:
          name: nor
          args: 
            - 
              SliceExpr:
                source: 'up'
                var: up
                offset: 0
                size: 1
            - 
              SliceExpr:
                source: 'down'
                var: down
                offset: 0
                size: 1
      quoN0:
        CondExpr:
          source: 'none ? quo : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 162
          else:
            NullExpr: ''
      quoN1:
        FuncExpr:
          source: 'incr<M3>(up ? quo : null)'
          name: incr_162
          args:
          - 
            CondExpr:
              source: 'up ? quo : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 162
              else:
                NullExpr: ''
      quoN2:
        FuncExpr:
          source: 'decr<M3>(down ? quo : null)'
          name: decr_162
          args:
          - 
            CondExpr:
              source: 'down ? quo : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 162
              else:
                NullExpr: ''
      quo0:
        MergeExpr:
          source: 'quoN0 | quoN1 | quoN2'
          lhs: 
            MergeExpr:
              source: 'quoN0 | quoN1'
              lhs: 
                SliceExpr:
                  source: 'quoN0'
                  var: quoN0
                  offset: 0
                  size: 162
              rhs: 
                SliceExpr:
                  source: 'quoN1'
                  var: quoN1
                  offset: 0
                  size: 162
          rhs: 
            SliceExpr:
              source: 'quoN2'
              var: quoN2
              offset: 0
              size: 162
      remN0:
        CondExpr:
          source: 'none ? rem : null'
          if: 
            SliceExpr:
              source: 'none'
              var: none
              offset: 0
              size: 1
          then: 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 162
          else:
            NullExpr: ''
      remN1:
        FuncExpr:
          source: 'sub<M3>(up ? rem : null, absRhs)'
          name: sub_162
          args:
          - 
            CondExpr:
              source: 'up ? rem : null'
              if: 
                SliceExpr:
                  source: 'up'
                  var: up
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 162
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 162
      remN2:
        FuncExpr:
          source: 'add<M3>(down ? rem : null, absRhs)'
          name: add_162
          args:
          - 
            CondExpr:
              source: 'down ? rem : null'
              if: 
                SliceExpr:
                  source: 'down'
                  var: down
                  offset: 0
                  size: 1
              then: 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 162
              else:
                NullExpr: ''
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 162
      rem0:
        MergeExpr:
          source: 'remN0 | remN1 | remN2'
          lhs: 
            MergeExpr:
              source: 'remN0 | remN1'
              lhs: 
                SliceExpr:
                  source: 'remN0'
                  var: remN0
                  offset: 0
                  size: 162
              rhs: 
                SliceExpr:
                  source: 'remN1'
                  var: remN1
                  offset: 0
                  size: 162
          rhs: 
            SliceExpr:
              source: 'remN2'
              var: remN2
              offset: 0
              size: 162
    return: 
    # fixSign<M3>(lhs, rhs, quo0, rem0)
      FuncExpr:
        source: 'fixSign<M3>(lhs, rhs, quo0, rem0)'
        name: fixSign_162
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 162
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 162
        - 
          SliceExpr:
            source: 'quo0'
            var: quo0
            offset: 0
            size: 162
        - 
          SliceExpr:
            source: 'rem0'
            var: rem0
            offset: 0
            size: 162
# 
# func T2 roundDivMod<M3>(M3 lhs, M3 rhs) {
#   absLhs = abs<M3>(lhs)
#   absRhs = abs<M3>(rhs)
#   quorem = roundDivModLoop<M3>(absLhs, 0, absRhs, 1)
#   quo = quorem.quotient
#   rem = quorem.remainder
#   return fixSign<M3>(lhs, rhs, quo, rem)
# }
  roundDivMod_162:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 324
        fields:
          quotient: 
            size: '162'
            offset: '0'
          remainder: 
            size: '162'
            offset: '162'
    params:
      - 
        argName: lhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: rhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      absLhs:
        FuncExpr:
          source: 'abs<M3>(lhs)'
          name: abs_162
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 162
      absRhs:
        FuncExpr:
          source: 'abs<M3>(rhs)'
          name: abs_162
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 162
      quorem:
        FuncExpr:
          source: 'roundDivModLoop<M3>(absLhs, 0, absRhs, 1)'
          name: roundDivModLoop_162
          args:
          - 
            SliceExpr:
              source: 'absLhs'
              var: absLhs
              offset: 0
              size: 162
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: '999999999999999999999999999999999999999999999999999999'
          - 
            SliceExpr:
              source: 'absRhs'
              var: absRhs
              offset: 0
              size: 162
          - 
            ValueExpr:
                value: '1'
                trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                trytes: 'A99999999999999999999999999999999999999999999999999999'
      quo:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 162
          fields: 
            - quotient
      rem:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 162
          size: 162
          fields: 
            - remainder
    return: 
    # fixSign<M3>(lhs, rhs, quo, rem)
      FuncExpr:
        source: 'fixSign<M3>(lhs, rhs, quo, rem)'
        name: fixSign_162
        args:
        - 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 162
        - 
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 162
        - 
          SliceExpr:
            source: 'quo'
            var: quo
            offset: 0
            size: 162
        - 
          SliceExpr:
            source: 'rem'
            var: rem
            offset: 0
            size: 162
# 
# func T2 roundDivModLoop<M3>(M3 quo, M3 rem, M3 div, M3 shf) {
#   quorem = roundDivModPass<M3>(quo, rem, div)
#   newShf = rshift<M3>(shf)
#   zero = isZero[sign<M3>(newShf)]
#   quo1 = quorem.quotient
#   rem1 = quorem.remainder
#   return zero ? quorem : roundDivModLoop<M3>(quo1, rem1, div, newShf)
# }
  roundDivModLoop_162:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 324
        fields:
          quotient: 
            size: '162'
            offset: '0'
          remainder: 
            size: '162'
            offset: '162'
    params:
      - 
        argName: quo
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: rem
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: div
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: shf
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      quorem:
        FuncExpr:
          source: 'roundDivModPass<M3>(quo, rem, div)'
          name: roundDivModPass_162
          args:
          - 
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 162
          - 
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 162
          - 
            SliceExpr:
              source: 'div'
              var: div
              offset: 0
              size: 162
      newShf:
        FuncExpr:
          source: 'rshift<M3>(shf)'
          name: rshift_162
          args:
          - 
            SliceExpr:
              source: 'shf'
              var: shf
              offset: 0
              size: 162
      zero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<M3>(newShf)'
                name: sign_162
                args:
                - 
                  SliceExpr:
                    source: 'newShf'
                    var: newShf
                    offset: 0
                    size: 162
      quo1:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 162
          fields: 
            - quotient
      rem1:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 162
          size: 162
          fields: 
            - remainder
    return: 
    # zero ? quorem : roundDivModLoop<M3>(quo1, rem1, div, newShf)
      CondExpr:
        source: 'zero ? quorem : roundDivModLoop<M3>(quo1, rem1, div, newShf)'
        if: 
          SliceExpr:
            source: 'zero'
            var: zero
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'quorem'
            var: quorem
            offset: 0
            size: 324
        else:
          FuncExpr:
            source: 'roundDivModLoop<M3>(quo1, rem1, div, newShf)'
            name: roundDivModLoop_162
            args:
            - 
              SliceExpr:
                source: 'quo1'
                var: quo1
                offset: 0
                size: 162
            - 
              SliceExpr:
                source: 'rem1'
                var: rem1
                offset: 0
                size: 162
            - 
              SliceExpr:
                source: 'div'
                var: div
                offset: 0
                size: 162
            - 
              SliceExpr:
                source: 'newShf'
                var: newShf
                offset: 0
                size: 162
# 
# func T2 roundDivModPass<M3>(M3 quo, M3 rem, M3 div) {
#   quorem = as<T2>(rshift<T2>(quo & rem))
#   quo0 = quorem.quotient
#   rem0 = quorem.remainder
#   remSign = sign<M3>(rem0)
#   quoSign = sign<M3>(quo0)
#   low = sub<M3>(rem0, div)
#   neg1 = neg<M3>(low)
#   cmp1 = cmp<M3>(neg1, rem0)
#   posRem = isPositive[remSign]
#   posQuo = isPositive[quoSign]
#   test1 = and[posRem, or[isLess[cmp1], and[isZero[cmp1], posQuo]]]
#   high = add<M3>(rem0, div)
#   neg2 = neg<M3>(high)
#   cmp2 = cmp<M3>(neg2, rem0)
#   negRem = isNegative[remSign]
#   negQuo = isNegative[quoSign]
#   test2 = and[negRem, or[isGreater[cmp2], and[isEqual[cmp2], negQuo]]]
#   quorem1 = T2{
#     quotient = incr<M3>(quo0)
#     remainder = low
#   }
#   quorem2 = T2{
#     quotient = decr<M3>(quo0)
#     remainder = high
#   }
#   return test1 ? quorem1 : test2 ? quorem2 : quorem
# }
  roundDivModPass_162:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 324
        fields:
          quotient: 
            size: '162'
            offset: '0'
          remainder: 
            size: '162'
            offset: '162'
    params:
      - 
        argName: quo
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: rem
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: div
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      quorem:
        FuncExpr:
          source: 'as<T2>(rshift<T2>(quo & rem))'
          name: as_324
          args:
          - 
            FuncExpr:
              source: 'rshift<T2>(quo & rem)'
              name: rshift_324
              args:
              - 
                ConcatExpr:
                  source: 'quo & rem'
                  lhs: 
                    SliceExpr:
                      source: 'quo'
                      var: quo
                      offset: 0
                      size: 162
                  rhs: 
                    SliceExpr:
                      source: 'rem'
                      var: rem
                      offset: 0
                      size: 162
      quo0:
        SliceExpr:
          source: 'quorem.quotient'
          var: quorem
          offset: 0
          size: 162
          fields: 
            - quotient
      rem0:
        SliceExpr:
          source: 'quorem.remainder'
          var: quorem
          offset: 162
          size: 162
          fields: 
            - remainder
      remSign:
        FuncExpr:
          source: 'sign<M3>(rem0)'
          name: sign_162
          args:
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 162
      quoSign:
        FuncExpr:
          source: 'sign<M3>(quo0)'
          name: sign_162
          args:
          - 
            SliceExpr:
              source: 'quo0'
              var: quo0
              offset: 0
              size: 162
      low:
        FuncExpr:
          source: 'sub<M3>(rem0, div)'
          name: sub_162
          args:
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 162
          - 
            SliceExpr:
              source: 'div'
              var: div
              offset: 0
              size: 162
      neg1:
        FuncExpr:
          source: 'neg<M3>(low)'
          name: neg_162
          args:
          - 
            SliceExpr:
              source: 'low'
              var: low
              offset: 0
              size: 162
      cmp1:
        FuncExpr:
          source: 'cmp<M3>(neg1, rem0)'
          name: cmp_162
          args:
          - 
            SliceExpr:
              source: 'neg1'
              var: neg1
              offset: 0
              size: 162
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 162
      posRem:
        LutExpr:
          name: isPositive
          args: 
            - 
              SliceExpr:
                source: 'remSign'
                var: remSign
                offset: 0
                size: 1
      posQuo:
        LutExpr:
          name: isPositive
          args: 
            - 
              SliceExpr:
                source: 'quoSign'
                var: quoSign
                offset: 0
                size: 1
      test1:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'posRem'
                var: posRem
                offset: 0
                size: 1
            - 
              LutExpr:
                name: or
                args: 
                  - 
                    LutExpr:
                      name: isLess
                      args: 
                        - 
                          SliceExpr:
                            source: 'cmp1'
                            var: cmp1
                            offset: 0
                            size: 1
                  - 
                    LutExpr:
                      name: and
                      args: 
                        - 
                          LutExpr:
                            name: isZero
                            args: 
                              - 
                                SliceExpr:
                                  source: 'cmp1'
                                  var: cmp1
                                  offset: 0
                                  size: 1
                        - 
                          SliceExpr:
                            source: 'posQuo'
                            var: posQuo
                            offset: 0
                            size: 1
      high:
        FuncExpr:
          source: 'add<M3>(rem0, div)'
          name: add_162
          args:
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 162
          - 
            SliceExpr:
              source: 'div'
              var: div
              offset: 0
              size: 162
      neg2:
        FuncExpr:
          source: 'neg<M3>(high)'
          name: neg_162
          args:
          - 
            SliceExpr:
              source: 'high'
              var: high
              offset: 0
              size: 162
      cmp2:
        FuncExpr:
          source: 'cmp<M3>(neg2, rem0)'
          name: cmp_162
          args:
          - 
            SliceExpr:
              source: 'neg2'
              var: neg2
              offset: 0
              size: 162
          - 
            SliceExpr:
              source: 'rem0'
              var: rem0
              offset: 0
              size: 162
      negRem:
        LutExpr:
          name: isNegative
          args: 
            - 
              SliceExpr:
                source: 'remSign'
                var: remSign
                offset: 0
                size: 1
      negQuo:
        LutExpr:
          name: isNegative
          args: 
            - 
              SliceExpr:
                source: 'quoSign'
                var: quoSign
                offset: 0
                size: 1
      test2:
        LutExpr:
          name: and
          args: 
            - 
              SliceExpr:
                source: 'negRem'
                var: negRem
                offset: 0
                size: 1
            - 
              LutExpr:
                name: or
                args: 
                  - 
                    LutExpr:
                      name: isGreater
                      args: 
                        - 
                          SliceExpr:
                            source: 'cmp2'
                            var: cmp2
                            offset: 0
                            size: 1
                  - 
                    LutExpr:
                      name: and
                      args: 
                        - 
                          LutExpr:
                            name: isEqual
                            args: 
                              - 
                                SliceExpr:
                                  source: 'cmp2'
                                  var: cmp2
                                  offset: 0
                                  size: 1
                        - 
                          SliceExpr:
                            source: 'negQuo'
                            var: negQuo
                            offset: 0
                            size: 1
      quorem1:
        TypeExpr:
          source: 'T2{ /   quotient = incr<M3>(quo0) /   remainder = low / }'
          type: 
            ConstTypeName:
              typeName: T2
              size: 324
              fields:
                quotient: 
                  size: '162'
                  offset: '0'
                remainder: 
                  size: '162'
                  offset: '162'
          fieldValues: 
            quotient:
              FuncExpr:
                source: 'incr<M3>(quo0)'
                name: incr_162
                args:
                - 
                  SliceExpr:
                    source: 'quo0'
                    var: quo0
                    offset: 0
                    size: 162
            remainder:
              SliceExpr:
                source: 'low'
                var: low
                offset: 0
                size: 162
      quorem2:
        TypeExpr:
          source: 'T2{ /   quotient = decr<M3>(quo0) /   remainder = high / }'
          type: 
            ConstTypeName:
              typeName: T2
              size: 324
              fields:
                quotient: 
                  size: '162'
                  offset: '0'
                remainder: 
                  size: '162'
                  offset: '162'
          fieldValues: 
            quotient:
              FuncExpr:
                source: 'decr<M3>(quo0)'
                name: decr_162
                args:
                - 
                  SliceExpr:
                    source: 'quo0'
                    var: quo0
                    offset: 0
                    size: 162
            remainder:
              SliceExpr:
                source: 'high'
                var: high
                offset: 0
                size: 162
    return: 
    # test1 ? quorem1 : test2 ? quorem2 : quorem
      CondExpr:
        source: 'test1 ? quorem1 : test2 ? quorem2 : quorem'
        if: 
          SliceExpr:
            source: 'test1'
            var: test1
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'quorem1'
            var: quorem1
            offset: 0
            size: 324
        else:
          CondExpr:
            source: 'test2 ? quorem2 : quorem'
            if: 
              SliceExpr:
                source: 'test2'
                var: test2
                offset: 0
                size: 1
            then: 
              SliceExpr:
                source: 'quorem2'
                var: quorem2
                offset: 0
                size: 324
            else:
              SliceExpr:
                source: 'quorem'
                var: quorem
                offset: 0
                size: 324
# 
# func T2 fixSign<M3>(M3 lhs, M3 rhs, M3 quo, M3 rem) {
#   lhsSign = sign<M3>(lhs)
#   rhsSign = sign<M3>(rhs)
#   negRem = isNegative[lhsSign]
#   negQuo = xor[negRem, isNegative[rhsSign]]
#   quo1 = negQuo ? neg<M3>(quo) : quo
#   rem1 = negRem ? neg<M3>(rem) : rem
#   return T2{
#     quotient = quo1
#     remainder = rem1
#   }
# }
  fixSign_162:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 324
        fields:
          quotient: 
            size: '162'
            offset: '0'
          remainder: 
            size: '162'
            offset: '162'
    params:
      - 
        argName: lhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: rhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: quo
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: rem
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      lhsSign:
        FuncExpr:
          source: 'sign<M3>(lhs)'
          name: sign_162
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 162
      rhsSign:
        FuncExpr:
          source: 'sign<M3>(rhs)'
          name: sign_162
          args:
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 162
      negRem:
        LutExpr:
          name: isNegative
          args: 
            - 
              SliceExpr:
                source: 'lhsSign'
                var: lhsSign
                offset: 0
                size: 1
      negQuo:
        LutExpr:
          name: xor
          args: 
            - 
              SliceExpr:
                source: 'negRem'
                var: negRem
                offset: 0
                size: 1
            - 
              LutExpr:
                name: isNegative
                args: 
                  - 
                    SliceExpr:
                      source: 'rhsSign'
                      var: rhsSign
                      offset: 0
                      size: 1
      quo1:
        CondExpr:
          source: 'negQuo ? neg<M3>(quo) : quo'
          if: 
            SliceExpr:
              source: 'negQuo'
              var: negQuo
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'neg<M3>(quo)'
              name: neg_162
              args:
              - 
                SliceExpr:
                  source: 'quo'
                  var: quo
                  offset: 0
                  size: 162
          else:
            SliceExpr:
              source: 'quo'
              var: quo
              offset: 0
              size: 162
      rem1:
        CondExpr:
          source: 'negRem ? neg<M3>(rem) : rem'
          if: 
            SliceExpr:
              source: 'negRem'
              var: negRem
              offset: 0
              size: 1
          then: 
            FuncExpr:
              source: 'neg<M3>(rem)'
              name: neg_162
              args:
              - 
                SliceExpr:
                  source: 'rem'
                  var: rem
                  offset: 0
                  size: 162
          else:
            SliceExpr:
              source: 'rem'
              var: rem
              offset: 0
              size: 162
    return: 
    # T2{
    #   quotient = quo1
    #   remainder = rem1
    # }
      TypeExpr:
        source: 'T2{ /   quotient = quo1 /   remainder = rem1 / }'
        type: 
          ConstTypeName:
            typeName: T2
            size: 324
            fields:
              quotient: 
                size: '162'
                offset: '0'
              remainder: 
                size: '162'
                offset: '162'
        fieldValues: 
          quotient:
            SliceExpr:
              source: 'quo1'
              var: quo1
              offset: 0
              size: 162
          remainder:
            SliceExpr:
              source: 'rem1'
              var: rem1
              offset: 0
              size: 162
# 
# func M3 abs<M3>(M3 val) {
#   return isNegative[sign<M3>(val)] ? neg<M3>(val) : val
# }
  abs_162:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 162
    params:
      - 
        argName: val
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    return: 
    # isNegative[sign<M3>(val)] ? neg<M3>(val) : val
      CondExpr:
        source: 'isNegative[sign<M3>(val)] ? neg<M3>(val) : val'
        if: 
          LutExpr:
            name: isNegative
            args: 
              - 
                FuncExpr:
                  source: 'sign<M3>(val)'
                  name: sign_162
                  args:
                  - 
                    SliceExpr:
                      source: 'val'
                      var: val
                      offset: 0
                      size: 162
        then: 
          FuncExpr:
            source: 'neg<M3>(val)'
            name: neg_162
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 162
        else:
          SliceExpr:
            source: 'val'
            var: val
            offset: 0
            size: 162
# 
# func Trit sign<M3>(M3 val) {
#   val0 = sign<A>(val[0 : A])
#   val1 = sign<B>(val[A : B])
#   return sign[val0, val1, 0]
# }
  sign_162:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: val
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      val0:
        FuncExpr:
          source: 'sign<A>(val[0 : A])'
          name: sign_81
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 81
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 81
      val1:
        FuncExpr:
          source: 'sign<B>(val[A : B])'
          name: sign_81
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 81
              size: 81
              start:
                ConstTypeName:
                  typeName: A
                  size: 81
              end:
                ConstTypeName:
                  typeName: B
                  size: 81
    return: 
    # sign[val0, val1, 0]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
# 
# func M3 neg<M3>(M3 val) {
#   val0 = neg<A>(val[0 : A])
#   val1 = neg<B>(val[A : B])
#   return val0 & val1
# }
  neg_162:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 162
    params:
      - 
        argName: val
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      val0:
        FuncExpr:
          source: 'neg<A>(val[0 : A])'
          name: neg_81
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 81
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 81
      val1:
        FuncExpr:
          source: 'neg<B>(val[A : B])'
          name: neg_81
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 81
              size: 81
              start:
                ConstTypeName:
                  typeName: A
                  size: 81
              end:
                ConstTypeName:
                  typeName: B
                  size: 81
    return: 
    # val0 & val1
      ConcatExpr:
        source: 'val0 & val1'
        lhs: 
          SliceExpr:
            source: 'val0'
            var: val0
            offset: 0
            size: 81
        rhs: 
          SliceExpr:
            source: 'val1'
            var: val1
            offset: 0
            size: 81
# 
# func A neg<A>(A val) {
#   val0 = neg<A>(val[0 : A])
#   val1 = neg<B>(val[A : B])
#   val2 = neg<C>(val[A + B : C])
#   return val0 & val1 & val2
# }
  neg_81:
    returnType: 
      ConstTypeName:
        typeName: A
        size: 81
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: A
            size: 81
    assigns: 
      val0:
        FuncExpr:
          source: 'neg<A>(val[0 : A])'
          name: neg_27
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 27
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 27
      val1:
        FuncExpr:
          source: 'neg<B>(val[A : B])'
          name: neg_27
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 27
              size: 27
              start:
                ConstTypeName:
                  typeName: A
                  size: 27
              end:
                ConstTypeName:
                  typeName: B
                  size: 27
      val2:
        FuncExpr:
          source: 'neg<C>(val[A + B : C])'
          name: neg_27
          args:
          - 
            SliceExpr:
              source: 'val[A + B : C]'
              var: val
              offset: 54
              size: 27
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 27
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 27
              end:
                ConstTypeName:
                  typeName: C
                  size: 27
    return: 
    # val0 & val1 & val2
      ConcatExpr:
        source: 'val0 & val1 & val2'
        lhs: 
          ConcatExpr:
            source: 'val0 & val1'
            lhs: 
              SliceExpr:
                source: 'val0'
                var: val0
                offset: 0
                size: 27
            rhs: 
              SliceExpr:
                source: 'val1'
                var: val1
                offset: 0
                size: 27
        rhs: 
          SliceExpr:
            source: 'val2'
            var: val2
            offset: 0
            size: 27
# 
# func T2 as<T2>(T2 val) {
#   return val
# }
  as_324:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 324
        fields:
          quotient: 
            size: '162'
            offset: '0'
          remainder: 
            size: '162'
            offset: '162'
    params:
      - 
        argName: val
        size: 324
        type: 
          ConstTypeName:
            typeName: T2
            size: 324
            fields:
              quotient: 
                size: '162'
                offset: '0'
              remainder: 
                size: '162'
                offset: '162'
    return: 
    # val
      SliceExpr:
        source: 'val'
        var: val
        offset: 0
        size: 324
# 
# func T2 rshift<T2>(T2 val) {
#   return 0 & val[0 : T2 - 1]
# }
  rshift_324:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 324
        fields:
          quotient: 
            size: '162'
            offset: '0'
          remainder: 
            size: '162'
            offset: '162'
    params:
      - 
        argName: val
        size: 324
        type: 
          ConstTypeName:
            typeName: T2
            size: 324
            fields:
              quotient: 
                size: '162'
                offset: '0'
              remainder: 
                size: '162'
                offset: '162'
    return: 
    # 0 & val[0 : T2 - 1]
      ConcatExpr:
        source: '0 & val[0 : T2 - 1]'
        lhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        rhs: 
          SliceExpr:
            source: 'val[0 : T2 - 1]'
            var: val
            offset: 0
            size: 323
            start:
              ConstNumber:
                value: 0
            end:
              ConstExpr:
                operator: '-'
                lhs: 
                  ConstTypeName:
                    typeName: T2
                    size: 324
                    fields:
                      quotient: 
                        size: '162'
                        offset: '0'
                      remainder: 
                        size: '162'
                        offset: '162'
                rhs: 
                  ConstNumber:
                    value: 1
# 
# func M3 sub<M3>(M3 lhs, M3 rhs) {
#   sum = fullAdd<M3>(lhs, neg<M3>(rhs), 0)
#   return sum.value
# }
  sub_162:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 162
    params:
      - 
        argName: lhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: rhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<M3>(lhs, neg<M3>(rhs), 0)'
          name: fullAdd_162
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 162
          - 
            FuncExpr:
              source: 'neg<M3>(rhs)'
              name: neg_162
              args:
              - 
                SliceExpr:
                  source: 'rhs'
                  var: rhs
                  offset: 0
                  size: 162
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
    return: 
    # sum.value
      SliceExpr:
        source: 'sum.value'
        var: sum
        offset: 0
        size: 162
        fields: 
          - value
# 
# func TCarry fullAdd<M3>(M3 lhs, M3 rhs, Carry carry) {
#   add0 = fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)
#   add1 = fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)
#   return add0.value & add1
# }
  fullAdd_162:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 163
        fields:
          value: 
            size: '162'
            offset: '0'
          carry: 
            size: '1'
            offset: '162'
    params:
      - 
        argName: lhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: rhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)'
          name: fullAdd_81
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 81
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 81
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 81
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 81
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)'
          name: fullAdd_81
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 81
              size: 81
              start:
                ConstTypeName:
                  typeName: A
                  size: 81
              end:
                ConstTypeName:
                  typeName: B
                  size: 81
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 81
              size: 81
              start:
                ConstTypeName:
                  typeName: A
                  size: 81
              end:
                ConstTypeName:
                  typeName: B
                  size: 81
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 81
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1
      ConcatExpr:
        source: 'add0.value & add1'
        lhs: 
          SliceExpr:
            source: 'add0.value'
            var: add0
            offset: 0
            size: 81
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'add1'
            var: add1
            offset: 0
            size: 82
# 
# func TCarry fullAdd<A>(A lhs, A rhs, Carry carry) {
#   add0 = fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)
#   add1 = fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)
#   add2 = fullAdd<C>(lhs[A + B : C], rhs[A + B : C], add1.carry)
#   return add0.value & add1.value & add2
# }
  fullAdd_81:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 82
        fields:
          value: 
            size: '81'
            offset: '0'
          carry: 
            size: '1'
            offset: '81'
    params:
      - 
        argName: lhs
        size: 81
        type: 
          ConstTypeName:
            typeName: A
            size: 81
      - 
        argName: rhs
        size: 81
        type: 
          ConstTypeName:
            typeName: A
            size: 81
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)'
          name: fullAdd_27
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 27
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 27
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 27
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 27
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)'
          name: fullAdd_27
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 27
              size: 27
              start:
                ConstTypeName:
                  typeName: A
                  size: 27
              end:
                ConstTypeName:
                  typeName: B
                  size: 27
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 27
              size: 27
              start:
                ConstTypeName:
                  typeName: A
                  size: 27
              end:
                ConstTypeName:
                  typeName: B
                  size: 27
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 27
              size: 1
              fields: 
                - carry
      add2:
        FuncExpr:
          source: 'fullAdd<C>(lhs[A + B : C], rhs[A + B : C], add1.carry)'
          name: fullAdd_27
          args:
          - 
            SliceExpr:
              source: 'lhs[A + B : C]'
              var: lhs
              offset: 54
              size: 27
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 27
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 27
              end:
                ConstTypeName:
                  typeName: C
                  size: 27
          - 
            SliceExpr:
              source: 'rhs[A + B : C]'
              var: rhs
              offset: 54
              size: 27
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 27
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 27
              end:
                ConstTypeName:
                  typeName: C
                  size: 27
          - 
            SliceExpr:
              source: 'add1.carry'
              var: add1
              offset: 27
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1.value & add2
      ConcatExpr:
        source: 'add0.value & add1.value & add2'
        lhs: 
          ConcatExpr:
            source: 'add0.value & add1.value'
            lhs: 
              SliceExpr:
                source: 'add0.value'
                var: add0
                offset: 0
                size: 27
                fields: 
                  - value
            rhs: 
              SliceExpr:
                source: 'add1.value'
                var: add1
                offset: 0
                size: 27
                fields: 
                  - value
        rhs: 
          SliceExpr:
            source: 'add2'
            var: add2
            offset: 0
            size: 28
# 
# func Trit cmp<M3>(M3 lhs, M3 rhs) {
#   val0 = cmp<A>(lhs[0 : A], rhs[0 : A])
#   val1 = cmp<B>(lhs[A : B], rhs[A : B])
#   return sign[val0, val1, 0]
# }
  cmp_162:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: lhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: rhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      val0:
        FuncExpr:
          source: 'cmp<A>(lhs[0 : A], rhs[0 : A])'
          name: cmp_81
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 81
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 81
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 81
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 81
      val1:
        FuncExpr:
          source: 'cmp<B>(lhs[A : B], rhs[A : B])'
          name: cmp_81
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 81
              size: 81
              start:
                ConstTypeName:
                  typeName: A
                  size: 81
              end:
                ConstTypeName:
                  typeName: B
                  size: 81
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 81
              size: 81
              start:
                ConstTypeName:
                  typeName: A
                  size: 81
              end:
                ConstTypeName:
                  typeName: B
                  size: 81
    return: 
    # sign[val0, val1, 0]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
# 
# func Trit cmp<A>(A lhs, A rhs) {
#   val0 = cmp<A>(lhs[0 : A], rhs[0 : A])
#   val1 = cmp<B>(lhs[A : B], rhs[A : B])
#   val2 = cmp<C>(lhs[A + B : C], rhs[A + B : C])
#   return sign[val0, val1, val2]
# }
  cmp_81:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: lhs
        size: 81
        type: 
          ConstTypeName:
            typeName: A
            size: 81
      - 
        argName: rhs
        size: 81
        type: 
          ConstTypeName:
            typeName: A
            size: 81
    assigns: 
      val0:
        FuncExpr:
          source: 'cmp<A>(lhs[0 : A], rhs[0 : A])'
          name: cmp_27
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 27
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 27
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 27
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 27
      val1:
        FuncExpr:
          source: 'cmp<B>(lhs[A : B], rhs[A : B])'
          name: cmp_27
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 27
              size: 27
              start:
                ConstTypeName:
                  typeName: A
                  size: 27
              end:
                ConstTypeName:
                  typeName: B
                  size: 27
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 27
              size: 27
              start:
                ConstTypeName:
                  typeName: A
                  size: 27
              end:
                ConstTypeName:
                  typeName: B
                  size: 27
      val2:
        FuncExpr:
          source: 'cmp<C>(lhs[A + B : C], rhs[A + B : C])'
          name: cmp_27
          args:
          - 
            SliceExpr:
              source: 'lhs[A + B : C]'
              var: lhs
              offset: 54
              size: 27
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 27
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 27
              end:
                ConstTypeName:
                  typeName: C
                  size: 27
          - 
            SliceExpr:
              source: 'rhs[A + B : C]'
              var: rhs
              offset: 54
              size: 27
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 27
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 27
              end:
                ConstTypeName:
                  typeName: C
                  size: 27
    return: 
    # sign[val0, val1, val2]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func M3 add<M3>(M3 lhs, M3 rhs) {
#   sum = fullAdd<M3>(lhs, rhs, 0)
#   return sum.value
# }
  add_162:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 162
    params:
      - 
        argName: lhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: rhs
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<M3>(lhs, rhs, 0)'
          name: fullAdd_162
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 162
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 162
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
    return: 
    # sum.value
      SliceExpr:
        source: 'sum.value'
        var: sum
        offset: 0
        size: 162
        fields: 
          - value
# 
# func M3 incr<M3>(M3 val) {
#   halfSum = halfAdd<M3>(val, 1)
#   return halfSum.value
# }
  incr_162:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 162
    params:
      - 
        argName: val
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      halfSum:
        FuncExpr:
          source: 'halfAdd<M3>(val, 1)'
          name: halfAdd_162
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 162
          - 
            ValueExpr:
                value: '1'
                trits: '1'
                trytes: 'A'
    return: 
    # halfSum.value
      SliceExpr:
        source: 'halfSum.value'
        var: halfSum
        offset: 0
        size: 162
        fields: 
          - value
# 
# func TCarry halfAdd<M3>(M3 val, Carry carry) {
#   add0 = halfAdd<A>(val[0 : A], carry)
#   add1 = halfAdd<B>(val[A : B], add0.carry)
#   return add0.value & add1
# }
  halfAdd_162:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 163
        fields:
          value: 
            size: '162'
            offset: '0'
          carry: 
            size: '1'
            offset: '162'
    params:
      - 
        argName: val
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'halfAdd<A>(val[0 : A], carry)'
          name: halfAdd_81
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 81
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 81
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'halfAdd<B>(val[A : B], add0.carry)'
          name: halfAdd_81
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 81
              size: 81
              start:
                ConstTypeName:
                  typeName: A
                  size: 81
              end:
                ConstTypeName:
                  typeName: B
                  size: 81
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 81
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1
      ConcatExpr:
        source: 'add0.value & add1'
        lhs: 
          SliceExpr:
            source: 'add0.value'
            var: add0
            offset: 0
            size: 81
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'add1'
            var: add1
            offset: 0
            size: 82
# 
# func TCarry halfAdd<A>(A val, Carry carry) {
#   add0 = halfAdd<A>(val[0 : A], carry)
#   add1 = halfAdd<B>(val[A : B], add0.carry)
#   add2 = halfAdd<C>(val[A + B : C], add1.carry)
#   return add0.value & add1.value & add2
# }
  halfAdd_81:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 82
        fields:
          value: 
            size: '81'
            offset: '0'
          carry: 
            size: '1'
            offset: '81'
    params:
      - 
        argName: val
        size: 81
        type: 
          ConstTypeName:
            typeName: A
            size: 81
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'halfAdd<A>(val[0 : A], carry)'
          name: halfAdd_27
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 27
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 27
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'halfAdd<B>(val[A : B], add0.carry)'
          name: halfAdd_27
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 27
              size: 27
              start:
                ConstTypeName:
                  typeName: A
                  size: 27
              end:
                ConstTypeName:
                  typeName: B
                  size: 27
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 27
              size: 1
              fields: 
                - carry
      add2:
        FuncExpr:
          source: 'halfAdd<C>(val[A + B : C], add1.carry)'
          name: halfAdd_27
          args:
          - 
            SliceExpr:
              source: 'val[A + B : C]'
              var: val
              offset: 54
              size: 27
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 27
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 27
              end:
                ConstTypeName:
                  typeName: C
                  size: 27
          - 
            SliceExpr:
              source: 'add1.carry'
              var: add1
              offset: 27
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1.value & add2
      ConcatExpr:
        source: 'add0.value & add1.value & add2'
        lhs: 
          ConcatExpr:
            source: 'add0.value & add1.value'
            lhs: 
              SliceExpr:
                source: 'add0.value'
                var: add0
                offset: 0
                size: 27
                fields: 
                  - value
            rhs: 
              SliceExpr:
                source: 'add1.value'
                var: add1
                offset: 0
                size: 27
                fields: 
                  - value
        rhs: 
          SliceExpr:
            source: 'add2'
            var: add2
            offset: 0
            size: 28
# 
# func M3 decr<M3>(M3 val) {
#   halfSum = halfAdd<M3>(val, -)
#   return halfSum.value
# }
  decr_162:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 162
    params:
      - 
        argName: val
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    assigns: 
      halfSum:
        FuncExpr:
          source: 'halfAdd<M3>(val, -)'
          name: halfAdd_162
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 162
          - 
            ValueExpr:
                value: '-'
                trits: '-'
                trytes: 'Z'
    return: 
    # halfSum.value
      SliceExpr:
        source: 'halfSum.value'
        var: halfSum
        offset: 0
        size: 162
        fields: 
          - value
# 
# func M3 rshift<M3>(M3 val) {
#   return 0 & val[0 : M3 - 1]
# }
  rshift_162:
    returnType: 
      ConstTypeName:
        typeName: M3
        size: 162
    params:
      - 
        argName: val
        size: 162
        type: 
          ConstTypeName:
            typeName: M3
            size: 162
    return: 
    # 0 & val[0 : M3 - 1]
      ConcatExpr:
        source: '0 & val[0 : M3 - 1]'
        lhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        rhs: 
          SliceExpr:
            source: 'val[0 : M3 - 1]'
            var: val
            offset: 0
            size: 161
            start:
              ConstNumber:
                value: 0
            end:
              ConstExpr:
                operator: '-'
                lhs: 
                  ConstTypeName:
                    typeName: M3
                    size: 162
                rhs: 
                  ConstNumber:
                    value: 1
# 
# func Tiny2 sub<Tiny2>(Tiny2 lhs, Tiny2 rhs) {
#   sum = fullAdd<Tiny2>(lhs, neg<Tiny2>(rhs), 0)
#   return sum.value
# }
  sub_18:
    returnType: 
      ConstTypeName:
        typeName: Tiny2
        size: 18
    params:
      - 
        argName: lhs
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
      - 
        argName: rhs
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<Tiny2>(lhs, neg<Tiny2>(rhs), 0)'
          name: fullAdd_18
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 18
          - 
            FuncExpr:
              source: 'neg<Tiny2>(rhs)'
              name: neg_18
              args:
              - 
                SliceExpr:
                  source: 'rhs'
                  var: rhs
                  offset: 0
                  size: 18
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
    return: 
    # sum.value
      SliceExpr:
        source: 'sum.value'
        var: sum
        offset: 0
        size: 18
        fields: 
          - value
# 
# func Tiny2 incr<Tiny2>(Tiny2 val) {
#   halfSum = halfAdd<Tiny2>(val, 1)
#   return halfSum.value
# }
  incr_18:
    returnType: 
      ConstTypeName:
        typeName: Tiny2
        size: 18
    params:
      - 
        argName: val
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
    assigns: 
      halfSum:
        FuncExpr:
          source: 'halfAdd<Tiny2>(val, 1)'
          name: halfAdd_18
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 18
          - 
            ValueExpr:
                value: '1'
                trits: '1'
                trytes: 'A'
    return: 
    # halfSum.value
      SliceExpr:
        source: 'halfSum.value'
        var: halfSum
        offset: 0
        size: 18
        fields: 
          - value
# 
# func Tryte add<Tryte>(Tryte lhs, Tryte rhs) {
#   sum = fullAdd<Tryte>(lhs, rhs, 0)
#   return sum.value
# }
  add_3:
    returnType: 
      ConstTypeName:
        typeName: Tryte
        size: 3
    params:
      - 
        argName: lhs
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
      - 
        argName: rhs
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<Tryte>(lhs, rhs, 0)'
          name: fullAdd_3
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 3
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 3
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
    return: 
    # sum.value
      SliceExpr:
        source: 'sum.value'
        var: sum
        offset: 0
        size: 3
        fields: 
          - value
# 
# func Tryte decr<Tryte>(Tryte val) {
#   halfSum = halfAdd<Tryte>(val, -)
#   return halfSum.value
# }
  decr_3:
    returnType: 
      ConstTypeName:
        typeName: Tryte
        size: 3
    params:
      - 
        argName: val
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
    assigns: 
      halfSum:
        FuncExpr:
          source: 'halfAdd<Tryte>(val, -)'
          name: halfAdd_3
          args:
          - 
            SliceExpr:
              source: 'val'
              var: val
              offset: 0
              size: 3
          - 
            ValueExpr:
                value: '-'
                trits: '-'
                trytes: 'Z'
    return: 
    # halfSum.value
      SliceExpr:
        source: 'halfSum.value'
        var: halfSum
        offset: 0
        size: 3
        fields: 
          - value
# 
# func Tiny lshift<Tiny>(Tiny val) {
#   return val[1 : Tiny - 1] & 0
# }
  lshift_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    return: 
    # val[1 : Tiny - 1] & 0
      ConcatExpr:
        source: 'val[1 : Tiny - 1] & 0'
        lhs: 
          SliceExpr:
            source: 'val[1 : Tiny - 1]'
            var: val
            offset: 1
            size: 8
            start:
              ConstNumber:
                value: 1
            end:
              ConstExpr:
                operator: '-'
                lhs: 
                  ConstTypeName:
                    typeName: Tiny
                    size: 9
                rhs: 
                  ConstNumber:
                    value: 1
        rhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
# 
# func T2 fullMul<Tryte2>(Tryte2 lhs, Tryte2 rhs) {
#   lhsZero = isZero[sign<Tryte2>(lhs)]
#   rhsZero = isZero[sign<Tryte2>(rhs)]
#   return or[lhsZero, rhsZero] ? 0 : fullMulNonZero<Tryte2>(lhs, rhs)
# }
  fullMul_6:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 12
    params:
      - 
        argName: lhs
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
      - 
        argName: rhs
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
    assigns: 
      lhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tryte2>(lhs)'
                name: sign_6
                args:
                - 
                  SliceExpr:
                    source: 'lhs'
                    var: lhs
                    offset: 0
                    size: 6
      rhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tryte2>(rhs)'
                name: sign_6
                args:
                - 
                  SliceExpr:
                    source: 'rhs'
                    var: rhs
                    offset: 0
                    size: 6
    return: 
    # or[lhsZero, rhsZero] ? 0 : fullMulNonZero<Tryte2>(lhs, rhs)
      CondExpr:
        source: 'or[lhsZero, rhsZero] ? 0 : fullMulNonZero<Tryte2>(lhs, rhs)'
        if: 
          LutExpr:
            name: or
            args: 
              - 
                SliceExpr:
                  source: 'lhsZero'
                  var: lhsZero
                  offset: 0
                  size: 1
              - 
                SliceExpr:
                  source: 'rhsZero'
                  var: rhsZero
                  offset: 0
                  size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000'
              trytes: '9999'
        else:
          FuncExpr:
            source: 'fullMulNonZero<Tryte2>(lhs, rhs)'
            name: fullMulNonZero_6
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 6
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 6
# 
# func T2 fullMulNonZero<Tryte2>(Tryte2 lhs, Tryte2 rhs) {
#   zero = as<P>(0)
#   product = fullMulNonZero<P3>(lhs & zero, rhs & zero)
#   return product[0 : T2]
# }
  fullMulNonZero_6:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 12
    params:
      - 
        argName: lhs
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
      - 
        argName: rhs
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
    assigns: 
      zero:
        FuncExpr:
          source: 'as<P>(0)'
          name: as_3
          args:
          - 
            ValueExpr:
                value: '0'
                trits: '000'
                trytes: '9'
      product:
        FuncExpr:
          source: 'fullMulNonZero<P3>(lhs & zero, rhs & zero)'
          name: fullMulNonZero_9
          args:
          - 
            ConcatExpr:
              source: 'lhs & zero'
              lhs: 
                SliceExpr:
                  source: 'lhs'
                  var: lhs
                  offset: 0
                  size: 6
              rhs: 
                SliceExpr:
                  source: 'zero'
                  var: zero
                  offset: 0
                  size: 3
          - 
            ConcatExpr:
              source: 'rhs & zero'
              lhs: 
                SliceExpr:
                  source: 'rhs'
                  var: rhs
                  offset: 0
                  size: 6
              rhs: 
                SliceExpr:
                  source: 'zero'
                  var: zero
                  offset: 0
                  size: 3
    return: 
    # product[0 : T2]
      SliceExpr:
        source: 'product[0 : T2]'
        var: product
        offset: 0
        size: 12
        start:
          ConstNumber:
            value: 0
        end:
          ConstTypeName:
            typeName: T2
            size: 12
# 
# func Trit sign<Tryte2>(Tryte2 val) {
#   val0 = sign<A>(val[0 : A])
#   val1 = sign<B>(val[A : B])
#   return sign[val0, val1, 0]
# }
  sign_6:
    returnType: 
      ConstTypeName:
        typeName: Trit
        size: 1
    params:
      - 
        argName: val
        size: 6
        type: 
          ConstTypeName:
            typeName: Tryte2
            size: 6
    assigns: 
      val0:
        FuncExpr:
          source: 'sign<A>(val[0 : A])'
          name: sign_3
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
      val1:
        FuncExpr:
          source: 'sign<B>(val[A : B])'
          name: sign_3
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
    return: 
    # sign[val0, val1, 0]
      LutExpr:
        name: sign
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
# 
# func Tiny log3<Tiny>(Tiny val) {
#   return sign<Tiny>(val) ? log3check<Tiny>(val, 3, 0) : null
# }
  log3_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    return: 
    # sign<Tiny>(val) ? log3check<Tiny>(val, 3, 0) : null
      CondExpr:
        source: 'sign<Tiny>(val) ? log3check<Tiny>(val, 3, 0) : null'
        if: 
          FuncExpr:
            source: 'sign<Tiny>(val)'
            name: sign_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 9
        then: 
          FuncExpr:
            source: 'log3check<Tiny>(val, 3, 0)'
            name: log3check_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 9
            - 
              ValueExpr:
                  value: '3'
                  trits: '010000000'
                  trytes: 'C99'
            - 
              ValueExpr:
                  value: '0'
                  trits: '000000000'
                  trytes: '999'
        else:
          NullExpr: ''
# 
# func Tiny log3check<Tiny>(Tiny val, Tiny power, Tiny log) {
#   done = isLess[cmp<Tiny>(val, power)]
#   return done ? log : log3checkMore<Tiny>(val, power, log)
# }
  log3check_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: power
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: log
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      done:
        LutExpr:
          name: isLess
          args: 
            - 
              FuncExpr:
                source: 'cmp<Tiny>(val, power)'
                name: cmp_9
                args:
                - 
                  SliceExpr:
                    source: 'val'
                    var: val
                    offset: 0
                    size: 9
                - 
                  SliceExpr:
                    source: 'power'
                    var: power
                    offset: 0
                    size: 9
    return: 
    # done ? log : log3checkMore<Tiny>(val, power, log)
      CondExpr:
        source: 'done ? log : log3checkMore<Tiny>(val, power, log)'
        if: 
          SliceExpr:
            source: 'done'
            var: done
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'log'
            var: log
            offset: 0
            size: 9
        else:
          FuncExpr:
            source: 'log3checkMore<Tiny>(val, power, log)'
            name: log3checkMore_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 9
            - 
              SliceExpr:
                source: 'power'
                var: power
                offset: 0
                size: 9
            - 
              SliceExpr:
                source: 'log'
                var: log
                offset: 0
                size: 9
# 
# func Tiny log3checkMore<Tiny>(Tiny val, Tiny power, Tiny log) {
#   done = isZero[sign<Tiny>(power)]
#   return done ? log : log3checkNext<Tiny>(val, power, log)
# }
  log3checkMore_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: power
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: log
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      done:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(power)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'power'
                    var: power
                    offset: 0
                    size: 9
    return: 
    # done ? log : log3checkNext<Tiny>(val, power, log)
      CondExpr:
        source: 'done ? log : log3checkNext<Tiny>(val, power, log)'
        if: 
          SliceExpr:
            source: 'done'
            var: done
            offset: 0
            size: 1
        then: 
          SliceExpr:
            source: 'log'
            var: log
            offset: 0
            size: 9
        else:
          FuncExpr:
            source: 'log3checkNext<Tiny>(val, power, log)'
            name: log3checkNext_9
            args:
            - 
              SliceExpr:
                source: 'val'
                var: val
                offset: 0
                size: 9
            - 
              SliceExpr:
                source: 'power'
                var: power
                offset: 0
                size: 9
            - 
              SliceExpr:
                source: 'log'
                var: log
                offset: 0
                size: 9
# 
# func Tiny log3checkNext<Tiny>(Tiny val, Tiny power, Tiny log) {
#   return log3check<Tiny>(val, rshift<Tiny>(power), incr<Tiny>(log))
# }
  log3checkNext_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: power
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: log
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    return: 
    # log3check<Tiny>(val, rshift<Tiny>(power), incr<Tiny>(log))
      FuncExpr:
        source: 'log3check<Tiny>(val, rshift<Tiny>(power), incr<Tiny>(log))'
        name: log3check_9
        args:
        - 
          SliceExpr:
            source: 'val'
            var: val
            offset: 0
            size: 9
        - 
          FuncExpr:
            source: 'rshift<Tiny>(power)'
            name: rshift_9
            args:
            - 
              SliceExpr:
                source: 'power'
                var: power
                offset: 0
                size: 9
        - 
          FuncExpr:
            source: 'incr<Tiny>(log)'
            name: incr_9
            args:
            - 
              SliceExpr:
                source: 'log'
                var: log
                offset: 0
                size: 9
# 
# func Tiny max<Tiny>(Tiny lhs, Tiny rhs) {
#   return isGreater[cmp<Tiny>(lhs, rhs)] ? lhs : rhs
# }
  max_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    return: 
    # isGreater[cmp<Tiny>(lhs, rhs)] ? lhs : rhs
      CondExpr:
        source: 'isGreater[cmp<Tiny>(lhs, rhs)] ? lhs : rhs'
        if: 
          LutExpr:
            name: isGreater
            args: 
              - 
                FuncExpr:
                  source: 'cmp<Tiny>(lhs, rhs)'
                  name: cmp_9
                  args:
                  - 
                    SliceExpr:
                      source: 'lhs'
                      var: lhs
                      offset: 0
                      size: 9
                  - 
                    SliceExpr:
                      source: 'rhs'
                      var: rhs
                      offset: 0
                      size: 9
        then: 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 9
        else:
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 9
# 
# func Tiny min<Tiny>(Tiny lhs, Tiny rhs) {
#   return isLess[cmp<Tiny>(lhs, rhs)] ? lhs : rhs
# }
  min_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    return: 
    # isLess[cmp<Tiny>(lhs, rhs)] ? lhs : rhs
      CondExpr:
        source: 'isLess[cmp<Tiny>(lhs, rhs)] ? lhs : rhs'
        if: 
          LutExpr:
            name: isLess
            args: 
              - 
                FuncExpr:
                  source: 'cmp<Tiny>(lhs, rhs)'
                  name: cmp_9
                  args:
                  - 
                    SliceExpr:
                      source: 'lhs'
                      var: lhs
                      offset: 0
                      size: 9
                  - 
                    SliceExpr:
                      source: 'rhs'
                      var: rhs
                      offset: 0
                      size: 9
        then: 
          SliceExpr:
            source: 'lhs'
            var: lhs
            offset: 0
            size: 9
        else:
          SliceExpr:
            source: 'rhs'
            var: rhs
            offset: 0
            size: 9
# 
# func Tiny mod<Tiny>(Tiny lhs, Tiny rhs) {
#   ret = divMod<Tiny>(lhs, rhs)
#   return ret.remainder
# }
  mod_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      ret:
        FuncExpr:
          source: 'divMod<Tiny>(lhs, rhs)'
          name: divMod_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
    return: 
    # ret.remainder
      SliceExpr:
        source: 'ret.remainder'
        var: ret
        offset: 9
        size: 9
        fields: 
          - remainder
# 
# func Tiny ceilMod<Tiny>(Tiny lhs, Tiny rhs) {
#   ret = ceilDivMod<Tiny>(lhs, rhs)
#   return ret.remainder
# }
  ceilMod_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      ret:
        FuncExpr:
          source: 'ceilDivMod<Tiny>(lhs, rhs)'
          name: ceilDivMod_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
    return: 
    # ret.remainder
      SliceExpr:
        source: 'ret.remainder'
        var: ret
        offset: 9
        size: 9
        fields: 
          - remainder
# 
# func Tiny floorMod<Tiny>(Tiny lhs, Tiny rhs) {
#   ret = floorDivMod<Tiny>(lhs, rhs)
#   return ret.remainder
# }
  floorMod_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      ret:
        FuncExpr:
          source: 'floorDivMod<Tiny>(lhs, rhs)'
          name: floorDivMod_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
    return: 
    # ret.remainder
      SliceExpr:
        source: 'ret.remainder'
        var: ret
        offset: 9
        size: 9
        fields: 
          - remainder
# 
# func Tiny roundMod<Tiny>(Tiny lhs, Tiny rhs) {
#   ret = roundDivMod<Tiny>(lhs, rhs)
#   return ret.remainder
# }
  roundMod_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      ret:
        FuncExpr:
          source: 'roundDivMod<Tiny>(lhs, rhs)'
          name: roundDivMod_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
    return: 
    # ret.remainder
      SliceExpr:
        source: 'ret.remainder'
        var: ret
        offset: 9
        size: 9
        fields: 
          - remainder
# 
# func Tiny mul<Tiny>(Tiny lhs, Tiny rhs) {
#   lhsZero = isZero[sign<Tiny>(lhs)]
#   rhsZero = isZero[sign<Tiny>(rhs)]
#   product = fullMulNonZero<Tiny>(lhs, rhs)
#   return or[lhsZero, rhsZero] ? 0 : product[0 : Tiny]
# }
  mul_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    assigns: 
      lhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(lhs)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'lhs'
                    var: lhs
                    offset: 0
                    size: 9
      rhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny>(rhs)'
                name: sign_9
                args:
                - 
                  SliceExpr:
                    source: 'rhs'
                    var: rhs
                    offset: 0
                    size: 9
      product:
        FuncExpr:
          source: 'fullMulNonZero<Tiny>(lhs, rhs)'
          name: fullMulNonZero_9
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 9
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 9
    return: 
    # or[lhsZero, rhsZero] ? 0 : product[0 : Tiny]
      CondExpr:
        source: 'or[lhsZero, rhsZero] ? 0 : product[0 : Tiny]'
        if: 
          LutExpr:
            name: or
            args: 
              - 
                SliceExpr:
                  source: 'lhsZero'
                  var: lhsZero
                  offset: 0
                  size: 1
              - 
                SliceExpr:
                  source: 'rhsZero'
                  var: rhsZero
                  offset: 0
                  size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        else:
          SliceExpr:
            source: 'product[0 : Tiny]'
            var: product
            offset: 0
            size: 9
            start:
              ConstNumber:
                value: 0
            end:
              ConstTypeName:
                typeName: Tiny
                size: 9
# 
# func Int mul<Int>(Int lhs, Int rhs) {
#   lhsZero = isZero[sign<Int>(lhs)]
#   rhsZero = isZero[sign<Int>(rhs)]
#   product = fullMulNonZero<Int>(lhs, rhs)
#   return or[lhsZero, rhsZero] ? 0 : product[0 : Int]
# }
  mul_27:
    returnType: 
      ConstTypeName:
        typeName: Int
        size: 27
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
    assigns: 
      lhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Int>(lhs)'
                name: sign_27
                args:
                - 
                  SliceExpr:
                    source: 'lhs'
                    var: lhs
                    offset: 0
                    size: 27
      rhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Int>(rhs)'
                name: sign_27
                args:
                - 
                  SliceExpr:
                    source: 'rhs'
                    var: rhs
                    offset: 0
                    size: 27
      product:
        FuncExpr:
          source: 'fullMulNonZero<Int>(lhs, rhs)'
          name: fullMulNonZero_27
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 27
    return: 
    # or[lhsZero, rhsZero] ? 0 : product[0 : Int]
      CondExpr:
        source: 'or[lhsZero, rhsZero] ? 0 : product[0 : Int]'
        if: 
          LutExpr:
            name: or
            args: 
              - 
                SliceExpr:
                  source: 'lhsZero'
                  var: lhsZero
                  offset: 0
                  size: 1
              - 
                SliceExpr:
                  source: 'rhsZero'
                  var: rhsZero
                  offset: 0
                  size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000'
              trytes: '999999999'
        else:
          SliceExpr:
            source: 'product[0 : Int]'
            var: product
            offset: 0
            size: 27
            start:
              ConstNumber:
                value: 0
            end:
              ConstTypeName:
                typeName: Int
                size: 27
# 
# func Tiny pow3<Tiny>(Tiny power) {
#   return notNegative[sign<Tiny>(power)] ? pow3loop<Tiny>(1, power) : null
# }
  pow3_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: power
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    return: 
    # notNegative[sign<Tiny>(power)] ? pow3loop<Tiny>(1, power) : null
      CondExpr:
        source: 'notNegative[sign<Tiny>(power)] ? pow3loop<Tiny>(1, power) : null'
        if: 
          LutExpr:
            name: notNegative
            args: 
              - 
                FuncExpr:
                  source: 'sign<Tiny>(power)'
                  name: sign_9
                  args:
                  - 
                    SliceExpr:
                      source: 'power'
                      var: power
                      offset: 0
                      size: 9
        then: 
          FuncExpr:
            source: 'pow3loop<Tiny>(1, power)'
            name: pow3loop_9
            args:
            - 
              ValueExpr:
                  value: '1'
                  trits: '100000000'
                  trytes: 'A99'
            - 
              SliceExpr:
                source: 'power'
                var: power
                offset: 0
                size: 9
        else:
          NullExpr: ''
# 
# func Tiny pow3loop<Tiny>(Tiny val, Tiny power) {
#   return isZero[sign<Tiny>(power)] ? val : pow3loop<Tiny>(rshift<Tiny>(val), decr<Tiny>(power))
# }
  pow3loop_9:
    returnType: 
      ConstTypeName:
        typeName: Tiny
        size: 9
    params:
      - 
        argName: val
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
      - 
        argName: power
        size: 9
        type: 
          ConstTypeName:
            typeName: Tiny
            size: 9
    return: 
    # isZero[sign<Tiny>(power)] ? val : pow3loop<Tiny>(rshift<Tiny>(val), decr<Tiny>(power))
      CondExpr:
        source: 'isZero[sign<Tiny>(power)] ? val : pow3loop<Tiny>(rshift<Tiny>(val), decr<Tiny>(power))'
        if: 
          LutExpr:
            name: isZero
            args: 
              - 
                FuncExpr:
                  source: 'sign<Tiny>(power)'
                  name: sign_9
                  args:
                  - 
                    SliceExpr:
                      source: 'power'
                      var: power
                      offset: 0
                      size: 9
        then: 
          SliceExpr:
            source: 'val'
            var: val
            offset: 0
            size: 9
        else:
          FuncExpr:
            source: 'pow3loop<Tiny>(rshift<Tiny>(val), decr<Tiny>(power))'
            name: pow3loop_9
            args:
            - 
              FuncExpr:
                source: 'rshift<Tiny>(val)'
                name: rshift_9
                args:
                - 
                  SliceExpr:
                    source: 'val'
                    var: val
                    offset: 0
                    size: 9
            - 
              FuncExpr:
                source: 'decr<Tiny>(power)'
                name: decr_9
                args:
                - 
                  SliceExpr:
                    source: 'power'
                    var: power
                    offset: 0
                    size: 9
# 
# func Tryte rshift<Tryte>(Tryte val) {
#   return 0 & val[0 : Tryte - 1]
# }
  rshift_3:
    returnType: 
      ConstTypeName:
        typeName: Tryte
        size: 3
    params:
      - 
        argName: val
        size: 3
        type: 
          ConstTypeName:
            typeName: Tryte
            size: 3
    return: 
    # 0 & val[0 : Tryte - 1]
      ConcatExpr:
        source: '0 & val[0 : Tryte - 1]'
        lhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        rhs: 
          SliceExpr:
            source: 'val[0 : Tryte - 1]'
            var: val
            offset: 0
            size: 2
            start:
              ConstNumber:
                value: 0
            end:
              ConstExpr:
                operator: '-'
                lhs: 
                  ConstTypeName:
                    typeName: Tryte
                    size: 3
                rhs: 
                  ConstNumber:
                    value: 1
# 
# func Bool unequal<Int>(Int lhs, Int rhs) {
#   val0 = unequal<A>(lhs[0 : A], rhs[0 : A])
#   val1 = unequal<B>(lhs[A : B], rhs[A : B])
#   val2 = unequal<C>(lhs[A + B : C], rhs[A + B : C])
#   return or3[val0, val1, val2]
# }
  unequal_27:
    returnType: 
      ConstTypeName:
        typeName: Bool
        size: 1
    params:
      - 
        argName: lhs
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
      - 
        argName: rhs
        size: 27
        type: 
          ConstTypeName:
            typeName: Int
            size: 27
    assigns: 
      val0:
        FuncExpr:
          source: 'unequal<A>(lhs[0 : A], rhs[0 : A])'
          name: unequal_9
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
      val1:
        FuncExpr:
          source: 'unequal<B>(lhs[A : B], rhs[A : B])'
          name: unequal_9
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
      val2:
        FuncExpr:
          source: 'unequal<C>(lhs[A + B : C], rhs[A + B : C])'
          name: unequal_9
          args:
          - 
            SliceExpr:
              source: 'lhs[A + B : C]'
              var: lhs
              offset: 18
              size: 9
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 9
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 9
              end:
                ConstTypeName:
                  typeName: C
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[A + B : C]'
              var: rhs
              offset: 18
              size: 9
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 9
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 9
              end:
                ConstTypeName:
                  typeName: C
                  size: 9
    return: 
    # or3[val0, val1, val2]
      LutExpr:
        name: or3
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func Bool unequal<A>(A lhs, A rhs) {
#   val0 = unequal<A>(lhs[0 : A], rhs[0 : A])
#   val1 = unequal<B>(lhs[A : B], rhs[A : B])
#   val2 = unequal<C>(lhs[A + B : C], rhs[A + B : C])
#   return or3[val0, val1, val2]
# }
  unequal_9:
    returnType: 
      ConstTypeName:
        typeName: Bool
        size: 1
    params:
      - 
        argName: lhs
        size: 9
        type: 
          ConstTypeName:
            typeName: A
            size: 9
      - 
        argName: rhs
        size: 9
        type: 
          ConstTypeName:
            typeName: A
            size: 9
    assigns: 
      val0:
        FuncExpr:
          source: 'unequal<A>(lhs[0 : A], rhs[0 : A])'
          name: unequal_3
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 3
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 3
      val1:
        FuncExpr:
          source: 'unequal<B>(lhs[A : B], rhs[A : B])'
          name: unequal_3
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 3
              size: 3
              start:
                ConstTypeName:
                  typeName: A
                  size: 3
              end:
                ConstTypeName:
                  typeName: B
                  size: 3
      val2:
        FuncExpr:
          source: 'unequal<C>(lhs[A + B : C], rhs[A + B : C])'
          name: unequal_3
          args:
          - 
            SliceExpr:
              source: 'lhs[A + B : C]'
              var: lhs
              offset: 6
              size: 3
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 3
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 3
              end:
                ConstTypeName:
                  typeName: C
                  size: 3
          - 
            SliceExpr:
              source: 'rhs[A + B : C]'
              var: rhs
              offset: 6
              size: 3
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 3
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 3
              end:
                ConstTypeName:
                  typeName: C
                  size: 3
    return: 
    # or3[val0, val1, val2]
      LutExpr:
        name: or3
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func Bool unequal<A>(A lhs, A rhs) {
#   val0 = unequal<A>(lhs[0 : A], rhs[0 : A])
#   val1 = unequal<B>(lhs[A : B], rhs[A : B])
#   val2 = unequal<C>(lhs[A + B : C], rhs[A + B : C])
#   return or3[val0, val1, val2]
# }
  unequal_3:
    returnType: 
      ConstTypeName:
        typeName: Bool
        size: 1
    params:
      - 
        argName: lhs
        size: 3
        type: 
          ConstTypeName:
            typeName: A
            size: 3
      - 
        argName: rhs
        size: 3
        type: 
          ConstTypeName:
            typeName: A
            size: 3
    assigns: 
      val0:
        FuncExpr:
          source: 'unequal<A>(lhs[0 : A], rhs[0 : A])'
          name: unequal_1
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 1
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 1
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 1
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 1
      val1:
        FuncExpr:
          source: 'unequal<B>(lhs[A : B], rhs[A : B])'
          name: unequal_1
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 1
              size: 1
              start:
                ConstTypeName:
                  typeName: A
                  size: 1
              end:
                ConstTypeName:
                  typeName: B
                  size: 1
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 1
              size: 1
              start:
                ConstTypeName:
                  typeName: A
                  size: 1
              end:
                ConstTypeName:
                  typeName: B
                  size: 1
      val2:
        FuncExpr:
          source: 'unequal<C>(lhs[A + B : C], rhs[A + B : C])'
          name: unequal_1
          args:
          - 
            SliceExpr:
              source: 'lhs[A + B : C]'
              var: lhs
              offset: 2
              size: 1
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 1
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 1
              end:
                ConstTypeName:
                  typeName: C
                  size: 1
          - 
            SliceExpr:
              source: 'rhs[A + B : C]'
              var: rhs
              offset: 2
              size: 1
              start:
                ConstExpr:
                  operator: '+'
                  lhs: 
                    ConstTypeName:
                      typeName: A
                      size: 1
                  rhs: 
                    ConstTypeName:
                      typeName: B
                      size: 1
              end:
                ConstTypeName:
                  typeName: C
                  size: 1
    return: 
    # or3[val0, val1, val2]
      LutExpr:
        name: or3
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val2'
              var: val2
              offset: 0
              size: 1
# 
# func TCarry fullAdd<Tiny4>(Tiny4 lhs, Tiny4 rhs, Carry carry) {
#   add0 = fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)
#   add1 = fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)
#   return add0.value & add1
# }
  fullAdd_36:
    returnType: 
      ConstTypeName:
        typeName: TCarry
        size: 37
        fields:
          value: 
            size: '36'
            offset: '0'
          carry: 
            size: '1'
            offset: '36'
    params:
      - 
        argName: lhs
        size: 36
        type: 
          ConstTypeName:
            typeName: Tiny4
            size: 36
      - 
        argName: rhs
        size: 36
        type: 
          ConstTypeName:
            typeName: Tiny4
            size: 36
      - 
        argName: carry
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      add0:
        FuncExpr:
          source: 'fullAdd<A>(lhs[0 : A], rhs[0 : A], carry)'
          name: fullAdd_18
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 18
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 18
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 18
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 18
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 1
      add1:
        FuncExpr:
          source: 'fullAdd<B>(lhs[A : B], rhs[A : B], add0.carry)'
          name: fullAdd_18
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 18
              size: 18
              start:
                ConstTypeName:
                  typeName: A
                  size: 18
              end:
                ConstTypeName:
                  typeName: B
                  size: 18
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 18
              size: 18
              start:
                ConstTypeName:
                  typeName: A
                  size: 18
              end:
                ConstTypeName:
                  typeName: B
                  size: 18
          - 
            SliceExpr:
              source: 'add0.carry'
              var: add0
              offset: 18
              size: 1
              fields: 
                - carry
    return: 
    # add0.value & add1
      ConcatExpr:
        source: 'add0.value & add1'
        lhs: 
          SliceExpr:
            source: 'add0.value'
            var: add0
            offset: 0
            size: 18
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'add1'
            var: add1
            offset: 0
            size: 19
# 
# func Tiny4 rshift<Tiny4>(Tiny4 val) {
#   return 0 & val[0 : Tiny4 - 1]
# }
  rshift_36:
    returnType: 
      ConstTypeName:
        typeName: Tiny4
        size: 36
    params:
      - 
        argName: val
        size: 36
        type: 
          ConstTypeName:
            typeName: Tiny4
            size: 36
    return: 
    # 0 & val[0 : Tiny4 - 1]
      ConcatExpr:
        source: '0 & val[0 : Tiny4 - 1]'
        lhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        rhs: 
          SliceExpr:
            source: 'val[0 : Tiny4 - 1]'
            var: val
            offset: 0
            size: 35
            start:
              ConstNumber:
                value: 0
            end:
              ConstExpr:
                operator: '-'
                lhs: 
                  ConstTypeName:
                    typeName: Tiny4
                    size: 36
                rhs: 
                  ConstNumber:
                    value: 1
# 
# func Tiny4 lshift<Tiny4>(Tiny4 val) {
#   return val[1 : Tiny4 - 1] & 0
# }
  lshift_36:
    returnType: 
      ConstTypeName:
        typeName: Tiny4
        size: 36
    params:
      - 
        argName: val
        size: 36
        type: 
          ConstTypeName:
            typeName: Tiny4
            size: 36
    return: 
    # val[1 : Tiny4 - 1] & 0
      ConcatExpr:
        source: 'val[1 : Tiny4 - 1] & 0'
        lhs: 
          SliceExpr:
            source: 'val[1 : Tiny4 - 1]'
            var: val
            offset: 1
            size: 35
            start:
              ConstNumber:
                value: 1
            end:
              ConstExpr:
                operator: '-'
                lhs: 
                  ConstTypeName:
                    typeName: Tiny4
                    size: 36
                rhs: 
                  ConstNumber:
                    value: 1
        rhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
# 
# func T2 fullMul<Tiny4>(Tiny4 lhs, Tiny4 rhs) {
#   lhsZero = isZero[sign<Tiny4>(lhs)]
#   rhsZero = isZero[sign<Tiny4>(rhs)]
#   return or[lhsZero, rhsZero] ? 0 : fullMulNonZero<Tiny4>(lhs, rhs)
# }
  fullMul_36:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 72
    params:
      - 
        argName: lhs
        size: 36
        type: 
          ConstTypeName:
            typeName: Tiny4
            size: 36
      - 
        argName: rhs
        size: 36
        type: 
          ConstTypeName:
            typeName: Tiny4
            size: 36
    assigns: 
      lhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny4>(lhs)'
                name: sign_36
                args:
                - 
                  SliceExpr:
                    source: 'lhs'
                    var: lhs
                    offset: 0
                    size: 36
      rhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<Tiny4>(rhs)'
                name: sign_36
                args:
                - 
                  SliceExpr:
                    source: 'rhs'
                    var: rhs
                    offset: 0
                    size: 36
    return: 
    # or[lhsZero, rhsZero] ? 0 : fullMulNonZero<Tiny4>(lhs, rhs)
      CondExpr:
        source: 'or[lhsZero, rhsZero] ? 0 : fullMulNonZero<Tiny4>(lhs, rhs)'
        if: 
          LutExpr:
            name: or
            args: 
              - 
                SliceExpr:
                  source: 'lhsZero'
                  var: lhsZero
                  offset: 0
                  size: 1
              - 
                SliceExpr:
                  source: 'rhsZero'
                  var: rhsZero
                  offset: 0
                  size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: '999999999999999999999999'
        else:
          FuncExpr:
            source: 'fullMulNonZero<Tiny4>(lhs, rhs)'
            name: fullMulNonZero_36
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 36
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 36
# 
# func T2 fullMulNonZero<Tiny4>(Tiny4 lhs, Tiny4 rhs) {
#   zero = as<P>(0)
#   product = fullMulNonZero<P3>(lhs & zero, rhs & zero)
#   return product[0 : T2]
# }
  fullMulNonZero_36:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 72
    params:
      - 
        argName: lhs
        size: 36
        type: 
          ConstTypeName:
            typeName: Tiny4
            size: 36
      - 
        argName: rhs
        size: 36
        type: 
          ConstTypeName:
            typeName: Tiny4
            size: 36
    assigns: 
      zero:
        FuncExpr:
          source: 'as<P>(0)'
          name: as_18
          args:
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000'
                trytes: '999999'
      product:
        FuncExpr:
          source: 'fullMulNonZero<P3>(lhs & zero, rhs & zero)'
          name: fullMulNonZero_54
          args:
          - 
            ConcatExpr:
              source: 'lhs & zero'
              lhs: 
                SliceExpr:
                  source: 'lhs'
                  var: lhs
                  offset: 0
                  size: 36
              rhs: 
                SliceExpr:
                  source: 'zero'
                  var: zero
                  offset: 0
                  size: 18
          - 
            ConcatExpr:
              source: 'rhs & zero'
              lhs: 
                SliceExpr:
                  source: 'rhs'
                  var: rhs
                  offset: 0
                  size: 36
              rhs: 
                SliceExpr:
                  source: 'zero'
                  var: zero
                  offset: 0
                  size: 18
    return: 
    # product[0 : T2]
      SliceExpr:
        source: 'product[0 : T2]'
        var: product
        offset: 0
        size: 72
        start:
          ConstNumber:
            value: 0
        end:
          ConstTypeName:
            typeName: T2
            size: 72
# 
# func T2 fullMul<P3>(P3 lhs, P3 rhs) {
#   lhsZero = isZero[sign<P3>(lhs)]
#   rhsZero = isZero[sign<P3>(rhs)]
#   return or[lhsZero, rhsZero] ? 0 : fullMulNonZero<P3>(lhs, rhs)
# }
  fullMul_54:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 108
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: P3
            size: 54
      - 
        argName: rhs
        size: 54
        type: 
          ConstTypeName:
            typeName: P3
            size: 54
    assigns: 
      lhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<P3>(lhs)'
                name: sign_54
                args:
                - 
                  SliceExpr:
                    source: 'lhs'
                    var: lhs
                    offset: 0
                    size: 54
      rhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<P3>(rhs)'
                name: sign_54
                args:
                - 
                  SliceExpr:
                    source: 'rhs'
                    var: rhs
                    offset: 0
                    size: 54
    return: 
    # or[lhsZero, rhsZero] ? 0 : fullMulNonZero<P3>(lhs, rhs)
      CondExpr:
        source: 'or[lhsZero, rhsZero] ? 0 : fullMulNonZero<P3>(lhs, rhs)'
        if: 
          LutExpr:
            name: or
            args: 
              - 
                SliceExpr:
                  source: 'lhsZero'
                  var: lhsZero
                  offset: 0
                  size: 1
              - 
                SliceExpr:
                  source: 'rhsZero'
                  var: rhsZero
                  offset: 0
                  size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: '999999999999999999999999999999999999'
        else:
          FuncExpr:
            source: 'fullMulNonZero<P3>(lhs, rhs)'
            name: fullMulNonZero_54
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 54
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 54
# 
# func T2 fullMulNonZero<P3>(P3 lhs, P3 rhs) {
#   zero = as<P>(0)
#   product = fullMulNonZero<P3>(lhs & zero, rhs & zero)
#   return product[0 : T2]
# }
  fullMulNonZero_54:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 108
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: P3
            size: 54
      - 
        argName: rhs
        size: 54
        type: 
          ConstTypeName:
            typeName: P3
            size: 54
    assigns: 
      zero:
        FuncExpr:
          source: 'as<P>(0)'
          name: as_27
          args:
          - 
            ValueExpr:
                value: '0'
                trits: '000000000000000000000000000'
                trytes: '999999999'
      product:
        FuncExpr:
          source: 'fullMulNonZero<P3>(lhs & zero, rhs & zero)'
          name: fullMulNonZero_81
          args:
          - 
            ConcatExpr:
              source: 'lhs & zero'
              lhs: 
                SliceExpr:
                  source: 'lhs'
                  var: lhs
                  offset: 0
                  size: 54
              rhs: 
                SliceExpr:
                  source: 'zero'
                  var: zero
                  offset: 0
                  size: 27
          - 
            ConcatExpr:
              source: 'rhs & zero'
              lhs: 
                SliceExpr:
                  source: 'rhs'
                  var: rhs
                  offset: 0
                  size: 54
              rhs: 
                SliceExpr:
                  source: 'zero'
                  var: zero
                  offset: 0
                  size: 27
    return: 
    # product[0 : T2]
      SliceExpr:
        source: 'product[0 : T2]'
        var: product
        offset: 0
        size: 108
        start:
          ConstNumber:
            value: 0
        end:
          ConstTypeName:
            typeName: T2
            size: 108
# 
# func T2 fullMul<P3>(P3 lhs, P3 rhs) {
#   lhsZero = isZero[sign<P3>(lhs)]
#   rhsZero = isZero[sign<P3>(rhs)]
#   return or[lhsZero, rhsZero] ? 0 : fullMulNonZero<P3>(lhs, rhs)
# }
  fullMul_81:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 162
    params:
      - 
        argName: lhs
        size: 81
        type: 
          ConstTypeName:
            typeName: P3
            size: 81
      - 
        argName: rhs
        size: 81
        type: 
          ConstTypeName:
            typeName: P3
            size: 81
    assigns: 
      lhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<P3>(lhs)'
                name: sign_81
                args:
                - 
                  SliceExpr:
                    source: 'lhs'
                    var: lhs
                    offset: 0
                    size: 81
      rhsZero:
        LutExpr:
          name: isZero
          args: 
            - 
              FuncExpr:
                source: 'sign<P3>(rhs)'
                name: sign_81
                args:
                - 
                  SliceExpr:
                    source: 'rhs'
                    var: rhs
                    offset: 0
                    size: 81
    return: 
    # or[lhsZero, rhsZero] ? 0 : fullMulNonZero<P3>(lhs, rhs)
      CondExpr:
        source: 'or[lhsZero, rhsZero] ? 0 : fullMulNonZero<P3>(lhs, rhs)'
        if: 
          LutExpr:
            name: or
            args: 
              - 
                SliceExpr:
                  source: 'lhsZero'
                  var: lhsZero
                  offset: 0
                  size: 1
              - 
                SliceExpr:
                  source: 'rhsZero'
                  var: rhsZero
                  offset: 0
                  size: 1
        then: 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: '999999999999999999999999999999999999999999999999999999'
        else:
          FuncExpr:
            source: 'fullMulNonZero<P3>(lhs, rhs)'
            name: fullMulNonZero_81
            args:
            - 
              SliceExpr:
                source: 'lhs'
                var: lhs
                offset: 0
                size: 81
            - 
              SliceExpr:
                source: 'rhs'
                var: rhs
                offset: 0
                size: 81
# 
# func T2 fullMulNonZero<P3>(P3 lhs, P3 rhs) {
#   A = lhs[P * 0 : P]
#   B = lhs[P * 1 : P]
#   C = lhs[P * 2 : P]
#   D = rhs[P * 0 : P]
#   E = rhs[P * 1 : P]
#   F = rhs[P * 2 : P]
#   AD = fullMul<P>(A, D)
#   AE = fullMul<P>(A, E)
#   AF = fullMul<P>(A, F)
#   BD = fullMul<P>(B, D)
#   BE = fullMul<P>(B, E)
#   BF = fullMul<P>(B, F)
#   CD = fullMul<P>(C, D)
#   CE = fullMul<P>(C, E)
#   CF = fullMul<P>(C, F)
#   tryte0 = AD[P * 0 : P]
#   carry0 = AD[P * 1 : P]
#   AEBD = addProduct<P>(AE, BD)
#   AEBDc = addCarryToProduct<P>(AEBD.value, carry0, 0)
#   tryte1 = AEBDc[P * 0 : P]
#   carry1 = AEBDc[P * 1 : P]
#   AFBE = addProduct<P>(AF, BE)
#   AFBEc = addCarryToProduct<P>(AFBE.value, carry1, 0)
#   AFBEcCD = addProduct<P>(AFBEc, CD)
#   tryte2 = AFBEcCD[P * 0 : P]
#   carry2 = AFBEcCD[P * 1 : P]
#   BFCE = addProduct<P>(BF, CE)
#   BFCEc = addCarryToProduct<P>(BFCE.value, carry2, 0)
#   tryte3 = BFCEc[P * 0 : P]
#   carry3 = BFCEc[P * 1 : P]
#   CFc = addCarryToProduct<P>(CF, carry3, AFBEcCD.carry)
#   return tryte0 & tryte1 & tryte2 & tryte3 & CFc
# }
  fullMulNonZero_81:
    returnType: 
      ConstTypeName:
        typeName: T2
        size: 162
    params:
      - 
        argName: lhs
        size: 81
        type: 
          ConstTypeName:
            typeName: P3
            size: 81
      - 
        argName: rhs
        size: 81
        type: 
          ConstTypeName:
            typeName: P3
            size: 81
    assigns: 
      A:
        SliceExpr:
          source: 'lhs[P * 0 : P]'
          var: lhs
          offset: 0
          size: 27
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 27
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 27
      B:
        SliceExpr:
          source: 'lhs[P * 1 : P]'
          var: lhs
          offset: 27
          size: 27
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 27
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 27
      C:
        SliceExpr:
          source: 'lhs[P * 2 : P]'
          var: lhs
          offset: 54
          size: 27
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 27
              rhs: 
                ConstNumber:
                  value: 2
          end:
            ConstTypeName:
              typeName: P
              size: 27
      D:
        SliceExpr:
          source: 'rhs[P * 0 : P]'
          var: rhs
          offset: 0
          size: 27
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 27
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 27
      E:
        SliceExpr:
          source: 'rhs[P * 1 : P]'
          var: rhs
          offset: 27
          size: 27
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 27
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 27
      F:
        SliceExpr:
          source: 'rhs[P * 2 : P]'
          var: rhs
          offset: 54
          size: 27
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 27
              rhs: 
                ConstNumber:
                  value: 2
          end:
            ConstTypeName:
              typeName: P
              size: 27
      AD:
        FuncExpr:
          source: 'fullMul<P>(A, D)'
          name: fullMul_27
          args:
          - 
            SliceExpr:
              source: 'A'
              var: A
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'D'
              var: D
              offset: 0
              size: 27
      AE:
        FuncExpr:
          source: 'fullMul<P>(A, E)'
          name: fullMul_27
          args:
          - 
            SliceExpr:
              source: 'A'
              var: A
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'E'
              var: E
              offset: 0
              size: 27
      AF:
        FuncExpr:
          source: 'fullMul<P>(A, F)'
          name: fullMul_27
          args:
          - 
            SliceExpr:
              source: 'A'
              var: A
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'F'
              var: F
              offset: 0
              size: 27
      BD:
        FuncExpr:
          source: 'fullMul<P>(B, D)'
          name: fullMul_27
          args:
          - 
            SliceExpr:
              source: 'B'
              var: B
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'D'
              var: D
              offset: 0
              size: 27
      BE:
        FuncExpr:
          source: 'fullMul<P>(B, E)'
          name: fullMul_27
          args:
          - 
            SliceExpr:
              source: 'B'
              var: B
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'E'
              var: E
              offset: 0
              size: 27
      BF:
        FuncExpr:
          source: 'fullMul<P>(B, F)'
          name: fullMul_27
          args:
          - 
            SliceExpr:
              source: 'B'
              var: B
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'F'
              var: F
              offset: 0
              size: 27
      CD:
        FuncExpr:
          source: 'fullMul<P>(C, D)'
          name: fullMul_27
          args:
          - 
            SliceExpr:
              source: 'C'
              var: C
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'D'
              var: D
              offset: 0
              size: 27
      CE:
        FuncExpr:
          source: 'fullMul<P>(C, E)'
          name: fullMul_27
          args:
          - 
            SliceExpr:
              source: 'C'
              var: C
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'E'
              var: E
              offset: 0
              size: 27
      CF:
        FuncExpr:
          source: 'fullMul<P>(C, F)'
          name: fullMul_27
          args:
          - 
            SliceExpr:
              source: 'C'
              var: C
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'F'
              var: F
              offset: 0
              size: 27
      tryte0:
        SliceExpr:
          source: 'AD[P * 0 : P]'
          var: AD
          offset: 0
          size: 27
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 27
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 27
      carry0:
        SliceExpr:
          source: 'AD[P * 1 : P]'
          var: AD
          offset: 27
          size: 27
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 27
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 27
      AEBD:
        FuncExpr:
          source: 'addProduct<P>(AE, BD)'
          name: addProduct_27
          args:
          - 
            SliceExpr:
              source: 'AE'
              var: AE
              offset: 0
              size: 54
          - 
            SliceExpr:
              source: 'BD'
              var: BD
              offset: 0
              size: 54
      AEBDc:
        FuncExpr:
          source: 'addCarryToProduct<P>(AEBD.value, carry0, 0)'
          name: addCarryToProduct_27
          args:
          - 
            SliceExpr:
              source: 'AEBD.value'
              var: AEBD
              offset: 0
              size: 54
              fields: 
                - value
          - 
            SliceExpr:
              source: 'carry0'
              var: carry0
              offset: 0
              size: 27
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      tryte1:
        SliceExpr:
          source: 'AEBDc[P * 0 : P]'
          var: AEBDc
          offset: 0
          size: 27
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 27
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 27
      carry1:
        SliceExpr:
          source: 'AEBDc[P * 1 : P]'
          var: AEBDc
          offset: 27
          size: 27
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 27
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 27
      AFBE:
        FuncExpr:
          source: 'addProduct<P>(AF, BE)'
          name: addProduct_27
          args:
          - 
            SliceExpr:
              source: 'AF'
              var: AF
              offset: 0
              size: 54
          - 
            SliceExpr:
              source: 'BE'
              var: BE
              offset: 0
              size: 54
      AFBEc:
        FuncExpr:
          source: 'addCarryToProduct<P>(AFBE.value, carry1, 0)'
          name: addCarryToProduct_27
          args:
          - 
            SliceExpr:
              source: 'AFBE.value'
              var: AFBE
              offset: 0
              size: 54
              fields: 
                - value
          - 
            SliceExpr:
              source: 'carry1'
              var: carry1
              offset: 0
              size: 27
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      AFBEcCD:
        FuncExpr:
          source: 'addProduct<P>(AFBEc, CD)'
          name: addProduct_27
          args:
          - 
            SliceExpr:
              source: 'AFBEc'
              var: AFBEc
              offset: 0
              size: 54
          - 
            SliceExpr:
              source: 'CD'
              var: CD
              offset: 0
              size: 54
      tryte2:
        SliceExpr:
          source: 'AFBEcCD[P * 0 : P]'
          var: AFBEcCD
          offset: 0
          size: 27
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 27
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 27
      carry2:
        SliceExpr:
          source: 'AFBEcCD[P * 1 : P]'
          var: AFBEcCD
          offset: 27
          size: 27
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 27
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 27
      BFCE:
        FuncExpr:
          source: 'addProduct<P>(BF, CE)'
          name: addProduct_27
          args:
          - 
            SliceExpr:
              source: 'BF'
              var: BF
              offset: 0
              size: 54
          - 
            SliceExpr:
              source: 'CE'
              var: CE
              offset: 0
              size: 54
      BFCEc:
        FuncExpr:
          source: 'addCarryToProduct<P>(BFCE.value, carry2, 0)'
          name: addCarryToProduct_27
          args:
          - 
            SliceExpr:
              source: 'BFCE.value'
              var: BFCE
              offset: 0
              size: 54
              fields: 
                - value
          - 
            SliceExpr:
              source: 'carry2'
              var: carry2
              offset: 0
              size: 27
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      tryte3:
        SliceExpr:
          source: 'BFCEc[P * 0 : P]'
          var: BFCEc
          offset: 0
          size: 27
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 27
              rhs: 
                ConstNumber:
                  value: 0
          end:
            ConstTypeName:
              typeName: P
              size: 27
      carry3:
        SliceExpr:
          source: 'BFCEc[P * 1 : P]'
          var: BFCEc
          offset: 27
          size: 27
          start:
            ConstTerm:
              operator: '*'
              lhs: 
                ConstTypeName:
                  typeName: P
                  size: 27
              rhs: 
                ConstNumber:
                  value: 1
          end:
            ConstTypeName:
              typeName: P
              size: 27
      CFc:
        FuncExpr:
          source: 'addCarryToProduct<P>(CF, carry3, AFBEcCD.carry)'
          name: addCarryToProduct_27
          args:
          - 
            SliceExpr:
              source: 'CF'
              var: CF
              offset: 0
              size: 54
          - 
            SliceExpr:
              source: 'carry3'
              var: carry3
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'AFBEcCD.carry'
              var: AFBEcCD
              offset: 54
              size: 1
              fields: 
                - carry
    return: 
    # tryte0 & tryte1 & tryte2 & tryte3 & CFc
      ConcatExpr:
        source: 'tryte0 & tryte1 & tryte2 & tryte3 & CFc'
        lhs: 
          ConcatExpr:
            source: 'tryte0 & tryte1 & tryte2 & tryte3'
            lhs: 
              ConcatExpr:
                source: 'tryte0 & tryte1 & tryte2'
                lhs: 
                  ConcatExpr:
                    source: 'tryte0 & tryte1'
                    lhs: 
                      SliceExpr:
                        source: 'tryte0'
                        var: tryte0
                        offset: 0
                        size: 27
                    rhs: 
                      SliceExpr:
                        source: 'tryte1'
                        var: tryte1
                        offset: 0
                        size: 27
                rhs: 
                  SliceExpr:
                    source: 'tryte2'
                    var: tryte2
                    offset: 0
                    size: 27
            rhs: 
              SliceExpr:
                source: 'tryte3'
                var: tryte3
                offset: 0
                size: 27
        rhs: 
          SliceExpr:
            source: 'CFc'
            var: CFc
            offset: 0
            size: 54
# 
# func P2Carry addProduct<P>(P2 lhs, P2 rhs) {
#   lo = fullAdd<P>(lhs[P * 0 : P], rhs[P * 0 : P], 0)
#   hi = fullAdd<P>(lhs[P * 1 : P], rhs[P * 1 : P], lo.carry)
#   return lo.value & hi
# }
  addProduct_27:
    returnType: 
      ConstTypeName:
        typeName: P2Carry
        size: 55
        fields:
          value: 
            size: '54'
            offset: '0'
          carry: 
            size: '1'
            offset: '54'
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: P2
            size: 54
      - 
        argName: rhs
        size: 54
        type: 
          ConstTypeName:
            typeName: P2
            size: 54
    assigns: 
      lo:
        FuncExpr:
          source: 'fullAdd<P>(lhs[P * 0 : P], rhs[P * 0 : P], 0)'
          name: fullAdd_27
          args:
          - 
            SliceExpr:
              source: 'lhs[P * 0 : P]'
              var: lhs
              offset: 0
              size: 27
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 27
                  rhs: 
                    ConstNumber:
                      value: 0
              end:
                ConstTypeName:
                  typeName: P
                  size: 27
          - 
            SliceExpr:
              source: 'rhs[P * 0 : P]'
              var: rhs
              offset: 0
              size: 27
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 27
                  rhs: 
                    ConstNumber:
                      value: 0
              end:
                ConstTypeName:
                  typeName: P
                  size: 27
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
      hi:
        FuncExpr:
          source: 'fullAdd<P>(lhs[P * 1 : P], rhs[P * 1 : P], lo.carry)'
          name: fullAdd_27
          args:
          - 
            SliceExpr:
              source: 'lhs[P * 1 : P]'
              var: lhs
              offset: 27
              size: 27
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 27
                  rhs: 
                    ConstNumber:
                      value: 1
              end:
                ConstTypeName:
                  typeName: P
                  size: 27
          - 
            SliceExpr:
              source: 'rhs[P * 1 : P]'
              var: rhs
              offset: 27
              size: 27
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 27
                  rhs: 
                    ConstNumber:
                      value: 1
              end:
                ConstTypeName:
                  typeName: P
                  size: 27
          - 
            SliceExpr:
              source: 'lo.carry'
              var: lo
              offset: 27
              size: 1
              fields: 
                - carry
    return: 
    # lo.value & hi
      ConcatExpr:
        source: 'lo.value & hi'
        lhs: 
          SliceExpr:
            source: 'lo.value'
            var: lo
            offset: 0
            size: 27
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'hi'
            var: hi
            offset: 0
            size: 28
# 
# func P2 addCarryToProduct<P>(P2 lhs, P carry, Carry extraTrit) {
#   lo = fullAdd<P>(lhs[P * 0 : P], carry, extraTrit)
#   hi = halfAdd<P>(lhs[P * 1 : P], lo.carry)
#   return lo.value & hi.value
# }
  addCarryToProduct_27:
    returnType: 
      ConstTypeName:
        typeName: P2
        size: 54
    params:
      - 
        argName: lhs
        size: 54
        type: 
          ConstTypeName:
            typeName: P2
            size: 54
      - 
        argName: carry
        size: 27
        type: 
          ConstTypeName:
            typeName: P
            size: 27
      - 
        argName: extraTrit
        size: 1
        type: 
          ConstTypeName:
            typeName: Carry
            size: 1
    assigns: 
      lo:
        FuncExpr:
          source: 'fullAdd<P>(lhs[P * 0 : P], carry, extraTrit)'
          name: fullAdd_27
          args:
          - 
            SliceExpr:
              source: 'lhs[P * 0 : P]'
              var: lhs
              offset: 0
              size: 27
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 27
                  rhs: 
                    ConstNumber:
                      value: 0
              end:
                ConstTypeName:
                  typeName: P
                  size: 27
          - 
            SliceExpr:
              source: 'carry'
              var: carry
              offset: 0
              size: 27
          - 
            SliceExpr:
              source: 'extraTrit'
              var: extraTrit
              offset: 0
              size: 1
      hi:
        FuncExpr:
          source: 'halfAdd<P>(lhs[P * 1 : P], lo.carry)'
          name: halfAdd_27
          args:
          - 
            SliceExpr:
              source: 'lhs[P * 1 : P]'
              var: lhs
              offset: 27
              size: 27
              start:
                ConstTerm:
                  operator: '*'
                  lhs: 
                    ConstTypeName:
                      typeName: P
                      size: 27
                  rhs: 
                    ConstNumber:
                      value: 1
              end:
                ConstTypeName:
                  typeName: P
                  size: 27
          - 
            SliceExpr:
              source: 'lo.carry'
              var: lo
              offset: 27
              size: 1
              fields: 
                - carry
    return: 
    # lo.value & hi.value
      ConcatExpr:
        source: 'lo.value & hi.value'
        lhs: 
          SliceExpr:
            source: 'lo.value'
            var: lo
            offset: 0
            size: 27
            fields: 
              - value
        rhs: 
          SliceExpr:
            source: 'hi.value'
            var: hi
            offset: 0
            size: 27
            fields: 
              - value
# 
# func Tiny4 neg<Tiny4>(Tiny4 val) {
#   val0 = neg<A>(val[0 : A])
#   val1 = neg<B>(val[A : B])
#   return val0 & val1
# }
  neg_36:
    returnType: 
      ConstTypeName:
        typeName: Tiny4
        size: 36
    params:
      - 
        argName: val
        size: 36
        type: 
          ConstTypeName:
            typeName: Tiny4
            size: 36
    assigns: 
      val0:
        FuncExpr:
          source: 'neg<A>(val[0 : A])'
          name: neg_18
          args:
          - 
            SliceExpr:
              source: 'val[0 : A]'
              var: val
              offset: 0
              size: 18
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 18
      val1:
        FuncExpr:
          source: 'neg<B>(val[A : B])'
          name: neg_18
          args:
          - 
            SliceExpr:
              source: 'val[A : B]'
              var: val
              offset: 18
              size: 18
              start:
                ConstTypeName:
                  typeName: A
                  size: 18
              end:
                ConstTypeName:
                  typeName: B
                  size: 18
    return: 
    # val0 & val1
      ConcatExpr:
        source: 'val0 & val1'
        lhs: 
          SliceExpr:
            source: 'val0'
            var: val0
            offset: 0
            size: 18
        rhs: 
          SliceExpr:
            source: 'val1'
            var: val1
            offset: 0
            size: 18
# 
# func Bool equal<Tiny2>(Tiny2 lhs, Tiny2 rhs) {
#   val0 = equal<A>(lhs[0 : A], rhs[0 : A])
#   val1 = equal<B>(lhs[A : B], rhs[A : B])
#   return and[val0, val1]
# }
  equal_18:
    returnType: 
      ConstTypeName:
        typeName: Bool
        size: 1
    params:
      - 
        argName: lhs
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
      - 
        argName: rhs
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
    assigns: 
      val0:
        FuncExpr:
          source: 'equal<A>(lhs[0 : A], rhs[0 : A])'
          name: equal_9
          args:
          - 
            SliceExpr:
              source: 'lhs[0 : A]'
              var: lhs
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[0 : A]'
              var: rhs
              offset: 0
              size: 9
              start:
                ConstNumber:
                  value: 0
              end:
                ConstTypeName:
                  typeName: A
                  size: 9
      val1:
        FuncExpr:
          source: 'equal<B>(lhs[A : B], rhs[A : B])'
          name: equal_9
          args:
          - 
            SliceExpr:
              source: 'lhs[A : B]'
              var: lhs
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
          - 
            SliceExpr:
              source: 'rhs[A : B]'
              var: rhs
              offset: 9
              size: 9
              start:
                ConstTypeName:
                  typeName: A
                  size: 9
              end:
                ConstTypeName:
                  typeName: B
                  size: 9
    return: 
    # and[val0, val1]
      LutExpr:
        name: and
        args: 
          - 
            SliceExpr:
              source: 'val0'
              var: val0
              offset: 0
              size: 1
          - 
            SliceExpr:
              source: 'val1'
              var: val1
              offset: 0
              size: 1
# 
# func Int2 lshift<Int2>(Int2 val) {
#   return val[1 : Int2 - 1] & 0
# }
  lshift_54:
    returnType: 
      ConstTypeName:
        typeName: Int2
        size: 54
    params:
      - 
        argName: val
        size: 54
        type: 
          ConstTypeName:
            typeName: Int2
            size: 54
    return: 
    # val[1 : Int2 - 1] & 0
      ConcatExpr:
        source: 'val[1 : Int2 - 1] & 0'
        lhs: 
          SliceExpr:
            source: 'val[1 : Int2 - 1]'
            var: val
            offset: 1
            size: 53
            start:
              ConstNumber:
                value: 1
            end:
              ConstExpr:
                operator: '-'
                lhs: 
                  ConstTypeName:
                    typeName: Int2
                    size: 54
                rhs: 
                  ConstNumber:
                    value: 1
        rhs: 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
# 
# func Tiny2 add<Tiny2>(Tiny2 lhs, Tiny2 rhs) {
#   sum = fullAdd<Tiny2>(lhs, rhs, 0)
#   return sum.value
# }
  add_18:
    returnType: 
      ConstTypeName:
        typeName: Tiny2
        size: 18
    params:
      - 
        argName: lhs
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
      - 
        argName: rhs
        size: 18
        type: 
          ConstTypeName:
            typeName: Tiny2
            size: 18
    assigns: 
      sum:
        FuncExpr:
          source: 'fullAdd<Tiny2>(lhs, rhs, 0)'
          name: fullAdd_18
          args:
          - 
            SliceExpr:
              source: 'lhs'
              var: lhs
              offset: 0
              size: 18
          - 
            SliceExpr:
              source: 'rhs'
              var: rhs
              offset: 0
              size: 18
          - 
            ValueExpr:
                value: '0'
                trits: '0'
                trytes: '9'
    return: 
    # sum.value
      SliceExpr:
        source: 'sum.value'
        var: sum
        offset: 0
        size: 18
        fields: 
          - value
execs: 
  # test 1 = all<Trit>(1)
  -
    source: 'test 1 = all<Trit>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'all<Trit>(1)'
        name: all_1
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '1'
              trytes: 'A'
  # test 13 = all<Tryte>(1)
  -
    source: 'test 13 = all<Tryte>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '13'
          trits: '111'
          trytes: 'M'
    expr: 
      FuncExpr:
        source: 'all<Tryte>(1)'
        name: all_3
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '1'
              trytes: 'A'
  # test 9841 = all<Tiny>(1)
  -
    source: 'test 9841 = all<Tiny>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '9841'
          trits: '111111111'
          trytes: 'MMM'
    expr: 
      FuncExpr:
        source: 'all<Tiny>(1)'
        name: all_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '1'
              trytes: 'A'
  # test 3812798742493 = all<Int>(1)
  -
    source: 'test 3812798742493 = all<Int>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3812798742493'
          trits: '111111111111111111111111111'
          trytes: 'MMMMMMMMM'
    expr: 
      FuncExpr:
        source: 'all<Int>(1)'
        name: all_27
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '1'
              trytes: 'A'
  # test -221713244121518884974124815309574946401 = all<Huge>(-)
  -
    source: 'test -221713244121518884974124815309574946401 = all<Huge>(-)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-221713244121518884974124815309574946401'
          trits: '---------------------------------------------------------------------------------'
          trytes: 'NNNNNNNNNNNNNNNNNNNNNNNNNNN'
    expr: 
      FuncExpr:
        source: 'all<Huge>(-)'
        name: all_81
        args:
        - 
          ValueExpr:
              value: '-'
              trits: '-'
              trytes: 'Z'
  # test 0 = all<Huge>(0)
  -
    source: 'test 0 = all<Huge>(0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: '999999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'all<Huge>(0)'
        name: all_81
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
  # test 221713244121518884974124815309574946401 = all<Huge>(1)
  -
    source: 'test 221713244121518884974124815309574946401 = all<Huge>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '221713244121518884974124815309574946401'
          trits: '111111111111111111111111111111111111111111111111111111111111111111111111111111111'
          trytes: 'MMMMMMMMMMMMMMMMMMMMMMMMMMM'
    expr: 
      FuncExpr:
        source: 'all<Huge>(1)'
        name: all_81
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '1'
              trytes: 'A'
  # test 0 = arcmap<Hash, Transaction>(0, 123456, 0)
  -
    source: 'test 0 = arcmap<Hash, Transaction>(0, 123456, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits
          trytes
    expr: 
      FuncExpr:
        source: 'arcmap<Hash, Transaction>(0, 123456, 0)'
        name: arcmap_243_8019
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        - 
          ValueExpr:
              value: '123456'
              trits: '0110011-10-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'LIGF99999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '0'
              trits
              trytes
  # test 0 = arcmap<Hash, Transaction>(1, 123456, 999999)
  -
    source: 'test 0 = arcmap<Hash, Transaction>(1, 123456, 999999)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits
          trytes: '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'arcmap<Hash, Transaction>(1, 123456, 999999)'
        name: arcmap_243_8019
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '1'
              trytes: 'A'
        - 
          ValueExpr:
              value: '123456'
              trits: '0110011-10-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'LIGF99999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '999999'
              trits
              trytes
  # test 999999 = arcmap<Hash, Transaction>(0, 123456, 0)
  -
    source: 'test 999999 = arcmap<Hash, Transaction>(0, 123456, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '999999'
          trits
          trytes
    expr: 
      FuncExpr:
        source: 'arcmap<Hash, Transaction>(0, 123456, 0)'
        name: arcmap_243_8019
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        - 
          ValueExpr:
              value: '123456'
              trits: '0110011-10-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'LIGF99999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '0'
              trits
              trytes
  # test 999999 = arcmap<Hash, Transaction>(1, 123456, 999999)
  -
    source: 'test 999999 = arcmap<Hash, Transaction>(1, 123456, 999999)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '999999'
          trits
          trytes
    expr: 
      FuncExpr:
        source: 'arcmap<Hash, Transaction>(1, 123456, 999999)'
        name: arcmap_243_8019
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '1'
              trytes: 'A'
        - 
          ValueExpr:
              value: '123456'
              trits: '0110011-10-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'LIGF99999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '999999'
              trits
              trytes
  # test 999999 = arcmap<Hash, Transaction>(0, 123456, 0)
  -
    source: 'test 999999 = arcmap<Hash, Transaction>(0, 123456, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '999999'
          trits: ''
          trytes: '9TVXB9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'arcmap<Hash, Transaction>(0, 123456, 0)'
        name: arcmap_243_8019
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        - 
          ValueExpr:
              value: '123456'
              trits: '0110011-10-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'LIGF99999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '0'
              trits
              trytes
  # test 999999 = arcmap<Hash, Transaction>(-, 123456, 0)
  -
    source: 'test 999999 = arcmap<Hash, Transaction>(-, 123456, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '999999'
          trits: ''
          trytes
    expr: 
      FuncExpr:
        source: 'arcmap<Hash, Transaction>(-, 123456, 0)'
        name: arcmap_243_8019
        args:
        - 
          ValueExpr:
              value: '-'
              trits: '-'
              trytes: 'Z'
        - 
          ValueExpr:
              value: '123456'
              trits: '0110011-10-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'LIGF99999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '0'
              trits
              trytes: '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
  # test 999999 = arcmap<Hash, Transaction>(0, 123456, 0)
  -
    source: 'test 999999 = arcmap<Hash, Transaction>(0, 123456, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '999999'
          trits
          trytes
    expr: 
      FuncExpr:
        source: 'arcmap<Hash, Transaction>(0, 123456, 0)'
        name: arcmap_243_8019
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        - 
          ValueExpr:
              value: '123456'
              trits: '0110011-10-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'LIGF99999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '0'
              trits
              trytes
  # test 999999 = arcmap<Hash, Transaction>(-, 123456, 0)
  -
    source: 'test 999999 = arcmap<Hash, Transaction>(-, 123456, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '999999'
          trits
          trytes
    expr: 
      FuncExpr:
        source: 'arcmap<Hash, Transaction>(-, 123456, 0)'
        name: arcmap_243_8019
        args:
        - 
          ValueExpr:
              value: '-'
              trits: '-'
              trytes: 'Z'
        - 
          ValueExpr:
              value: '123456'
              trits: '0110011-10-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'LIGF99999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '0'
              trits
              trytes
  # test 0 = arcmap<Hash, Transaction>(0, 123456, 0)
  -
    source: 'test 0 = arcmap<Hash, Transaction>(0, 123456, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits
          trytes
    expr: 
      FuncExpr:
        source: 'arcmap<Hash, Transaction>(0, 123456, 0)'
        name: arcmap_243_8019
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        - 
          ValueExpr:
              value: '123456'
              trits: '0110011-10-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'LIGF99999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '0'
              trits
              trytes
  # test 1 = as<Trit>(1)
  -
    source: 'test 1 = as<Trit>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'as<Trit>(1)'
        name: as_1
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '1'
              trytes: 'A'
  # test 2 = as<Tryte>(2)
  -
    source: 'test 2 = as<Tryte>(2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10'
          trytes: 'B'
    expr: 
      FuncExpr:
        source: 'as<Tryte>(2)'
        name: as_3
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10'
              trytes: 'B'
  # test -10 = as<Tiny>(-10)
  -
    source: 'test -10 = as<Tiny>(-10)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-10'
          trits: '-0-000000'
          trytes: 'Q99'
    expr: 
      FuncExpr:
        source: 'as<Tiny>(-10)'
        name: as_9
        args:
        - 
          ValueExpr:
              value: '-10'
              trits: '-0-000000'
              trytes: 'Q99'
  # test 123 = as<Int>(123)
  -
    source: 'test 123 = as<Int>(123)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '123'
          trits: '0----1000000000000000000000'
          trytes: 'OE9999999'
    expr: 
      FuncExpr:
        source: 'as<Int>(123)'
        name: as_27
        args:
        - 
          ValueExpr:
              value: '123'
              trits: '0----1000000000000000000000'
              trytes: 'OE9999999'
  # test 0 = as<Huge>(0)
  -
    source: 'test 0 = as<Huge>(0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: '999999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'as<Huge>(0)'
        name: as_81
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: '999999999999999999999999999'
  # test true = equal<Int>(-1, -1)
  -
    source: 'test true = equal<Int>(-1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'equal<Int>(-1, -1)'
        name: equal_27
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000000000000'
              trytes: 'Z99999999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000000000000'
              trytes: 'Z99999999'
  # test false = equal<Int>(-1, 0)
  -
    source: 'test false = equal<Int>(-1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'equal<Int>(-1, 0)'
        name: equal_27
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000000000000'
              trytes: 'Z99999999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000'
              trytes: '999999999'
  # test false = equal<Int>(-1, 1)
  -
    source: 'test false = equal<Int>(-1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'equal<Int>(-1, 1)'
        name: equal_27
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000000000000'
              trytes: 'Z99999999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
  # test false = equal<Int>(0, -1)
  -
    source: 'test false = equal<Int>(0, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'equal<Int>(0, -1)'
        name: equal_27
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000'
              trytes: '999999999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000000000000'
              trytes: 'Z99999999'
  # test true = equal<Int>(0, 0)
  -
    source: 'test true = equal<Int>(0, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'equal<Int>(0, 0)'
        name: equal_27
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000'
              trytes: '999999999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000'
              trytes: '999999999'
  # test false = equal<Int>(0, 1)
  -
    source: 'test false = equal<Int>(0, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'equal<Int>(0, 1)'
        name: equal_27
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000'
              trytes: '999999999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
  # test false = equal<Int>(1, -1)
  -
    source: 'test false = equal<Int>(1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'equal<Int>(1, -1)'
        name: equal_27
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000000000000'
              trytes: 'Z99999999'
  # test false = equal<Int>(1, 0)
  -
    source: 'test false = equal<Int>(1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'equal<Int>(1, 0)'
        name: equal_27
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000'
              trytes: '999999999'
  # test true = equal<Int>(1, 1)
  -
    source: 'test true = equal<Int>(1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'equal<Int>(1, 1)'
        name: equal_27
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
  # test false = equal<Int>(10, 20)
  -
    source: 'test false = equal<Int>(10, 20)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'equal<Int>(10, 20)'
        name: equal_27
        args:
        - 
          ValueExpr:
              value: '10'
              trits: '101000000000000000000000000'
              trytes: 'J99999999'
        - 
          ValueExpr:
              value: '20'
              trits: '-1-100000000000000000000000'
              trytes: 'TA9999999'
  # test false = equal<Int>(-30, 40)
  -
    source: 'test false = equal<Int>(-30, 40)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'equal<Int>(-30, 40)'
        name: equal_27
        args:
        - 
          ValueExpr:
              value: '-30'
              trits: '0-0-00000000000000000000000'
              trytes: 'XZ9999999'
        - 
          ValueExpr:
              value: '40'
              trits: '111100000000000000000000000'
              trytes: 'MA9999999'
  # test false = equal<Int>(50, -60)
  -
    source: 'test false = equal<Int>(50, -60)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'equal<Int>(50, -60)'
        name: equal_27
        args:
        - 
          ValueExpr:
              value: '50'
              trits: '--0-10000000000000000000000'
              trytes: 'WB9999999'
        - 
          ValueExpr:
              value: '-60'
              trits: '01-1-0000000000000000000000'
              trytes: 'UY9999999'
  # test false = equal<Int>(-70, -80)
  -
    source: 'test false = equal<Int>(-70, -80)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'equal<Int>(-70, -80)'
        name: equal_27
        args:
        - 
          ValueExpr:
              value: '-70'
              trits: '-110-0000000000000000000000'
              trytes: 'KX9999999'
        - 
          ValueExpr:
              value: '-80'
              trits: '1000-0000000000000000000000'
              trytes: 'AX9999999'
  # test true = equal<Int>(90, 90)
  -
    source: 'test true = equal<Int>(90, 90)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'equal<Int>(90, 90)'
        name: equal_27
        args:
        - 
          ValueExpr:
              value: '90'
              trits: '001010000000000000000000000'
              trytes: 'IC9999999'
        - 
          ValueExpr:
              value: '90'
              trits: '001010000000000000000000000'
              trytes: 'IC9999999'
  # test 0 = lshift<Tryte>(0)
  -
    source: 'test 0 = lshift<Tryte>(0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'lshift<Tryte>(0)'
        name: lshift_3
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000'
              trytes: '9'
  # test 0 = lshift<Tryte>(1)
  -
    source: 'test 0 = lshift<Tryte>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'lshift<Tryte>(1)'
        name: lshift_3
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100'
              trytes: 'A'
  # test 1 = lshift<Tryte>(2)
  -
    source: 'test 1 = lshift<Tryte>(2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'lshift<Tryte>(2)'
        name: lshift_3
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10'
              trytes: 'B'
  # test 1 = lshift<Tryte>(3)
  -
    source: 'test 1 = lshift<Tryte>(3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'lshift<Tryte>(3)'
        name: lshift_3
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010'
              trytes: 'C'
  # test 3 = lshift<Tryte>(9)
  -
    source: 'test 3 = lshift<Tryte>(9)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3'
          trits: '010'
          trytes: 'C'
    expr: 
      FuncExpr:
        source: 'lshift<Tryte>(9)'
        name: lshift_3
        args:
        - 
          ValueExpr:
              value: '9'
              trits: '001'
              trytes: 'I'
  # test 0 = lshift<Tryte>(-1)
  -
    source: 'test 0 = lshift<Tryte>(-1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'lshift<Tryte>(-1)'
        name: lshift_3
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00'
              trytes: 'Z'
  # test -1 = lshift<Tryte>(-2)
  -
    source: 'test -1 = lshift<Tryte>(-2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'lshift<Tryte>(-2)'
        name: lshift_3
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0'
              trytes: 'Y'
  # test -1 = lshift<Tryte>(-3)
  -
    source: 'test -1 = lshift<Tryte>(-3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'lshift<Tryte>(-3)'
        name: lshift_3
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0'
              trytes: 'X'
  # test -3 = lshift<Tryte>(-9)
  -
    source: 'test -3 = lshift<Tryte>(-9)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-3'
          trits: '0-0'
          trytes: 'X'
    expr: 
      FuncExpr:
        source: 'lshift<Tryte>(-9)'
        name: lshift_3
        args:
        - 
          ValueExpr:
              value: '-9'
              trits: '00-'
              trytes: 'R'
  # test 4 = lshiftN<Tryte>(13, 1)
  -
    source: 'test 4 = lshiftN<Tryte>(13, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '4'
          trits: '110'
          trytes: 'D'
    expr: 
      FuncExpr:
        source: 'lshiftN<Tryte>(13, 1)'
        name: lshiftN_3
        args:
        - 
          ValueExpr:
              value: '13'
              trits: '111'
              trytes: 'M'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 1 = lshiftN<Tryte>(13, 2)
  -
    source: 'test 1 = lshiftN<Tryte>(13, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'lshiftN<Tryte>(13, 2)'
        name: lshiftN_3
        args:
        - 
          ValueExpr:
              value: '13'
              trits: '111'
              trytes: 'M'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 0 = lshiftN<Tryte>(13, 3)
  -
    source: 'test 0 = lshiftN<Tryte>(13, 3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'lshiftN<Tryte>(13, 3)'
        name: lshiftN_3
        args:
        - 
          ValueExpr:
              value: '13'
              trits: '111'
              trytes: 'M'
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
  # test 40 = lshiftN<Tiny>(9841, 5)
  -
    source: 'test 40 = lshiftN<Tiny>(9841, 5)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '40'
          trits: '111100000'
          trytes: 'MA9'
    expr: 
      FuncExpr:
        source: 'lshiftN<Tiny>(9841, 5)'
        name: lshiftN_9
        args:
        - 
          ValueExpr:
              value: '9841'
              trits: '111111111'
              trytes: 'MMM'
        - 
          ValueExpr:
              value: '5'
              trits: '--1000000'
              trytes: 'E99'
  # test 13 = lshiftN<Tiny>(9841, 6)
  -
    source: 'test 13 = lshiftN<Tiny>(9841, 6)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '13'
          trits: '111000000'
          trytes: 'M99'
    expr: 
      FuncExpr:
        source: 'lshiftN<Tiny>(9841, 6)'
        name: lshiftN_9
        args:
        - 
          ValueExpr:
              value: '9841'
              trits: '111111111'
              trytes: 'MMM'
        - 
          ValueExpr:
              value: '6'
              trits: '0-1000000'
              trytes: 'F99'
  # test -4 = lshiftN<Tiny>(-9841, 7)
  -
    source: 'test -4 = lshiftN<Tiny>(-9841, 7)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-4'
          trits: '--0000000'
          trytes: 'W99'
    expr: 
      FuncExpr:
        source: 'lshiftN<Tiny>(-9841, 7)'
        name: lshiftN_9
        args:
        - 
          ValueExpr:
              value: '-9841'
              trits: '---------'
              trytes: 'NNN'
        - 
          ValueExpr:
              value: '7'
              trits: '1-1000000'
              trytes: 'G99'
  # test 2 = lshiftN<Tiny>(4374, 7)
  -
    source: 'test 2 = lshiftN<Tiny>(4374, 7)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'lshiftN<Tiny>(4374, 7)'
        name: lshiftN_9
        args:
        - 
          ValueExpr:
              value: '4374'
              trits: '0000000-1'
              trytes: '99F'
        - 
          ValueExpr:
              value: '7'
              trits: '1-1000000'
              trytes: 'G99'
  # test 1 = lshiftN<Tiny>(9841, 8)
  -
    source: 'test 1 = lshiftN<Tiny>(9841, 8)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'lshiftN<Tiny>(9841, 8)'
        name: lshiftN_9
        args:
        - 
          ValueExpr:
              value: '9841'
              trits: '111111111'
              trytes: 'MMM'
        - 
          ValueExpr:
              value: '8'
              trits: '-01000000'
              trytes: 'H99'
  # test 1 = lshiftN<Tiny>(6561, 8)
  -
    source: 'test 1 = lshiftN<Tiny>(6561, 8)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'lshiftN<Tiny>(6561, 8)'
        name: lshiftN_9
        args:
        - 
          ValueExpr:
              value: '6561'
              trits: '000000001'
              trytes: '99I'
        - 
          ValueExpr:
              value: '8'
              trits: '-01000000'
              trytes: 'H99'
  # test 0 = lshiftN<Tiny>(9841, 9)
  -
    source: 'test 0 = lshiftN<Tiny>(9841, 9)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Tiny>(9841, 9)'
        name: lshiftN_9
        args:
        - 
          ValueExpr:
              value: '9841'
              trits: '111111111'
              trytes: 'MMM'
        - 
          ValueExpr:
              value: '9'
              trits: '001000000'
              trytes: 'I99'
  # test 3 = lshiftN<Int>(729, 5)
  -
    source: 'test 3 = lshiftN<Int>(729, 5)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3'
          trits: '010000000000000000000000000'
          trytes: 'C99999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Int>(729, 5)'
        name: lshiftN_27
        args:
        - 
          ValueExpr:
              value: '729'
              trits: '000000100000000000000000000'
              trytes: '99A999999'
        - 
          ValueExpr:
              value: '5'
              trits: '--1000000'
              trytes: 'E99'
  # test 3 = lshiftN<Int>(2187, 6)
  -
    source: 'test 3 = lshiftN<Int>(2187, 6)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3'
          trits: '010000000000000000000000000'
          trytes: 'C99999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Int>(2187, 6)'
        name: lshiftN_27
        args:
        - 
          ValueExpr:
              value: '2187'
              trits: '000000010000000000000000000'
              trytes: '99C999999'
        - 
          ValueExpr:
              value: '6'
              trits: '0-1000000'
              trytes: 'F99'
  # test 9 = lshiftN<Int>(847288609443, 23)
  -
    source: 'test 9 = lshiftN<Int>(847288609443, 23)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '9'
          trits: '001000000000000000000000000'
          trytes: 'I99999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Int>(847288609443, 23)'
        name: lshiftN_27
        args:
        - 
          ValueExpr:
              value: '847288609443'
              trits: '000000000000000000000000010'
              trytes: '99999999C'
        - 
          ValueExpr:
              value: '23'
              trits: '--0100000'
              trytes: 'WA9'
  # test -3 = lshiftN<Int>(-847288609443, 24)
  -
    source: 'test -3 = lshiftN<Int>(-847288609443, 24)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-3'
          trits: '0-0000000000000000000000000'
          trytes: 'X99999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Int>(-847288609443, 24)'
        name: lshiftN_27
        args:
        - 
          ValueExpr:
              value: '-847288609443'
              trits: '0000000000000000000000000-0'
              trytes: '99999999X'
        - 
          ValueExpr:
              value: '24'
              trits: '0-0100000'
              trytes: 'XA9'
  # test 1 = lshiftN<Int>(847288609443, 25)
  -
    source: 'test 1 = lshiftN<Int>(847288609443, 25)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000000000000000000000'
          trytes: 'A99999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Int>(847288609443, 25)'
        name: lshiftN_27
        args:
        - 
          ValueExpr:
              value: '847288609443'
              trits: '000000000000000000000000010'
              trytes: '99999999C'
        - 
          ValueExpr:
              value: '25'
              trits: '1-0100000'
              trytes: 'YA9'
  # test -4 = lshiftN<Int>(-3812798742493, 25)
  -
    source: 'test -4 = lshiftN<Int>(-3812798742493, 25)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-4'
          trits: '--0000000000000000000000000'
          trytes: 'W99999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Int>(-3812798742493, 25)'
        name: lshiftN_27
        args:
        - 
          ValueExpr:
              value: '-3812798742493'
              trits: '---------------------------'
              trytes: 'NNNNNNNNN'
        - 
          ValueExpr:
              value: '25'
              trits: '1-0100000'
              trytes: 'YA9'
  # test 1 = lshiftN<Int>(3812798742493, 26)
  -
    source: 'test 1 = lshiftN<Int>(3812798742493, 26)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000000000000000000000'
          trytes: 'A99999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Int>(3812798742493, 26)'
        name: lshiftN_27
        args:
        - 
          ValueExpr:
              value: '3812798742493'
              trits: '111111111111111111111111111'
              trytes: 'MMMMMMMMM'
        - 
          ValueExpr:
              value: '26'
              trits: '-00100000'
              trytes: 'ZA9'
  # test 0 = lshiftN<Int>(3812798742493, 27)
  -
    source: 'test 0 = lshiftN<Int>(3812798742493, 27)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000000'
          trytes: '999999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Int>(3812798742493, 27)'
        name: lshiftN_27
        args:
        - 
          ValueExpr:
              value: '3812798742493'
              trits: '111111111111111111111111111'
              trytes: 'MMMMMMMMM'
        - 
          ValueExpr:
              value: '27'
              trits: '000100000'
              trytes: '9A9'
  # test 3812798742492 = lshiftN<Int>(3812798742493, -1)
  -
    source: 'test 3812798742492 = lshiftN<Int>(3812798742493, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3812798742492'
          trits: '011111111111111111111111111'
          trytes: 'LMMMMMMMM'
    expr: 
      FuncExpr:
        source: 'lshiftN<Int>(3812798742493, -1)'
        name: lshiftN_27
        args:
        - 
          ValueExpr:
              value: '3812798742493'
              trits: '111111111111111111111111111'
              trytes: 'MMMMMMMMM'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 2541865828329 = lshiftN<Int>(3812798742493, -26)
  -
    source: 'test 2541865828329 = lshiftN<Int>(3812798742493, -26)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2541865828329'
          trits: '000000000000000000000000001'
          trytes: '99999999I'
    expr: 
      FuncExpr:
        source: 'lshiftN<Int>(3812798742493, -26)'
        name: lshiftN_27
        args:
        - 
          ValueExpr:
              value: '3812798742493'
              trits: '111111111111111111111111111'
              trytes: 'MMMMMMMMM'
        - 
          ValueExpr:
              value: '-26'
              trits: '100-00000'
              trytes: 'AZ9'
  # test 9 = lshiftN<Huge>(847288609443, 23)
  -
    source: 'test 9 = lshiftN<Huge>(847288609443, 23)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '9'
          trits: '001000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: 'I99999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Huge>(847288609443, 23)'
        name: lshiftN_81
        args:
        - 
          ValueExpr:
              value: '847288609443'
              trits: '000000000000000000000000010000000000000000000000000000000000000000000000000000000'
              trytes: '99999999C999999999999999999'
        - 
          ValueExpr:
              value: '23'
              trits: '--0100000'
              trytes: 'WA9'
  # test 1 = lshiftN<Huge>(205891132094649, 30)
  -
    source: 'test 1 = lshiftN<Huge>(205891132094649, 30)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: 'A99999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Huge>(205891132094649, 30)'
        name: lshiftN_81
        args:
        - 
          ValueExpr:
              value: '205891132094649'
              trits: '000000000000000000000000000000100000000000000000000000000000000000000000000000000'
              trytes: '9999999999A9999999999999999'
        - 
          ValueExpr:
              value: '30'
              trits: '010100000'
              trytes: 'CA9'
  # test 39 = lshiftN<Huge>(216238843032098665592047659376005194638, 77)
  -
    source: 'test 39 = lshiftN<Huge>(216238843032098665592047659376005194638, 77)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '39'
          trits: '011100000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: 'LA9999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Huge>(216238843032098665592047659376005194638, 77)'
        name: lshiftN_81
        args:
        - 
          ValueExpr:
              value: '216238843032098665592047659376005194638'
              trits: '111111111111111111111111111111111111111111111111111111111111111111111111111110111'
              trytes: 'MMMMMMMMMMMMMMMMMMMMMMMMMDM'
        - 
          ValueExpr:
              value: '77'
              trits: '--0010000'
              trytes: 'WC9'
  # test 1 = lshiftN<Huge>(49269609804781974438694403402127765867, 79)
  -
    source: 'test 1 = lshiftN<Huge>(49269609804781974438694403402127765867, 79)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: 'A99999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Huge>(49269609804781974438694403402127765867, 79)'
        name: lshiftN_81
        args:
        - 
          ValueExpr:
              value: '49269609804781974438694403402127765867'
              trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000010'
              trytes: '99999999999999999999999999C'
        - 
          ValueExpr:
              value: '79'
              trits: '1-0010000'
              trytes: 'YC9'
  # test 2 = lshiftN<Huge>(98539219609563948877388806804255531734, 79)
  -
    source: 'test 2 = lshiftN<Huge>(98539219609563948877388806804255531734, 79)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: 'B99999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Huge>(98539219609563948877388806804255531734, 79)'
        name: lshiftN_81
        args:
        - 
          ValueExpr:
              value: '98539219609563948877388806804255531734'
              trits: '0000000000000000000000000000000000000000000000000000000000000000000000000000000-1'
              trytes: '99999999999999999999999999F'
        - 
          ValueExpr:
              value: '79'
              trits: '1-0010000'
              trytes: 'YC9'
  # test 4 = lshiftN<Huge>(221713244121518884974124815309574946401, 79)
  -
    source: 'test 4 = lshiftN<Huge>(221713244121518884974124815309574946401, 79)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '4'
          trits: '110000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: 'D99999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Huge>(221713244121518884974124815309574946401, 79)'
        name: lshiftN_81
        args:
        - 
          ValueExpr:
              value: '221713244121518884974124815309574946401'
              trits: '111111111111111111111111111111111111111111111111111111111111111111111111111111111'
              trytes: 'MMMMMMMMMMMMMMMMMMMMMMMMMMM'
        - 
          ValueExpr:
              value: '79'
              trits: '1-0010000'
              trytes: 'YC9'
  # test -1 = lshiftN<Huge>(-221713244121518884974124815309574946401, 80)
  -
    source: 'test -1 = lshiftN<Huge>(-221713244121518884974124815309574946401, 80)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: 'Z99999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Huge>(-221713244121518884974124815309574946401, 80)'
        name: lshiftN_81
        args:
        - 
          ValueExpr:
              value: '-221713244121518884974124815309574946401'
              trits: '---------------------------------------------------------------------------------'
              trytes: 'NNNNNNNNNNNNNNNNNNNNNNNNNNN'
        - 
          ValueExpr:
              value: '80'
              trits: '-00010000'
              trytes: 'ZC9'
  # test 0 = lshiftN<Huge>(221713244121518884974124815309574946401, 81)
  -
    source: 'test 0 = lshiftN<Huge>(221713244121518884974124815309574946401, 81)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: '999999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Huge>(221713244121518884974124815309574946401, 81)'
        name: lshiftN_81
        args:
        - 
          ValueExpr:
              value: '221713244121518884974124815309574946401'
              trits: '111111111111111111111111111111111111111111111111111111111111111111111111111111111'
              trytes: 'MMMMMMMMMMMMMMMMMMMMMMMMMMM'
        - 
          ValueExpr:
              value: '81'
              trits: '000010000'
              trytes: '9C9'
  # test 0 = lshiftN<Huge>(-221713244121518884974124815309574946401, 81)
  -
    source: 'test 0 = lshiftN<Huge>(-221713244121518884974124815309574946401, 81)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: '999999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Huge>(-221713244121518884974124815309574946401, 81)'
        name: lshiftN_81
        args:
        - 
          ValueExpr:
              value: '-221713244121518884974124815309574946401'
              trits: '---------------------------------------------------------------------------------'
              trytes: 'NNNNNNNNNNNNNNNNNNNNNNNNNNN'
        - 
          ValueExpr:
              value: '81'
              trits: '000010000'
              trytes: '9C9'
  # test 221713244121518884974124815309574946400 = lshiftN<Huge>(221713244121518884974124815309574946401, -1)
  -
    source: 'test 221713244121518884974124815309574946400 = lshiftN<Huge>(221713244121518884974124815309574946401, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '221713244121518884974124815309574946400'
          trits: '011111111111111111111111111111111111111111111111111111111111111111111111111111111'
          trytes: 'LMMMMMMMMMMMMMMMMMMMMMMMMMM'
    expr: 
      FuncExpr:
        source: 'lshiftN<Huge>(221713244121518884974124815309574946401, -1)'
        name: lshiftN_81
        args:
        - 
          ValueExpr:
              value: '221713244121518884974124815309574946401'
              trits: '111111111111111111111111111111111111111111111111111111111111111111111111111111111'
              trytes: 'MMMMMMMMMMMMMMMMMMMMMMMMMMM'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 1 = lshiftN<Hash>(29063214161986986067637023528620257232321357468243916695175073145996989031241146647825183302277227705597018408555209, 242)
  -
    source: 'test 1 = lshiftN<Hash>(29063214161986986067637023528620257232321357468243916695175073145996989031241146647825183302277227705597018408555209, 242)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: 'A99999999999999999999999999999999999999999999999999999999999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Hash>(29063214161986986067637023528620257232321357468243916695175073145996989031241146647825183302277227705597018408555209, 242)'
        name: lshiftN_243
        args:
        - 
          ValueExpr:
              value: '29063214161986986067637023528620257232321357468243916695175073145996989031241146647825183302277227705597018408555209'
              trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001'
              trytes: '99999999999999999999999999999999999999999999999999999999999999999999999999999999I'
        - 
          ValueExpr:
              value: '242'
              trits: '-00001000'
              trytes: 'ZI9'
  # test 0 = lshiftN<Hash>(29063214161986986067637023528620257232321357468243916695175073145996989031241146647825183302277227705597018408555209, 243)
  -
    source: 'test 0 = lshiftN<Hash>(29063214161986986067637023528620257232321357468243916695175073145996989031241146647825183302277227705597018408555209, 243)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: '999999999999999999999999999999999999999999999999999999999999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'lshiftN<Hash>(29063214161986986067637023528620257232321357468243916695175073145996989031241146647825183302277227705597018408555209, 243)'
        name: lshiftN_243
        args:
        - 
          ValueExpr:
              value: '29063214161986986067637023528620257232321357468243916695175073145996989031241146647825183302277227705597018408555209'
              trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001'
              trytes: '99999999999999999999999999999999999999999999999999999999999999999999999999999999I'
        - 
          ValueExpr:
              value: '243'
              trits: '000001000'
              trytes: '9I9'
  # test 1 = lshiftN<Signature>(3, 1)
  -
    source: 'test 1 = lshiftN<Signature>(3, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes
    expr: 
      FuncExpr:
        source: 'lshiftN<Signature>(3, 1)'
        name: lshiftN_6561
        args:
        - 
          ValueExpr:
              value: '3'
              trits
              trytes
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 1 = lshiftN<Signature>(8230589863111210357596673796337694919342278319311694339603206000070559419320288282803635754418539885919066625428034127876279878883108899293640219865259974562639377556925189452547962215969109242904081001301652991642812190863757488809542687619521149555091077566285260699648566997913331124935750012683419480278265324704709064506370022752058994567791470216652915912131179781008338824413313755200770291122017484079151923804164743045513270690374568605873315465038870763718474232685399107776633885826318337776308280033394143959649004772869645934391822005526543183584730674577514082495314661439506384196082122301661045769099129696202042949647269663055873031056305227387753285002638309460321625291656479440763560995099953780402412487567278739610453616399023629005961546332922944143234837595601897832605380700674361464139900876451577103542643344780887563016479601601849045235298898392360352354448944966526296491666860400483983364177137479279611165885150978109929781633823287141532442389797778750281883498957595883145866514560546862614637990698391035629831441657989128165461126890969633468745609968611854024637956913515176846344657641309213895543788363949425099727704219650360786829092902664657118849536286504571694021572553319861748997959201156207500966096912786365345150746748045862670481557267240482528172064414439108690967464719299114062906464047781432373225431109414260938796501124243869291997775654899563459305584868404961677175271971493392372983350748100871923481520957095938091813451874643140888185097815855547240261834590570324243272485377476090014510927881706560442597225466052517846087895220668894181562683652079116948166892799408709801801042424134908577896777139153401278930879135880514822532358202558778548252783006271295931464373789833415422113378042684704524253395000342090965255544762323691502050462533804539814165342272956986221385782145782363200315158022350305517462009739378033357321470549770046377498141323823641131792933368552519825723390686549876232662466437058452822400184550499912050260045550602856865897916675490563823577217000164393136913061366882873165871401539128696588812887805902619051328183139481136471472224218495757168331941333361455862987536101539535647097997155726862989767857044497698572175083932744256831153747470654965083319524363984804414976483500695379951004960906022919265992223880029915313687225285433958554741308836572625273780224870440932103387756203009852590231346524745163512263571785009586913259165550005823124131028681760343301055045410250136397638769001026568034317588052924444253288420947455060462115170063326253249775306282542126030257143131854795644554131517751559505121069331658632092163376707006451515250366124576319586412301719395394682808987121009650531435946765331309941905485085341518629590809196737886352113435189625958458635685474283505665755841522714007584095553600387889475107826541600166342039596399858689745490575489128682332108686685428290263771574420481929338652087236062661303355816352146870133697373985760944519201797551547535706810691428423217228199287358988321123067723175982098664777426384449556211638403569384651112240360284070600778878581456351168231660781326479363201, 6560)
  -
    source: 'test 1 = lshiftN<Signature>(8230589863111210357596673796337694919342278319311694339603206000070559419320288282803635754418539885919066625428034127876279878883108899293640219865259974562639377556925189452547962215969109242904081001301652991642812190863757488809542687619521149555091077566285260699648566997913331124935750012683419480278265324704709064506370022752058994567791470216652915912131179781008338824413313755200770291122017484079151923804164743045513270690374568605873315465038870763718474232685399107776633885826318337776308280033394143959649004772869645934391822005526543183584730674577514082495314661439506384196082122301661045769099129696202042949647269663055873031056305227387753285002638309460321625291656479440763560995099953780402412487567278739610453616399023629005961546332922944143234837595601897832605380700674361464139900876451577103542643344780887563016479601601849045235298898392360352354448944966526296491666860400483983364177137479279611165885150978109929781633823287141532442389797778750281883498957595883145866514560546862614637990698391035629831441657989128165461126890969633468745609968611854024637956913515176846344657641309213895543788363949425099727704219650360786829092902664657118849536286504571694021572553319861748997959201156207500966096912786365345150746748045862670481557267240482528172064414439108690967464719299114062906464047781432373225431109414260938796501124243869291997775654899563459305584868404961677175271971493392372983350748100871923481520957095938091813451874643140888185097815855547240261834590570324243272485377476090014510927881706560442597225466052517846087895220668894181562683652079116948166892799408709801801042424134908577896777139153401278930879135880514822532358202558778548252783006271295931464373789833415422113378042684704524253395000342090965255544762323691502050462533804539814165342272956986221385782145782363200315158022350305517462009739378033357321470549770046377498141323823641131792933368552519825723390686549876232662466437058452822400184550499912050260045550602856865897916675490563823577217000164393136913061366882873165871401539128696588812887805902619051328183139481136471472224218495757168331941333361455862987536101539535647097997155726862989767857044497698572175083932744256831153747470654965083319524363984804414976483500695379951004960906022919265992223880029915313687225285433958554741308836572625273780224870440932103387756203009852590231346524745163512263571785009586913259165550005823124131028681760343301055045410250136397638769001026568034317588052924444253288420947455060462115170063326253249775306282542126030257143131854795644554131517751559505121069331658632092163376707006451515250366124576319586412301719395394682808987121009650531435946765331309941905485085341518629590809196737886352113435189625958458635685474283505665755841522714007584095553600387889475107826541600166342039596399858689745490575489128682332108686685428290263771574420481929338652087236062661303355816352146870133697373985760944519201797551547535706810691428423217228199287358988321123067723175982098664777426384449556211638403569384651112240360284070600778878581456351168231660781326479363201, 6560)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits
          trytes
    expr: 
      FuncExpr:
        source: 'lshiftN<Signature>(8230589863111210357596673796337694919342278319311694339603206000070559419320288282803635754418539885919066625428034127876279878883108899293640219865259974562639377556925189452547962215969109242904081001301652991642812190863757488809542687619521149555091077566285260699648566997913331124935750012683419480278265324704709064506370022752058994567791470216652915912131179781008338824413313755200770291122017484079151923804164743045513270690374568605873315465038870763718474232685399107776633885826318337776308280033394143959649004772869645934391822005526543183584730674577514082495314661439506384196082122301661045769099129696202042949647269663055873031056305227387753285002638309460321625291656479440763560995099953780402412487567278739610453616399023629005961546332922944143234837595601897832605380700674361464139900876451577103542643344780887563016479601601849045235298898392360352354448944966526296491666860400483983364177137479279611165885150978109929781633823287141532442389797778750281883498957595883145866514560546862614637990698391035629831441657989128165461126890969633468745609968611854024637956913515176846344657641309213895543788363949425099727704219650360786829092902664657118849536286504571694021572553319861748997959201156207500966096912786365345150746748045862670481557267240482528172064414439108690967464719299114062906464047781432373225431109414260938796501124243869291997775654899563459305584868404961677175271971493392372983350748100871923481520957095938091813451874643140888185097815855547240261834590570324243272485377476090014510927881706560442597225466052517846087895220668894181562683652079116948166892799408709801801042424134908577896777139153401278930879135880514822532358202558778548252783006271295931464373789833415422113378042684704524253395000342090965255544762323691502050462533804539814165342272956986221385782145782363200315158022350305517462009739378033357321470549770046377498141323823641131792933368552519825723390686549876232662466437058452822400184550499912050260045550602856865897916675490563823577217000164393136913061366882873165871401539128696588812887805902619051328183139481136471472224218495757168331941333361455862987536101539535647097997155726862989767857044497698572175083932744256831153747470654965083319524363984804414976483500695379951004960906022919265992223880029915313687225285433958554741308836572625273780224870440932103387756203009852590231346524745163512263571785009586913259165550005823124131028681760343301055045410250136397638769001026568034317588052924444253288420947455060462115170063326253249775306282542126030257143131854795644554131517751559505121069331658632092163376707006451515250366124576319586412301719395394682808987121009650531435946765331309941905485085341518629590809196737886352113435189625958458635685474283505665755841522714007584095553600387889475107826541600166342039596399858689745490575489128682332108686685428290263771574420481929338652087236062661303355816352146870133697373985760944519201797551547535706810691428423217228199287358988321123067723175982098664777426384449556211638403569384651112240360284070600778878581456351168231660781326479363201, 6560)'
        name: lshiftN_6561
        args:
        - 
          ValueExpr:
              value: '8230589863111210357596673796337694919342278319311694339603206000070559419320288282803635754418539885919066625428034127876279878883108899293640219865259974562639377556925189452547962215969109242904081001301652991642812190863757488809542687619521149555091077566285260699648566997913331124935750012683419480278265324704709064506370022752058994567791470216652915912131179781008338824413313755200770291122017484079151923804164743045513270690374568605873315465038870763718474232685399107776633885826318337776308280033394143959649004772869645934391822005526543183584730674577514082495314661439506384196082122301661045769099129696202042949647269663055873031056305227387753285002638309460321625291656479440763560995099953780402412487567278739610453616399023629005961546332922944143234837595601897832605380700674361464139900876451577103542643344780887563016479601601849045235298898392360352354448944966526296491666860400483983364177137479279611165885150978109929781633823287141532442389797778750281883498957595883145866514560546862614637990698391035629831441657989128165461126890969633468745609968611854024637956913515176846344657641309213895543788363949425099727704219650360786829092902664657118849536286504571694021572553319861748997959201156207500966096912786365345150746748045862670481557267240482528172064414439108690967464719299114062906464047781432373225431109414260938796501124243869291997775654899563459305584868404961677175271971493392372983350748100871923481520957095938091813451874643140888185097815855547240261834590570324243272485377476090014510927881706560442597225466052517846087895220668894181562683652079116948166892799408709801801042424134908577896777139153401278930879135880514822532358202558778548252783006271295931464373789833415422113378042684704524253395000342090965255544762323691502050462533804539814165342272956986221385782145782363200315158022350305517462009739378033357321470549770046377498141323823641131792933368552519825723390686549876232662466437058452822400184550499912050260045550602856865897916675490563823577217000164393136913061366882873165871401539128696588812887805902619051328183139481136471472224218495757168331941333361455862987536101539535647097997155726862989767857044497698572175083932744256831153747470654965083319524363984804414976483500695379951004960906022919265992223880029915313687225285433958554741308836572625273780224870440932103387756203009852590231346524745163512263571785009586913259165550005823124131028681760343301055045410250136397638769001026568034317588052924444253288420947455060462115170063326253249775306282542126030257143131854795644554131517751559505121069331658632092163376707006451515250366124576319586412301719395394682808987121009650531435946765331309941905485085341518629590809196737886352113435189625958458635685474283505665755841522714007584095553600387889475107826541600166342039596399858689745490575489128682332108686685428290263771574420481929338652087236062661303355816352146870133697373985760944519201797551547535706810691428423217228199287358988321123067723175982098664777426384449556211638403569384651112240360284070600778878581456351168231660781326479363201'
              trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001'
              trytes
        - 
          ValueExpr:
              value: '6560'
              trits: '-00000001'
              trytes: 'Z9I'
  # test 0 = lshiftN<Signature>(11260833093369905358008564931773237123962906992593153191740197879627764113449699015635737129588236155569065151454898685281992071828920434507861811564104229282355966195018235449999970199501725969385734062387706067008846278291494990910328688311146058890714818125840831682066623282620301901210654935936693089530528341925001296275329456002703269536816684104084956147550382553906528017946002652356208408650946852666095633807637309703882449659909643657820526881017004754429469363573583054334031860443041077960776477717795751511450374884097939090745853572483730643275070011585790025555679035760594463179762157452031299763564978560745342563505629468393329006177419263, 6561)
  -
    source: 'test 0 = lshiftN<Signature>(11260833093369905358008564931773237123962906992593153191740197879627764113449699015635737129588236155569065151454898685281992071828920434507861811564104229282355966195018235449999970199501725969385734062387706067008846278291494990910328688311146058890714818125840831682066623282620301901210654935936693089530528341925001296275329456002703269536816684104084956147550382553906528017946002652356208408650946852666095633807637309703882449659909643657820526881017004754429469363573583054334031860443041077960776477717795751511450374884097939090745853572483730643275070011585790025555679035760594463179762157452031299763564978560745342563505629468393329006177419263, 6561)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits
          trytes
    expr: 
      FuncExpr:
        source: 'lshiftN<Signature>(11260833093369905358008564931773237123962906992593153191740197879627764113449699015635737129588236155569065151454898685281992071828920434507861811564104229282355966195018235449999970199501725969385734062387706067008846278291494990910328688311146058890714818125840831682066623282620301901210654935936693089530528341925001296275329456002703269536816684104084956147550382553906528017946002652356208408650946852666095633807637309703882449659909643657820526881017004754429469363573583054334031860443041077960776477717795751511450374884097939090745853572483730643275070011585790025555679035760594463179762157452031299763564978560745342563505629468393329006177419263, 6561)'
        name: lshiftN_6561
        args:
        - 
          ValueExpr:
              value: '11260833093369905358008564931773237123962906992593153191740197879627764113449699015635737129588236155569065151454898685281992071828920434507861811564104229282355966195018235449999970199501725969385734062387706067008846278291494990910328688311146058890714818125840831682066623282620301901210654935936693089530528341925001296275329456002703269536816684104084956147550382553906528017946002652356208408650946852666095633807637309703882449659909643657820526881017004754429469363573583054334031860443041077960776477717795751511450374884097939090745853572483730643275070011585790025555679035760594463179762157452031299763564978560745342563505629468393329006177419263'
              trits: '011111110011-1101-10-010-101011001110101-0110101111---001-11000001101----111-10---000101-010-1-1001-111-1-0---00001-11---01-0000-101-11001010--0111-0-0-1001--1-100--0001001010110--010-00-0-0-00-10--01-0011--010-01-101001--010-1011--1-1111010---1-1-001-00-11011------110--10-000-001-001-1-1-1-1010-1010--00-01-0-00011--0-1001-000111-0--10-0-0-110--1000000-101-10011110010100-10-10--110---0111001000000-1-00---0-01-11010010--00----1-00-10-1--0001001-11---1-1-00-1-00-1011000-101-0-10-1--10-1-1-00--0--1-1-111-11-1111111110--1--0-11--1-0-1000-1-0-0-1-1-1-0-1-1101-0-1---11-10--0-10000101-101010-0-100-1--101--01--1110-11-11-1101-10011--110--01-10100-000-1010-01----00-1-1-----01-1-101-1101-0-1-01-11-1--00-0--11-00-1-10-0-0-1-10-10-10-1-0--1-1101-10-00-000-110-001101-1--0111101011-0--101-10-00--10--001--0-110-101010--10101111-0-10000-001--1-0----0-1--0001---0000--0000-10--1001--0--100-0000--01--01--11-110-01111-11-1101-1-0-1-01----------0--1-01-10---0000--0---01-011-0-1110-0-11-1-0---1----100-0-00--011-0-1-00-001101-1-10-0-1-001-11---01-0101-111111-0-00-011--100--100011001001-01-111101100010-1---1---0-0-----1-1-00-010-001-1---01-01-1---1-010---11-0-0--0110-011001-0--10101--1-001-11111--1--110-101010111-0110011--100111-110-1-010-1-00-100---0101001-11101101---100-01110010110-0-011---0001101-0101-01--1-001010-00-00100-0-0000010-0-1-1111-0-0-111--1--11--10-0--11110-0-0101-11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'LMDLKUSCBJAMCYDJMNIK9IJNKGOZCYSGIKGQW9GPHZRJKICWMQFIEBO9AJLOCZQXFOUIPCHBAPCBVTMJOTYURDVNESBZXUITGBSJORUXIPFIZLYEXQDE99BGIMICFFODNLAA9FZNXGJIORNYFFWIIKNGZTRJAFUFFEFTRQTGVVMMMOPFPYBRYQGTFKUFNVSQAIUJCQATBPUKSVVDGIPDWGCXRJXPWFTNHTJKUFHKTZQKZTSXTSSSYEKUSR9KXLUPLDJYEUSRBWUQDBJOJLVF9XUTOWTZUW9W9BEIWER9OUHEGSLVVDGQYPNNWEHBN9OOHHYKSFGQENBXZWVFZZDGBQYUVWYJKMYZHPAE9DCUUMJACTENXNETRCZGNUUPTCNVXWDHAYECPYUMVTKFCJVLIPAMKFHFZBOHCUMLUERLAJSXVWIJHUUTICZZAQ9IXTMYQMEEPSOMSXJK99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '6561'
              trits: '000000001'
              trytes: '99I'
  # test 0 = map<Hash, Transaction>(0, 123456, 0)
  -
    source: 'test 0 = map<Hash, Transaction>(0, 123456, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: ''
          trytes
    expr: 
      FuncExpr:
        source: 'map<Hash, Transaction>(0, 123456, 0)'
        name: map_243_8019
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        - 
          ValueExpr:
              value: '123456'
              trits: '0110011-10-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'LIGF99999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '0'
              trits
              trytes: '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
  # test 0 = map<Hash, Transaction>(1, 123456, 999999)
  -
    source: 'test 0 = map<Hash, Transaction>(1, 123456, 999999)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits
          trytes
    expr: 
      FuncExpr:
        source: 'map<Hash, Transaction>(1, 123456, 999999)'
        name: map_243_8019
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '1'
              trytes: 'A'
        - 
          ValueExpr:
              value: '123456'
              trits: '0110011-10-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'LIGF99999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '999999'
              trits
              trytes
  # test 999999 = map<Hash, Transaction>(0, 123456, 0)
  -
    source: 'test 999999 = map<Hash, Transaction>(0, 123456, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '999999'
          trits
          trytes
    expr: 
      FuncExpr:
        source: 'map<Hash, Transaction>(0, 123456, 0)'
        name: map_243_8019
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        - 
          ValueExpr:
              value: '123456'
              trits: '0110011-10-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'LIGF99999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '0'
              trits
              trytes
  # test 999999 = map<Hash, Transaction>(-, 123456, 0)
  -
    source: 'test 999999 = map<Hash, Transaction>(-, 123456, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '999999'
          trits
          trytes
    expr: 
      FuncExpr:
        source: 'map<Hash, Transaction>(-, 123456, 0)'
        name: map_243_8019
        args:
        - 
          ValueExpr:
              value: '-'
              trits: '-'
              trytes: 'Z'
        - 
          ValueExpr:
              value: '123456'
              trits: '0110011-10-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'LIGF99999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '0'
              trits
              trytes
  # test 0 = map<Hash, Transaction>(0, 123456, 0)
  -
    source: 'test 0 = map<Hash, Transaction>(0, 123456, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits
          trytes
    expr: 
      FuncExpr:
        source: 'map<Hash, Transaction>(0, 123456, 0)'
        name: map_243_8019
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '0'
              trytes: '9'
        - 
          ValueExpr:
              value: '123456'
              trits: '0110011-10-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'LIGF99999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '0'
              trits
              trytes
  # test 0 = abs<Tiny>(0)
  -
    source: 'test 0 = abs<Tiny>(0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'abs<Tiny>(0)'
        name: abs_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 1 = abs<Tiny>(1)
  -
    source: 'test 1 = abs<Tiny>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'abs<Tiny>(1)'
        name: abs_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 1 = abs<Tiny>(-1)
  -
    source: 'test 1 = abs<Tiny>(-1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'abs<Tiny>(-1)'
        name: abs_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 2 = abs<Tiny>(2)
  -
    source: 'test 2 = abs<Tiny>(2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'abs<Tiny>(2)'
        name: abs_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 2 = abs<Tiny>(-2)
  -
    source: 'test 2 = abs<Tiny>(-2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'abs<Tiny>(-2)'
        name: abs_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test 999 = abs<Tiny>(999)
  -
    source: 'test 999 = abs<Tiny>(999)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '999'
          trits: '000101100'
          trytes: '9JA'
    expr: 
      FuncExpr:
        source: 'abs<Tiny>(999)'
        name: abs_9
        args:
        - 
          ValueExpr:
              value: '999'
              trits: '000101100'
              trytes: '9JA'
  # test 999 = abs<Tiny>(-999)
  -
    source: 'test 999 = abs<Tiny>(-999)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '999'
          trits: '000101100'
          trytes: '9JA'
    expr: 
      FuncExpr:
        source: 'abs<Tiny>(-999)'
        name: abs_9
        args:
        - 
          ValueExpr:
              value: '-999'
              trits: '000-0--00'
              trytes: '9QZ'
  # test 0 = add<Tiny>(0, 0)
  -
    source: 'test 0 = add<Tiny>(0, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(0, 0)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 1 = add<Tiny>(0, 1)
  -
    source: 'test 1 = add<Tiny>(0, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(0, 1)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 1 = add<Tiny>(1, 0)
  -
    source: 'test 1 = add<Tiny>(1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(1, 0)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 2 = add<Tiny>(1, 1)
  -
    source: 'test 2 = add<Tiny>(1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(1, 1)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 2 = add<Tiny>(0, 2)
  -
    source: 'test 2 = add<Tiny>(0, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(0, 2)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 2 = add<Tiny>(2, 0)
  -
    source: 'test 2 = add<Tiny>(2, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(2, 0)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 3 = add<Tiny>(1, 2)
  -
    source: 'test 3 = add<Tiny>(1, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3'
          trits: '010000000'
          trytes: 'C99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(1, 2)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 3 = add<Tiny>(2, 1)
  -
    source: 'test 3 = add<Tiny>(2, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3'
          trits: '010000000'
          trytes: 'C99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(2, 1)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 4 = add<Tiny>(2, 2)
  -
    source: 'test 4 = add<Tiny>(2, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '4'
          trits: '110000000'
          trytes: 'D99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(2, 2)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test -1 = add<Tiny>(0, -1)
  -
    source: 'test -1 = add<Tiny>(0, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(0, -1)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test -1 = add<Tiny>(-1, 0)
  -
    source: 'test -1 = add<Tiny>(-1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(-1, 0)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test -2 = add<Tiny>(-1, -1)
  -
    source: 'test -2 = add<Tiny>(-1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000'
          trytes: 'Y99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(-1, -1)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test -2 = add<Tiny>(0, -2)
  -
    source: 'test -2 = add<Tiny>(0, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000'
          trytes: 'Y99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(0, -2)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test -2 = add<Tiny>(-2, 0)
  -
    source: 'test -2 = add<Tiny>(-2, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000'
          trytes: 'Y99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(-2, 0)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test -3 = add<Tiny>(-1, -2)
  -
    source: 'test -3 = add<Tiny>(-1, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-3'
          trits: '0-0000000'
          trytes: 'X99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(-1, -2)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test -3 = add<Tiny>(-2, -1)
  -
    source: 'test -3 = add<Tiny>(-2, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-3'
          trits: '0-0000000'
          trytes: 'X99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(-2, -1)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test -4 = add<Tiny>(-2, -2)
  -
    source: 'test -4 = add<Tiny>(-2, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-4'
          trits: '--0000000'
          trytes: 'W99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(-2, -2)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test 0 = add<Tiny>(1, -1)
  -
    source: 'test 0 = add<Tiny>(1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(1, -1)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test -1 = add<Tiny>(1, -2)
  -
    source: 'test -1 = add<Tiny>(1, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(1, -2)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test 1 = add<Tiny>(2, -1)
  -
    source: 'test 1 = add<Tiny>(2, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(2, -1)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 0 = add<Tiny>(2, -2)
  -
    source: 'test 0 = add<Tiny>(2, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(2, -2)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test 0 = add<Tiny>(-1, 1)
  -
    source: 'test 0 = add<Tiny>(-1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(-1, 1)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 1 = add<Tiny>(-1, 2)
  -
    source: 'test 1 = add<Tiny>(-1, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(-1, 2)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test -1 = add<Tiny>(-2, 1)
  -
    source: 'test -1 = add<Tiny>(-2, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(-2, 1)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 0 = add<Tiny>(-2, 2)
  -
    source: 'test 0 = add<Tiny>(-2, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(-2, 2)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 6 = add<Tiny>(3, 3)
  -
    source: 'test 6 = add<Tiny>(3, 3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '6'
          trits: '0-1000000'
          trytes: 'F99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(3, 3)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
  # test 0 = add<Tiny>(3, -3)
  -
    source: 'test 0 = add<Tiny>(3, -3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(3, -3)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
  # test 0 = add<Tiny>(-3, 3)
  -
    source: 'test 0 = add<Tiny>(-3, 3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(-3, 3)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
  # test -6 = add<Tiny>(-3, -3)
  -
    source: 'test -6 = add<Tiny>(-3, -3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-6'
          trits: '01-000000'
          trytes: 'U99'
    expr: 
      FuncExpr:
        source: 'add<Tiny>(-3, -3)'
        name: add_9
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
  # test 0 = cmp<Tiny>(-1, -1)
  -
    source: 'test 0 = cmp<Tiny>(-1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(-1, -1)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test - = cmp<Tiny>(-1, 0)
  -
    source: 'test - = cmp<Tiny>(-1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(-1, 0)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test - = cmp<Tiny>(-1, 1)
  -
    source: 'test - = cmp<Tiny>(-1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(-1, 1)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 1 = cmp<Tiny>(0, -1)
  -
    source: 'test 1 = cmp<Tiny>(0, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(0, -1)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 0 = cmp<Tiny>(0, 0)
  -
    source: 'test 0 = cmp<Tiny>(0, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(0, 0)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test - = cmp<Tiny>(0, 1)
  -
    source: 'test - = cmp<Tiny>(0, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(0, 1)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 1 = cmp<Tiny>(1, -1)
  -
    source: 'test 1 = cmp<Tiny>(1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(1, -1)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 1 = cmp<Tiny>(1, 0)
  -
    source: 'test 1 = cmp<Tiny>(1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(1, 0)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 0 = cmp<Tiny>(1, 1)
  -
    source: 'test 0 = cmp<Tiny>(1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(1, 1)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test - = cmp<Tiny>(10, 20)
  -
    source: 'test - = cmp<Tiny>(10, 20)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(10, 20)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '10'
              trits: '101000000'
              trytes: 'J99'
        - 
          ValueExpr:
              value: '20'
              trits: '-1-100000'
              trytes: 'TA9'
  # test 1 = cmp<Tiny>(20, 10)
  -
    source: 'test 1 = cmp<Tiny>(20, 10)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(20, 10)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '20'
              trits: '-1-100000'
              trytes: 'TA9'
        - 
          ValueExpr:
              value: '10'
              trits: '101000000'
              trytes: 'J99'
  # test - = cmp<Tiny>(-30, 40)
  -
    source: 'test - = cmp<Tiny>(-30, 40)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(-30, 40)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '-30'
              trits: '0-0-00000'
              trytes: 'XZ9'
        - 
          ValueExpr:
              value: '40'
              trits: '111100000'
              trytes: 'MA9'
  # test 1 = cmp<Tiny>(40, -30)
  -
    source: 'test 1 = cmp<Tiny>(40, -30)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(40, -30)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '40'
              trits: '111100000'
              trytes: 'MA9'
        - 
          ValueExpr:
              value: '-30'
              trits: '0-0-00000'
              trytes: 'XZ9'
  # test 1 = cmp<Tiny>(50, -60)
  -
    source: 'test 1 = cmp<Tiny>(50, -60)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(50, -60)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '50'
              trits: '--0-10000'
              trytes: 'WB9'
        - 
          ValueExpr:
              value: '-60'
              trits: '01-1-0000'
              trytes: 'UY9'
  # test - = cmp<Tiny>(-60, 50)
  -
    source: 'test - = cmp<Tiny>(-60, 50)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(-60, 50)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '-60'
              trits: '01-1-0000'
              trytes: 'UY9'
        - 
          ValueExpr:
              value: '50'
              trits: '--0-10000'
              trytes: 'WB9'
  # test 1 = cmp<Tiny>(-70, -80)
  -
    source: 'test 1 = cmp<Tiny>(-70, -80)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(-70, -80)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '-70'
              trits: '-110-0000'
              trytes: 'KX9'
        - 
          ValueExpr:
              value: '-80'
              trits: '1000-0000'
              trytes: 'AX9'
  # test - = cmp<Tiny>(-80, -70)
  -
    source: 'test - = cmp<Tiny>(-80, -70)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(-80, -70)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '-80'
              trits: '1000-0000'
              trytes: 'AX9'
        - 
          ValueExpr:
              value: '-70'
              trits: '-110-0000'
              trytes: 'KX9'
  # test 0 = cmp<Tiny>(90, 90)
  -
    source: 'test 0 = cmp<Tiny>(90, 90)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(90, 90)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '90'
              trits: '001010000'
              trytes: 'IC9'
        - 
          ValueExpr:
              value: '90'
              trits: '001010000'
              trytes: 'IC9'
  # test 0 = cmp<Tiny>(-100, -100)
  -
    source: 'test 0 = cmp<Tiny>(-100, -100)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny>(-100, -100)'
        name: cmp_9
        args:
        - 
          ValueExpr:
              value: '-100'
              trits: '-01--0000'
              trytes: 'HW9'
        - 
          ValueExpr:
              value: '-100'
              trits: '-01--0000'
              trytes: 'HW9'
  # test 0 = cmp<Tiny2>(-1, -1)
  -
    source: 'test 0 = cmp<Tiny2>(-1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(-1, -1)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000'
              trytes: 'Z99999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000'
              trytes: 'Z99999'
  # test - = cmp<Tiny2>(-1, 0)
  -
    source: 'test - = cmp<Tiny2>(-1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(-1, 0)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000'
              trytes: 'Z99999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000'
              trytes: '999999'
  # test - = cmp<Tiny2>(-1, 1)
  -
    source: 'test - = cmp<Tiny2>(-1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(-1, 1)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000'
              trytes: 'Z99999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000'
              trytes: 'A99999'
  # test 1 = cmp<Tiny2>(0, -1)
  -
    source: 'test 1 = cmp<Tiny2>(0, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(0, -1)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000'
              trytes: '999999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000'
              trytes: 'Z99999'
  # test 0 = cmp<Tiny2>(0, 0)
  -
    source: 'test 0 = cmp<Tiny2>(0, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(0, 0)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000'
              trytes: '999999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000'
              trytes: '999999'
  # test - = cmp<Tiny2>(0, 1)
  -
    source: 'test - = cmp<Tiny2>(0, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(0, 1)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000'
              trytes: '999999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000'
              trytes: 'A99999'
  # test 1 = cmp<Tiny2>(1, -1)
  -
    source: 'test 1 = cmp<Tiny2>(1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(1, -1)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000'
              trytes: 'A99999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000'
              trytes: 'Z99999'
  # test 1 = cmp<Tiny2>(1, 0)
  -
    source: 'test 1 = cmp<Tiny2>(1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(1, 0)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000'
              trytes: 'A99999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000'
              trytes: '999999'
  # test 0 = cmp<Tiny2>(1, 1)
  -
    source: 'test 0 = cmp<Tiny2>(1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(1, 1)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000'
              trytes: 'A99999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000'
              trytes: 'A99999'
  # test - = cmp<Tiny2>(10, 20)
  -
    source: 'test - = cmp<Tiny2>(10, 20)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(10, 20)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '10'
              trits: '101000000000000000'
              trytes: 'J99999'
        - 
          ValueExpr:
              value: '20'
              trits: '-1-100000000000000'
              trytes: 'TA9999'
  # test 1 = cmp<Tiny2>(20, 10)
  -
    source: 'test 1 = cmp<Tiny2>(20, 10)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(20, 10)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '20'
              trits: '-1-100000000000000'
              trytes: 'TA9999'
        - 
          ValueExpr:
              value: '10'
              trits: '101000000000000000'
              trytes: 'J99999'
  # test - = cmp<Tiny2>(-30, 40)
  -
    source: 'test - = cmp<Tiny2>(-30, 40)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(-30, 40)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '-30'
              trits: '0-0-00000000000000'
              trytes: 'XZ9999'
        - 
          ValueExpr:
              value: '40'
              trits: '111100000000000000'
              trytes: 'MA9999'
  # test 1 = cmp<Tiny2>(40, -30)
  -
    source: 'test 1 = cmp<Tiny2>(40, -30)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(40, -30)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '40'
              trits: '111100000000000000'
              trytes: 'MA9999'
        - 
          ValueExpr:
              value: '-30'
              trits: '0-0-00000000000000'
              trytes: 'XZ9999'
  # test 1 = cmp<Tiny2>(50, -60)
  -
    source: 'test 1 = cmp<Tiny2>(50, -60)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(50, -60)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '50'
              trits: '--0-10000000000000'
              trytes: 'WB9999'
        - 
          ValueExpr:
              value: '-60'
              trits: '01-1-0000000000000'
              trytes: 'UY9999'
  # test - = cmp<Tiny2>(-60, 50)
  -
    source: 'test - = cmp<Tiny2>(-60, 50)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(-60, 50)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '-60'
              trits: '01-1-0000000000000'
              trytes: 'UY9999'
        - 
          ValueExpr:
              value: '50'
              trits: '--0-10000000000000'
              trytes: 'WB9999'
  # test 1 = cmp<Tiny2>(-70, -80)
  -
    source: 'test 1 = cmp<Tiny2>(-70, -80)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(-70, -80)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '-70'
              trits: '-110-0000000000000'
              trytes: 'KX9999'
        - 
          ValueExpr:
              value: '-80'
              trits: '1000-0000000000000'
              trytes: 'AX9999'
  # test - = cmp<Tiny2>(-80, -70)
  -
    source: 'test - = cmp<Tiny2>(-80, -70)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(-80, -70)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '-80'
              trits: '1000-0000000000000'
              trytes: 'AX9999'
        - 
          ValueExpr:
              value: '-70'
              trits: '-110-0000000000000'
              trytes: 'KX9999'
  # test 0 = cmp<Tiny2>(90, 90)
  -
    source: 'test 0 = cmp<Tiny2>(90, 90)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(90, 90)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '90'
              trits: '001010000000000000'
              trytes: 'IC9999'
        - 
          ValueExpr:
              value: '90'
              trits: '001010000000000000'
              trytes: 'IC9999'
  # test 0 = cmp<Tiny2>(-100, -100)
  -
    source: 'test 0 = cmp<Tiny2>(-100, -100)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'cmp<Tiny2>(-100, -100)'
        name: cmp_18
        args:
        - 
          ValueExpr:
              value: '-100'
              trits: '-01--0000000000000'
              trytes: 'HW9999'
        - 
          ValueExpr:
              value: '-100'
              trits: '-01--0000000000000'
              trytes: 'HW9999'
  # test -2 = decr<Tiny>(-1)
  -
    source: 'test -2 = decr<Tiny>(-1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000'
          trytes: 'Y99'
    expr: 
      FuncExpr:
        source: 'decr<Tiny>(-1)'
        name: decr_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test -1 = decr<Tiny>(0)
  -
    source: 'test -1 = decr<Tiny>(0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'decr<Tiny>(0)'
        name: decr_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 0 = decr<Tiny>(1)
  -
    source: 'test 0 = decr<Tiny>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'decr<Tiny>(1)'
        name: decr_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 1 = decr<Tiny>(2)
  -
    source: 'test 1 = decr<Tiny>(2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'decr<Tiny>(2)'
        name: decr_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 2 = decr<Tiny>(3)
  -
    source: 'test 2 = decr<Tiny>(3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'decr<Tiny>(3)'
        name: decr_9
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
  # test -2 = decr<Tiny2>(-1)
  -
    source: 'test -2 = decr<Tiny2>(-1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000000000000'
          trytes: 'Y99999'
    expr: 
      FuncExpr:
        source: 'decr<Tiny2>(-1)'
        name: decr_18
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000'
              trytes: 'Z99999'
  # test -1 = decr<Tiny2>(0)
  -
    source: 'test -1 = decr<Tiny2>(0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000000000000'
          trytes: 'Z99999'
    expr: 
      FuncExpr:
        source: 'decr<Tiny2>(0)'
        name: decr_18
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000'
              trytes: '999999'
  # test 0 = decr<Tiny2>(1)
  -
    source: 'test 0 = decr<Tiny2>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000'
          trytes: '999999'
    expr: 
      FuncExpr:
        source: 'decr<Tiny2>(1)'
        name: decr_18
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000'
              trytes: 'A99999'
  # test 1 = decr<Tiny2>(2)
  -
    source: 'test 1 = decr<Tiny2>(2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000000000000'
          trytes: 'A99999'
    expr: 
      FuncExpr:
        source: 'decr<Tiny2>(2)'
        name: decr_18
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000000000000'
              trytes: 'B99999'
  # test 2 = decr<Tiny2>(3)
  -
    source: 'test 2 = decr<Tiny2>(3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000000000000'
          trytes: 'B99999'
    expr: 
      FuncExpr:
        source: 'decr<Tiny2>(3)'
        name: decr_18
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000000000000'
              trytes: 'C99999'
  # test 0 = div<Tiny>(0, 0)
  -
    source: 'test 0 = div<Tiny>(0, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(0, 0)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 0 = div<Tiny>(0, 1)
  -
    source: 'test 0 = div<Tiny>(0, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(0, 1)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 1 = div<Tiny>(1, 1)
  -
    source: 'test 1 = div<Tiny>(1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(1, 1)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 0 = div<Tiny>(0, 2)
  -
    source: 'test 0 = div<Tiny>(0, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(0, 2)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 0 = div<Tiny>(1, 2)
  -
    source: 'test 0 = div<Tiny>(1, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(1, 2)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 2 = div<Tiny>(2, 1)
  -
    source: 'test 2 = div<Tiny>(2, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(2, 1)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 1 = div<Tiny>(2, 2)
  -
    source: 'test 1 = div<Tiny>(2, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(2, 2)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 0 = div<Tiny>(0, -1)
  -
    source: 'test 0 = div<Tiny>(0, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(0, -1)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 1 = div<Tiny>(-1, -1)
  -
    source: 'test 1 = div<Tiny>(-1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(-1, -1)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 0 = div<Tiny>(0, -2)
  -
    source: 'test 0 = div<Tiny>(0, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(0, -2)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test 0 = div<Tiny>(-1, -2)
  -
    source: 'test 0 = div<Tiny>(-1, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(-1, -2)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test 2 = div<Tiny>(-2, -1)
  -
    source: 'test 2 = div<Tiny>(-2, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(-2, -1)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 1 = div<Tiny>(-2, -2)
  -
    source: 'test 1 = div<Tiny>(-2, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(-2, -2)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test -1 = div<Tiny>(1, -1)
  -
    source: 'test -1 = div<Tiny>(1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(1, -1)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 0 = div<Tiny>(1, -2)
  -
    source: 'test 0 = div<Tiny>(1, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(1, -2)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test -2 = div<Tiny>(2, -1)
  -
    source: 'test -2 = div<Tiny>(2, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000'
          trytes: 'Y99'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(2, -1)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test -1 = div<Tiny>(2, -2)
  -
    source: 'test -1 = div<Tiny>(2, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(2, -2)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test -1 = div<Tiny>(-1, 1)
  -
    source: 'test -1 = div<Tiny>(-1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(-1, 1)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 0 = div<Tiny>(-1, 2)
  -
    source: 'test 0 = div<Tiny>(-1, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(-1, 2)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test -2 = div<Tiny>(-2, 1)
  -
    source: 'test -2 = div<Tiny>(-2, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000'
          trytes: 'Y99'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(-2, 1)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test -1 = div<Tiny>(-2, 2)
  -
    source: 'test -1 = div<Tiny>(-2, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(-2, 2)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 1 = div<Tiny>(3, 3)
  -
    source: 'test 1 = div<Tiny>(3, 3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(3, 3)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
  # test -1 = div<Tiny>(3, -3)
  -
    source: 'test -1 = div<Tiny>(3, -3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(3, -3)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
  # test -1 = div<Tiny>(-3, 3)
  -
    source: 'test -1 = div<Tiny>(-3, 3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(-3, 3)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
  # test 1 = div<Tiny>(-3, -3)
  -
    source: 'test 1 = div<Tiny>(-3, -3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'div<Tiny>(-3, -3)'
        name: div_9
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
  # test true = even<Int>(0)
  -
    source: 'test true = even<Int>(0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(0)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000'
              trytes: '999999999'
  # test false = even<Int>(1)
  -
    source: 'test false = even<Int>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(1)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
  # test true = even<Int>(2)
  -
    source: 'test true = even<Int>(2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(2)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000000000000000000000'
              trytes: 'B99999999'
  # test false = even<Int>(3)
  -
    source: 'test false = even<Int>(3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(3)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000000000000000000000'
              trytes: 'C99999999'
  # test true = even<Int>(4)
  -
    source: 'test true = even<Int>(4)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(4)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '4'
              trits: '110000000000000000000000000'
              trytes: 'D99999999'
  # test false = even<Int>(5)
  -
    source: 'test false = even<Int>(5)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(5)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '5'
              trits: '--1000000000000000000000000'
              trytes: 'E99999999'
  # test true = even<Int>(6)
  -
    source: 'test true = even<Int>(6)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(6)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '6'
              trits: '0-1000000000000000000000000'
              trytes: 'F99999999'
  # test false = even<Int>(7)
  -
    source: 'test false = even<Int>(7)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(7)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '7'
              trits: '1-1000000000000000000000000'
              trytes: 'G99999999'
  # test true = even<Int>(8)
  -
    source: 'test true = even<Int>(8)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(8)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '8'
              trits: '-01000000000000000000000000'
              trytes: 'H99999999'
  # test false = even<Int>(9)
  -
    source: 'test false = even<Int>(9)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(9)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '9'
              trits: '001000000000000000000000000'
              trytes: 'I99999999'
  # test true = even<Int>(10)
  -
    source: 'test true = even<Int>(10)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(10)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '10'
              trits: '101000000000000000000000000'
              trytes: 'J99999999'
  # test false = even<Int>(11)
  -
    source: 'test false = even<Int>(11)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(11)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '11'
              trits: '-11000000000000000000000000'
              trytes: 'K99999999'
  # test true = even<Int>(12)
  -
    source: 'test true = even<Int>(12)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(12)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '12'
              trits: '011000000000000000000000000'
              trytes: 'L99999999'
  # test false = even<Int>(13)
  -
    source: 'test false = even<Int>(13)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(13)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '13'
              trits: '111000000000000000000000000'
              trytes: 'M99999999'
  # test true = even<Int>(14)
  -
    source: 'test true = even<Int>(14)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(14)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '14'
              trits: '---100000000000000000000000'
              trytes: 'NA9999999'
  # test false = even<Int>(15)
  -
    source: 'test false = even<Int>(15)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(15)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '15'
              trits: '0--100000000000000000000000'
              trytes: 'OA9999999'
  # test true = even<Int>(16)
  -
    source: 'test true = even<Int>(16)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(16)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '16'
              trits: '1--100000000000000000000000'
              trytes: 'PA9999999'
  # test false = even<Int>(17)
  -
    source: 'test false = even<Int>(17)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(17)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '17'
              trits: '-0-100000000000000000000000'
              trytes: 'QA9999999'
  # test true = even<Int>(18)
  -
    source: 'test true = even<Int>(18)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(18)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '18'
              trits: '00-100000000000000000000000'
              trytes: 'RA9999999'
  # test false = even<Int>(19)
  -
    source: 'test false = even<Int>(19)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(19)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '19'
              trits: '10-100000000000000000000000'
              trytes: 'SA9999999'
  # test false = even<Int>(-1)
  -
    source: 'test false = even<Int>(-1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(-1)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000000000000'
              trytes: 'Z99999999'
  # test true = even<Int>(-2)
  -
    source: 'test true = even<Int>(-2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(-2)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000000000000000000000'
              trytes: 'Y99999999'
  # test false = even<Int>(-3)
  -
    source: 'test false = even<Int>(-3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(-3)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000000000000000000000'
              trytes: 'X99999999'
  # test true = even<Int>(-4)
  -
    source: 'test true = even<Int>(-4)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(-4)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-4'
              trits: '--0000000000000000000000000'
              trytes: 'W99999999'
  # test false = even<Int>(-5)
  -
    source: 'test false = even<Int>(-5)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(-5)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-5'
              trits: '11-000000000000000000000000'
              trytes: 'V99999999'
  # test true = even<Int>(-6)
  -
    source: 'test true = even<Int>(-6)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(-6)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-6'
              trits: '01-000000000000000000000000'
              trytes: 'U99999999'
  # test false = even<Int>(-7)
  -
    source: 'test false = even<Int>(-7)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(-7)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-7'
              trits: '-1-000000000000000000000000'
              trytes: 'T99999999'
  # test true = even<Int>(-8)
  -
    source: 'test true = even<Int>(-8)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(-8)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-8'
              trits: '10-000000000000000000000000'
              trytes: 'S99999999'
  # test false = even<Int>(-9)
  -
    source: 'test false = even<Int>(-9)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(-9)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-9'
              trits: '00-000000000000000000000000'
              trytes: 'R99999999'
  # test true = even<Int>(-10)
  -
    source: 'test true = even<Int>(-10)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(-10)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-10'
              trits: '-0-000000000000000000000000'
              trytes: 'Q99999999'
  # test false = even<Int>(-11)
  -
    source: 'test false = even<Int>(-11)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(-11)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-11'
              trits: '1--000000000000000000000000'
              trytes: 'P99999999'
  # test true = even<Int>(-12)
  -
    source: 'test true = even<Int>(-12)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(-12)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-12'
              trits: '0--000000000000000000000000'
              trytes: 'O99999999'
  # test false = even<Int>(-13)
  -
    source: 'test false = even<Int>(-13)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(-13)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-13'
              trits: '---000000000000000000000000'
              trytes: 'N99999999'
  # test true = even<Int>(-14)
  -
    source: 'test true = even<Int>(-14)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(-14)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-14'
              trits: '111-00000000000000000000000'
              trytes: 'MZ9999999'
  # test false = even<Int>(-15)
  -
    source: 'test false = even<Int>(-15)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(-15)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-15'
              trits: '011-00000000000000000000000'
              trytes: 'LZ9999999'
  # test true = even<Int>(-16)
  -
    source: 'test true = even<Int>(-16)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(-16)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-16'
              trits: '-11-00000000000000000000000'
              trytes: 'KZ9999999'
  # test false = even<Int>(-17)
  -
    source: 'test false = even<Int>(-17)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(-17)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-17'
              trits: '101-00000000000000000000000'
              trytes: 'JZ9999999'
  # test true = even<Int>(-18)
  -
    source: 'test true = even<Int>(-18)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'even<Int>(-18)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-18'
              trits: '001-00000000000000000000000'
              trytes: 'IZ9999999'
  # test false = even<Int>(-19)
  -
    source: 'test false = even<Int>(-19)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'even<Int>(-19)'
        name: even_27
        args:
        - 
          ValueExpr:
              value: '-19'
              trits: '-01-00000000000000000000000'
              trytes: 'HZ9999999'
  # test 0 = floatAdd<TestFloat>(0, 0)
  -
    source: 'test 0 = floatAdd<TestFloat>(0, 0)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(0, 0)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
  # test 1 = floatAdd<TestFloat>(0, 1)
  -
    source: 'test 1 = floatAdd<TestFloat>(0, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(0, 1)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test 1 = floatAdd<TestFloat>(1, 0)
  -
    source: 'test 1 = floatAdd<TestFloat>(1, 0)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(1, 0)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
  # test 2 = floatAdd<TestFloat>(1, 1)
  -
    source: 'test 2 = floatAdd<TestFloat>(1, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '2'
          trits: '0000000000000000-1-10000'
          trytes: '99999FB9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(1, 1)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test 2 = floatAdd<TestFloat>(0, 2)
  -
    source: 'test 2 = floatAdd<TestFloat>(0, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '2'
          trits: '0000000000000000-1-10000'
          trytes: '99999FB9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(0, 2)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test 2 = floatAdd<TestFloat>(2, 0)
  -
    source: 'test 2 = floatAdd<TestFloat>(2, 0)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '2'
          trits: '0000000000000000-1-10000'
          trytes: '99999FB9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(2, 0)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
  # test 3 = floatAdd<TestFloat>(1, 2)
  -
    source: 'test 3 = floatAdd<TestFloat>(1, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '3'
          trits: '000000000000000001-10000'
          trytes: '99999IB9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(1, 2)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test 3 = floatAdd<TestFloat>(2, 1)
  -
    source: 'test 3 = floatAdd<TestFloat>(2, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '3'
          trits: '000000000000000001-10000'
          trytes: '99999IB9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(2, 1)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test 4 = floatAdd<TestFloat>(2, 2)
  -
    source: 'test 4 = floatAdd<TestFloat>(2, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '4'
          trits: '000000000000000011-10000'
          trytes: '99999LB9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(2, 2)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test -1 = floatAdd<TestFloat>(0, -1)
  -
    source: 'test -1 = floatAdd<TestFloat>(0, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1'
          trits: '00000000000000000-100000'
          trytes: '99999RA9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(0, -1)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test -1 = floatAdd<TestFloat>(-1, 0)
  -
    source: 'test -1 = floatAdd<TestFloat>(-1, 0)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1'
          trits: '00000000000000000-100000'
          trytes: '99999RA9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(-1, 0)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
  # test -2 = floatAdd<TestFloat>(-1, -1)
  -
    source: 'test -2 = floatAdd<TestFloat>(-1, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-2'
          trits: '00000000000000001--10000'
          trytes: '99999UB9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(-1, -1)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test -2 = floatAdd<TestFloat>(0, -2)
  -
    source: 'test -2 = floatAdd<TestFloat>(0, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-2'
          trits: '00000000000000001--10000'
          trytes: '99999UB9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(0, -2)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test -2 = floatAdd<TestFloat>(-2, 0)
  -
    source: 'test -2 = floatAdd<TestFloat>(-2, 0)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-2'
          trits: '00000000000000001--10000'
          trytes: '99999UB9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(-2, 0)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
  # test -3 = floatAdd<TestFloat>(-1, -2)
  -
    source: 'test -3 = floatAdd<TestFloat>(-1, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-3'
          trits: '00000000000000000--10000'
          trytes: '99999RB9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(-1, -2)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test -3 = floatAdd<TestFloat>(-2, -1)
  -
    source: 'test -3 = floatAdd<TestFloat>(-2, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-3'
          trits: '00000000000000000--10000'
          trytes: '99999RB9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(-2, -1)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test -4 = floatAdd<TestFloat>(-2, -2)
  -
    source: 'test -4 = floatAdd<TestFloat>(-2, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-4'
          trits: '0000000000000000---10000'
          trytes: '99999OB9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(-2, -2)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test 0 = floatAdd<TestFloat>(1, -1)
  -
    source: 'test 0 = floatAdd<TestFloat>(1, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(1, -1)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test -1 = floatAdd<TestFloat>(1, -2)
  -
    source: 'test -1 = floatAdd<TestFloat>(1, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1'
          trits: '00000000000000000-100000'
          trytes: '99999RA9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(1, -2)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test 1 = floatAdd<TestFloat>(2, -1)
  -
    source: 'test 1 = floatAdd<TestFloat>(2, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(2, -1)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test 0 = floatAdd<TestFloat>(2, -2)
  -
    source: 'test 0 = floatAdd<TestFloat>(2, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(2, -2)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test 0 = floatAdd<TestFloat>(-1, 1)
  -
    source: 'test 0 = floatAdd<TestFloat>(-1, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(-1, 1)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test 1 = floatAdd<TestFloat>(-1, 2)
  -
    source: 'test 1 = floatAdd<TestFloat>(-1, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(-1, 2)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test -1 = floatAdd<TestFloat>(-2, 1)
  -
    source: 'test -1 = floatAdd<TestFloat>(-2, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1'
          trits: '00000000000000000-100000'
          trytes: '99999RA9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(-2, 1)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test 0 = floatAdd<TestFloat>(-2, 2)
  -
    source: 'test 0 = floatAdd<TestFloat>(-2, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(-2, 2)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test 6 = floatAdd<TestFloat>(3, 3)
  -
    source: 'test 6 = floatAdd<TestFloat>(3, 3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '6'
          trits: '0000000000000000-1010000'
          trytes: '99999FC9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(3, 3)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '000000000000000001-10000'
              trytes: '99999IB9'
        - 
          ValueExpr:
              value: '3'
              trits: '000000000000000001-10000'
              trytes: '99999IB9'
  # test 0 = floatAdd<TestFloat>(3, -3)
  -
    source: 'test 0 = floatAdd<TestFloat>(3, -3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(3, -3)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '000000000000000001-10000'
              trytes: '99999IB9'
        - 
          ValueExpr:
              value: '-3'
              trits: '00000000000000000--10000'
              trytes: '99999RB9'
  # test 0 = floatAdd<TestFloat>(-3, 3)
  -
    source: 'test 0 = floatAdd<TestFloat>(-3, 3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(-3, 3)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '00000000000000000--10000'
              trytes: '99999RB9'
        - 
          ValueExpr:
              value: '3'
              trits: '000000000000000001-10000'
              trytes: '99999IB9'
  # test -6 = floatAdd<TestFloat>(-3, -3)
  -
    source: 'test -6 = floatAdd<TestFloat>(-3, -3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-6'
          trits: '00000000000000001-010000'
          trytes: '99999UC9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(-3, -3)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '00000000000000000--10000'
              trytes: '99999RB9'
        - 
          ValueExpr:
              value: '-3'
              trits: '00000000000000000--10000'
              trytes: '99999RB9'
  # test 0.1111 = floatAdd<TestFloat>(0.11, 0.0011)
  -
    source: 'test 0.1111 = floatAdd<TestFloat>(0.11, 0.0011)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.1111'
          trits: '10--01001-00000001-00000'
          trytes: 'SHIZ9IZ9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(0.11, 0.0011)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '0.11'
              trits: '-01----110--1-0001-00000'
              trytes: 'HNKOYIZ9'
        - 
          ValueExpr:
              value: '0.0011'
              trits: '--0--11-1--00-11-111-000'
              trytes: 'WEGWFGV9'
  # test 0.1111 = floatAdd<TestFloat>(0.0011, 0.11)
  -
    source: 'test 0.1111 = floatAdd<TestFloat>(0.0011, 0.11)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.1111'
          trits: '10--01001-00000001-00000'
          trytes: 'SHIZ9IZ9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(0.0011, 0.11)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '0.0011'
              trits: '--0--11-1--00-11-111-000'
              trytes: 'WEGWFGV9'
        - 
          ValueExpr:
              value: '0.11'
              trits: '-01----110--1-0001-00000'
              trytes: 'HNKOYIZ9'
  # test 4.6 = floatAdd<TestFloat>(1.2, 3.4)
  -
    source: 'test 4.6 = floatAdd<TestFloat>(1.2, 3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '4.6'
          trits: '1--11--11--11----1010000'
          trytes: 'PVKEPEC9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(1.2, 3.4)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '1.2'
              trits: '11--11--11--11--11100000'
              trytes: 'VKEPVKA9'
        - 
          ValueExpr:
              value: '3.4'
              trits: '--11--11--11--1101-10000'
              trytes: 'EPVKEJB9'
  # test 2.2 = floatAdd<TestFloat>(-1.2, 3.4)
  -
    source: 'test 2.2 = floatAdd<TestFloat>(-1.2, 3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '2.2'
          trits: '1--11--11--11--1-1-10000'
          trytes: 'PVKEPGB9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(-1.2, 3.4)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '-1.2'
              trits: '--11--11--11--11--100000'
              trytes: 'EPVKEPA9'
        - 
          ValueExpr:
              value: '3.4'
              trits: '--11--11--11--1101-10000'
              trytes: 'EPVKEJB9'
  # test -2.2 = floatAdd<TestFloat>(1.2, -3.4)
  -
    source: 'test -2.2 = floatAdd<TestFloat>(1.2, -3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-2.2'
          trits: '-11--11--11--11-1--10000'
          trytes: 'KEPVKTB9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(1.2, -3.4)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '1.2'
              trits: '11--11--11--11--11100000'
              trytes: 'VKEPVKA9'
        - 
          ValueExpr:
              value: '-3.4'
              trits: '11--11--11--11--0--10000'
              trytes: 'VKEPVQB9'
  # test -4.6 = floatAdd<TestFloat>(-1.2, -3.4)
  -
    source: 'test -4.6 = floatAdd<TestFloat>(-1.2, -3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-4.6'
          trits: '-11--11--11--1111-010000'
          trytes: 'KEPVKVC9'
    expr: 
      FuncExpr:
        source: 'floatAdd<TestFloat>(-1.2, -3.4)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '-1.2'
              trits: '--11--11--11--11--100000'
              trytes: 'EPVKEPA9'
        - 
          ValueExpr:
              value: '-3.4'
              trits: '11--11--11--11--0--10000'
              trytes: 'VKEPVQB9'
  # test 0 = floatSub<TestFloat>(0, 0)
  -
    source: 'test 0 = floatSub<TestFloat>(0, 0)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(0, 0)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
  # test -1 = floatSub<TestFloat>(0, 1)
  -
    source: 'test -1 = floatSub<TestFloat>(0, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1'
          trits: '00000000000000000-100000'
          trytes: '99999RA9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(0, 1)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test 1 = floatSub<TestFloat>(1, 0)
  -
    source: 'test 1 = floatSub<TestFloat>(1, 0)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(1, 0)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
  # test 0 = floatSub<TestFloat>(1, 1)
  -
    source: 'test 0 = floatSub<TestFloat>(1, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(1, 1)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test -2 = floatSub<TestFloat>(0, 2)
  -
    source: 'test -2 = floatSub<TestFloat>(0, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-2'
          trits: '00000000000000001--10000'
          trytes: '99999UB9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(0, 2)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test 2 = floatSub<TestFloat>(2, 0)
  -
    source: 'test 2 = floatSub<TestFloat>(2, 0)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '2'
          trits: '0000000000000000-1-10000'
          trytes: '99999FB9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(2, 0)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
  # test -1 = floatSub<TestFloat>(1, 2)
  -
    source: 'test -1 = floatSub<TestFloat>(1, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1'
          trits: '00000000000000000-100000'
          trytes: '99999RA9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(1, 2)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test 1 = floatSub<TestFloat>(2, 1)
  -
    source: 'test 1 = floatSub<TestFloat>(2, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(2, 1)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test 0 = floatSub<TestFloat>(2, 2)
  -
    source: 'test 0 = floatSub<TestFloat>(2, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(2, 2)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test 1 = floatSub<TestFloat>(0, -1)
  -
    source: 'test 1 = floatSub<TestFloat>(0, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(0, -1)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test -1 = floatSub<TestFloat>(-1, 0)
  -
    source: 'test -1 = floatSub<TestFloat>(-1, 0)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1'
          trits: '00000000000000000-100000'
          trytes: '99999RA9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(-1, 0)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
  # test 0 = floatSub<TestFloat>(-1, -1)
  -
    source: 'test 0 = floatSub<TestFloat>(-1, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(-1, -1)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test 2 = floatSub<TestFloat>(0, -2)
  -
    source: 'test 2 = floatSub<TestFloat>(0, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '2'
          trits: '0000000000000000-1-10000'
          trytes: '99999FB9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(0, -2)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test -2 = floatSub<TestFloat>(-2, 0)
  -
    source: 'test -2 = floatSub<TestFloat>(-2, 0)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-2'
          trits: '00000000000000001--10000'
          trytes: '99999UB9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(-2, 0)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
  # test 1 = floatSub<TestFloat>(-1, -2)
  -
    source: 'test 1 = floatSub<TestFloat>(-1, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(-1, -2)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test -1 = floatSub<TestFloat>(-2, -1)
  -
    source: 'test -1 = floatSub<TestFloat>(-2, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1'
          trits: '00000000000000000-100000'
          trytes: '99999RA9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(-2, -1)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test 0 = floatSub<TestFloat>(-2, -2)
  -
    source: 'test 0 = floatSub<TestFloat>(-2, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(-2, -2)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test 2 = floatSub<TestFloat>(1, -1)
  -
    source: 'test 2 = floatSub<TestFloat>(1, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '2'
          trits: '0000000000000000-1-10000'
          trytes: '99999FB9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(1, -1)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test 3 = floatSub<TestFloat>(1, -2)
  -
    source: 'test 3 = floatSub<TestFloat>(1, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '3'
          trits: '000000000000000001-10000'
          trytes: '99999IB9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(1, -2)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test 3 = floatSub<TestFloat>(2, -1)
  -
    source: 'test 3 = floatSub<TestFloat>(2, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '3'
          trits: '000000000000000001-10000'
          trytes: '99999IB9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(2, -1)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test 4 = floatSub<TestFloat>(2, -2)
  -
    source: 'test 4 = floatSub<TestFloat>(2, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '4'
          trits: '000000000000000011-10000'
          trytes: '99999LB9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(2, -2)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test -2 = floatSub<TestFloat>(-1, 1)
  -
    source: 'test -2 = floatSub<TestFloat>(-1, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-2'
          trits: '00000000000000001--10000'
          trytes: '99999UB9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(-1, 1)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test -3 = floatSub<TestFloat>(-1, 2)
  -
    source: 'test -3 = floatSub<TestFloat>(-1, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-3'
          trits: '00000000000000000--10000'
          trytes: '99999RB9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(-1, 2)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test -3 = floatSub<TestFloat>(-2, 1)
  -
    source: 'test -3 = floatSub<TestFloat>(-2, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-3'
          trits: '00000000000000000--10000'
          trytes: '99999RB9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(-2, 1)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test -4 = floatSub<TestFloat>(-2, 2)
  -
    source: 'test -4 = floatSub<TestFloat>(-2, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-4'
          trits: '0000000000000000---10000'
          trytes: '99999OB9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(-2, 2)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test 0 = floatSub<TestFloat>(3, 3)
  -
    source: 'test 0 = floatSub<TestFloat>(3, 3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(3, 3)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '000000000000000001-10000'
              trytes: '99999IB9'
        - 
          ValueExpr:
              value: '3'
              trits: '000000000000000001-10000'
              trytes: '99999IB9'
  # test 6 = floatSub<TestFloat>(3, -3)
  -
    source: 'test 6 = floatSub<TestFloat>(3, -3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '6'
          trits: '0000000000000000-1010000'
          trytes: '99999FC9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(3, -3)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '000000000000000001-10000'
              trytes: '99999IB9'
        - 
          ValueExpr:
              value: '-3'
              trits: '00000000000000000--10000'
              trytes: '99999RB9'
  # test -6 = floatSub<TestFloat>(-3, 3)
  -
    source: 'test -6 = floatSub<TestFloat>(-3, 3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-6'
          trits: '00000000000000001-010000'
          trytes: '99999UC9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(-3, 3)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '00000000000000000--10000'
              trytes: '99999RB9'
        - 
          ValueExpr:
              value: '3'
              trits: '000000000000000001-10000'
              trytes: '99999IB9'
  # test 0 = floatSub<TestFloat>(-3, -3)
  -
    source: 'test 0 = floatSub<TestFloat>(-3, -3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(-3, -3)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '00000000000000000--10000'
              trytes: '99999RB9'
        - 
          ValueExpr:
              value: '-3'
              trits: '00000000000000000--10000'
              trytes: '99999RB9'
  # test -2.2 = floatSub<TestFloat>(1.2, 3.4)
  -
    source: 'test -2.2 = floatSub<TestFloat>(1.2, 3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-2.2'
          trits: '-11--11--11--11-1--10000'
          trytes: 'KEPVKTB9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(1.2, 3.4)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '1.2'
              trits: '11--11--11--11--11100000'
              trytes: 'VKEPVKA9'
        - 
          ValueExpr:
              value: '3.4'
              trits: '--11--11--11--1101-10000'
              trytes: 'EPVKEJB9'
  # test -4.6 = floatSub<TestFloat>(-1.2, 3.4)
  -
    source: 'test -4.6 = floatSub<TestFloat>(-1.2, 3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-4.6'
          trits: '-11--11--11--1111-010000'
          trytes: 'KEPVKVC9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(-1.2, 3.4)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '-1.2'
              trits: '--11--11--11--11--100000'
              trytes: 'EPVKEPA9'
        - 
          ValueExpr:
              value: '3.4'
              trits: '--11--11--11--1101-10000'
              trytes: 'EPVKEJB9'
  # test 4.6 = floatSub<TestFloat>(1.2, -3.4)
  -
    source: 'test 4.6 = floatSub<TestFloat>(1.2, -3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '4.6'
          trits: '1--11--11--11----1010000'
          trytes: 'PVKEPEC9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(1.2, -3.4)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '1.2'
              trits: '11--11--11--11--11100000'
              trytes: 'VKEPVKA9'
        - 
          ValueExpr:
              value: '-3.4'
              trits: '11--11--11--11--0--10000'
              trytes: 'VKEPVQB9'
  # test 2.2 = floatSub<TestFloat>(-1.2, -3.4)
  -
    source: 'test 2.2 = floatSub<TestFloat>(-1.2, -3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '2.2'
          trits: '1--11--11--11--1-1-10000'
          trytes: 'PVKEPGB9'
    expr: 
      FuncExpr:
        source: 'floatSub<TestFloat>(-1.2, -3.4)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '-1.2'
              trits: '--11--11--11--11--100000'
              trytes: 'EPVKEPA9'
        - 
          ValueExpr:
              value: '-3.4'
              trits: '11--11--11--11--0--10000'
              trytes: 'VKEPVQB9'
  # test 0 = floatMul<TestFloat>(0, 0)
  -
    source: 'test 0 = floatMul<TestFloat>(0, 0)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(0, 0)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
  # test 0 = floatMul<TestFloat>(0, 1)
  -
    source: 'test 0 = floatMul<TestFloat>(0, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(0, 1)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test 0 = floatMul<TestFloat>(1, 0)
  -
    source: 'test 0 = floatMul<TestFloat>(1, 0)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(1, 0)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
  # test 1 = floatMul<TestFloat>(1, 1)
  -
    source: 'test 1 = floatMul<TestFloat>(1, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(1, 1)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test 0 = floatMul<TestFloat>(0, 2)
  -
    source: 'test 0 = floatMul<TestFloat>(0, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(0, 2)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test 0 = floatMul<TestFloat>(2, 0)
  -
    source: 'test 0 = floatMul<TestFloat>(2, 0)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(2, 0)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
  # test 2 = floatMul<TestFloat>(1, 2)
  -
    source: 'test 2 = floatMul<TestFloat>(1, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '2'
          trits: '0000000000000000-1-10000'
          trytes: '99999FB9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(1, 2)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test 2 = floatMul<TestFloat>(2, 1)
  -
    source: 'test 2 = floatMul<TestFloat>(2, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '2'
          trits: '0000000000000000-1-10000'
          trytes: '99999FB9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(2, 1)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test 4 = floatMul<TestFloat>(2, 2)
  -
    source: 'test 4 = floatMul<TestFloat>(2, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '4'
          trits: '000000000000000011-10000'
          trytes: '99999LB9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(2, 2)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test 0 = floatMul<TestFloat>(0, -1)
  -
    source: 'test 0 = floatMul<TestFloat>(0, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(0, -1)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test 0 = floatMul<TestFloat>(-1, 0)
  -
    source: 'test 0 = floatMul<TestFloat>(-1, 0)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(-1, 0)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
  # test 1 = floatMul<TestFloat>(-1, -1)
  -
    source: 'test 1 = floatMul<TestFloat>(-1, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(-1, -1)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test 0 = floatMul<TestFloat>(0, -2)
  -
    source: 'test 0 = floatMul<TestFloat>(0, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(0, -2)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test 0 = floatMul<TestFloat>(-2, 0)
  -
    source: 'test 0 = floatMul<TestFloat>(-2, 0)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(-2, 0)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
  # test 2 = floatMul<TestFloat>(-1, -2)
  -
    source: 'test 2 = floatMul<TestFloat>(-1, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '2'
          trits: '0000000000000000-1-10000'
          trytes: '99999FB9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(-1, -2)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test 2 = floatMul<TestFloat>(-2, -1)
  -
    source: 'test 2 = floatMul<TestFloat>(-2, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '2'
          trits: '0000000000000000-1-10000'
          trytes: '99999FB9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(-2, -1)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test 4 = floatMul<TestFloat>(-2, -2)
  -
    source: 'test 4 = floatMul<TestFloat>(-2, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '4'
          trits: '000000000000000011-10000'
          trytes: '99999LB9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(-2, -2)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test -1 = floatMul<TestFloat>(1, -1)
  -
    source: 'test -1 = floatMul<TestFloat>(1, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1'
          trits: '00000000000000000-100000'
          trytes: '99999RA9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(1, -1)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test -2 = floatMul<TestFloat>(1, -2)
  -
    source: 'test -2 = floatMul<TestFloat>(1, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-2'
          trits: '00000000000000001--10000'
          trytes: '99999UB9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(1, -2)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test -2 = floatMul<TestFloat>(2, -1)
  -
    source: 'test -2 = floatMul<TestFloat>(2, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-2'
          trits: '00000000000000001--10000'
          trytes: '99999UB9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(2, -1)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test -4 = floatMul<TestFloat>(2, -2)
  -
    source: 'test -4 = floatMul<TestFloat>(2, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-4'
          trits: '0000000000000000---10000'
          trytes: '99999OB9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(2, -2)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test -1 = floatMul<TestFloat>(-1, 1)
  -
    source: 'test -1 = floatMul<TestFloat>(-1, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1'
          trits: '00000000000000000-100000'
          trytes: '99999RA9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(-1, 1)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test -2 = floatMul<TestFloat>(-1, 2)
  -
    source: 'test -2 = floatMul<TestFloat>(-1, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-2'
          trits: '00000000000000001--10000'
          trytes: '99999UB9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(-1, 2)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test -2 = floatMul<TestFloat>(-2, 1)
  -
    source: 'test -2 = floatMul<TestFloat>(-2, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-2'
          trits: '00000000000000001--10000'
          trytes: '99999UB9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(-2, 1)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test -4 = floatMul<TestFloat>(-2, 2)
  -
    source: 'test -4 = floatMul<TestFloat>(-2, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-4'
          trits: '0000000000000000---10000'
          trytes: '99999OB9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(-2, 2)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test 9 = floatMul<TestFloat>(3, 3)
  -
    source: 'test 9 = floatMul<TestFloat>(3, 3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '9'
          trits: '000000000000000001010000'
          trytes: '99999IC9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(3, 3)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '000000000000000001-10000'
              trytes: '99999IB9'
        - 
          ValueExpr:
              value: '3'
              trits: '000000000000000001-10000'
              trytes: '99999IB9'
  # test -9 = floatMul<TestFloat>(3, -3)
  -
    source: 'test -9 = floatMul<TestFloat>(3, -3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-9'
          trits: '00000000000000000-010000'
          trytes: '99999RC9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(3, -3)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '000000000000000001-10000'
              trytes: '99999IB9'
        - 
          ValueExpr:
              value: '-3'
              trits: '00000000000000000--10000'
              trytes: '99999RB9'
  # test -9 = floatMul<TestFloat>(-3, 3)
  -
    source: 'test -9 = floatMul<TestFloat>(-3, 3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-9'
          trits: '00000000000000000-010000'
          trytes: '99999RC9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(-3, 3)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '00000000000000000--10000'
              trytes: '99999RB9'
        - 
          ValueExpr:
              value: '3'
              trits: '000000000000000001-10000'
              trytes: '99999IB9'
  # test 9 = floatMul<TestFloat>(-3, -3)
  -
    source: 'test 9 = floatMul<TestFloat>(-3, -3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '9'
          trits: '000000000000000001010000'
          trytes: '99999IC9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(-3, -3)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '00000000000000000--10000'
              trytes: '99999RB9'
        - 
          ValueExpr:
              value: '-3'
              trits: '00000000000000000--10000'
              trytes: '99999RB9'
  # test 4.08 = floatMul<TestFloat>(1.2, 3.4)
  -
    source: 'test 4.08 = floatMul<TestFloat>(1.2, 3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '4.08'
          trits: '--01-0-001110-1011-10000'
          trytes: 'WYZMFLB9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(1.2, 3.4)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '1.2'
              trits: '11--11--11--11--11100000'
              trytes: 'VKEPVKA9'
        - 
          ValueExpr:
              value: '3.4'
              trits: '--11--11--11--1101-10000'
              trytes: 'EPVKEJB9'
  # test -4.08 = floatMul<TestFloat>(-1.2, 3.4)
  -
    source: 'test -4.08 = floatMul<TestFloat>(-1.2, 3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-4.08'
          trits: '110-10100---01-0---10000'
          trytes: 'DBANUOB9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(-1.2, 3.4)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '-1.2'
              trits: '--11--11--11--11--100000'
              trytes: 'EPVKEPA9'
        - 
          ValueExpr:
              value: '3.4'
              trits: '--11--11--11--1101-10000'
              trytes: 'EPVKEJB9'
  # test -4.08 = floatMul<TestFloat>(1.2, -3.4)
  -
    source: 'test -4.08 = floatMul<TestFloat>(1.2, -3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-4.08'
          trits: '110-10100---01-0---10000'
          trytes: 'DBANUOB9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(1.2, -3.4)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '1.2'
              trits: '11--11--11--11--11100000'
              trytes: 'VKEPVKA9'
        - 
          ValueExpr:
              value: '-3.4'
              trits: '11--11--11--11--0--10000'
              trytes: 'VKEPVQB9'
  # test 4.08 = floatMul<TestFloat>(-1.2, -3.4)
  -
    source: 'test 4.08 = floatMul<TestFloat>(-1.2, -3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '4.08'
          trits: '--01-0-001110-1011-10000'
          trytes: 'WYZMFLB9'
    expr: 
      FuncExpr:
        source: 'floatMul<TestFloat>(-1.2, -3.4)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '-1.2'
              trits: '--11--11--11--11--100000'
              trytes: 'EPVKEPA9'
        - 
          ValueExpr:
              value: '-3.4'
              trits: '11--11--11--11--0--10000'
              trytes: 'VKEPVQB9'
  # test 0 = floatDiv<TestFloat>(0, 0)
  -
    source: 'test 0 = floatDiv<TestFloat>(0, 0)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(0, 0)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
  # test 0 = floatDiv<TestFloat>(0, 1)
  -
    source: 'test 0 = floatDiv<TestFloat>(0, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(0, 1)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test 1 = floatDiv<TestFloat>(1, 1)
  -
    source: 'test 1 = floatDiv<TestFloat>(1, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(1, 1)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test 0 = floatDiv<TestFloat>(0, 2)
  -
    source: 'test 0 = floatDiv<TestFloat>(0, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(0, 2)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test 0.5 = floatDiv<TestFloat>(1, 2)
  -
    source: 'test 0.5 = floatDiv<TestFloat>(1, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.5'
          trits: '111111111111111111000000'
          trytes: 'MMMMMM99'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(1, 2)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test 2 = floatDiv<TestFloat>(2, 1)
  -
    source: 'test 2 = floatDiv<TestFloat>(2, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '2'
          trits: '0000000000000000-1-10000'
          trytes: '99999FB9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(2, 1)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test 1 = floatDiv<TestFloat>(2, 2)
  -
    source: 'test 1 = floatDiv<TestFloat>(2, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(2, 2)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test 0 = floatDiv<TestFloat>(0, -1)
  -
    source: 'test 0 = floatDiv<TestFloat>(0, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(0, -1)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test 1 = floatDiv<TestFloat>(-1, -1)
  -
    source: 'test 1 = floatDiv<TestFloat>(-1, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(-1, -1)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test 0 = floatDiv<TestFloat>(0, -2)
  -
    source: 'test 0 = floatDiv<TestFloat>(0, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000'
          trytes: '99999999'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(0, -2)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000'
              trytes: '99999999'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test 0.5 = floatDiv<TestFloat>(-1, -2)
  -
    source: 'test 0.5 = floatDiv<TestFloat>(-1, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.5'
          trits: '111111111111111111000000'
          trytes: 'MMMMMM99'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(-1, -2)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test 2 = floatDiv<TestFloat>(-2, -1)
  -
    source: 'test 2 = floatDiv<TestFloat>(-2, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '2'
          trits: '0000000000000000-1-10000'
          trytes: '99999FB9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(-2, -1)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test 1 = floatDiv<TestFloat>(-2, -2)
  -
    source: 'test 1 = floatDiv<TestFloat>(-2, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(-2, -2)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test -1 = floatDiv<TestFloat>(1, -1)
  -
    source: 'test -1 = floatDiv<TestFloat>(1, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1'
          trits: '00000000000000000-100000'
          trytes: '99999RA9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(1, -1)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test -0.5 = floatDiv<TestFloat>(1, -2)
  -
    source: 'test -0.5 = floatDiv<TestFloat>(1, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-0.5'
          trits: '------------------000000'
          trytes: 'NNNNNN99'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(1, -2)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test -2 = floatDiv<TestFloat>(2, -1)
  -
    source: 'test -2 = floatDiv<TestFloat>(2, -1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-2'
          trits: '00000000000000001--10000'
          trytes: '99999UB9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(2, -1)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
  # test -1 = floatDiv<TestFloat>(2, -2)
  -
    source: 'test -1 = floatDiv<TestFloat>(2, -2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1'
          trits: '00000000000000000-100000'
          trytes: '99999RA9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(2, -2)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
  # test -1 = floatDiv<TestFloat>(-1, 1)
  -
    source: 'test -1 = floatDiv<TestFloat>(-1, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1'
          trits: '00000000000000000-100000'
          trytes: '99999RA9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(-1, 1)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test -0.5 = floatDiv<TestFloat>(-1, 2)
  -
    source: 'test -0.5 = floatDiv<TestFloat>(-1, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-0.5'
          trits: '------------------000000'
          trytes: 'NNNNNN99'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(-1, 2)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '00000000000000000-100000'
              trytes: '99999RA9'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test -2 = floatDiv<TestFloat>(-2, 1)
  -
    source: 'test -2 = floatDiv<TestFloat>(-2, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-2'
          trits: '00000000000000001--10000'
          trytes: '99999UB9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(-2, 1)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test -1 = floatDiv<TestFloat>(-2, 2)
  -
    source: 'test -1 = floatDiv<TestFloat>(-2, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1'
          trits: '00000000000000000-100000'
          trytes: '99999RA9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(-2, 2)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '00000000000000001--10000'
              trytes: '99999UB9'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000000000000-1-10000'
              trytes: '99999FB9'
  # test 1 = floatDiv<TestFloat>(3, 3)
  -
    source: 'test 1 = floatDiv<TestFloat>(3, 3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(3, 3)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '000000000000000001-10000'
              trytes: '99999IB9'
        - 
          ValueExpr:
              value: '3'
              trits: '000000000000000001-10000'
              trytes: '99999IB9'
  # test -1 = floatDiv<TestFloat>(3, -3)
  -
    source: 'test -1 = floatDiv<TestFloat>(3, -3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1'
          trits: '00000000000000000-100000'
          trytes: '99999RA9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(3, -3)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '000000000000000001-10000'
              trytes: '99999IB9'
        - 
          ValueExpr:
              value: '-3'
              trits: '00000000000000000--10000'
              trytes: '99999RB9'
  # test -1 = floatDiv<TestFloat>(-3, 3)
  -
    source: 'test -1 = floatDiv<TestFloat>(-3, 3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1'
          trits: '00000000000000000-100000'
          trytes: '99999RA9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(-3, 3)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '00000000000000000--10000'
              trytes: '99999RB9'
        - 
          ValueExpr:
              value: '3'
              trits: '000000000000000001-10000'
              trytes: '99999IB9'
  # test 1 = floatDiv<TestFloat>(-3, -3)
  -
    source: 'test 1 = floatDiv<TestFloat>(-3, -3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TestFloat>(-3, -3)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '00000000000000000--10000'
              trytes: '99999RB9'
        - 
          ValueExpr:
              value: '-3'
              trits: '00000000000000000--10000'
              trytes: '99999RB9'
  # test 0.35294 = floatDiv<TinyFloat>(1.2, 3.4)
  -
    source: 'test 0.35294 = floatDiv<TinyFloat>(1.2, 3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.35294'
          trits: '-01---101000'
          trytes: 'HNJ9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TinyFloat>(1.2, 3.4)'
        name: floatDiv_12
        args:
        - 
          ValueExpr:
              value: '1.2'
              trits: '1--11--11100'
              trytes: 'PVKA'
        - 
          ValueExpr:
              value: '3.4'
              trits: '-11--1101-10'
              trytes: 'KEJB'
  # test -0.35294 = floatDiv<TinyFloat>(-1.2, 3.4)
  -
    source: 'test -0.35294 = floatDiv<TinyFloat>(-1.2, 3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-0.35294'
          trits: '10-111-0-000'
          trytes: 'SMQ9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TinyFloat>(-1.2, 3.4)'
        name: floatDiv_12
        args:
        - 
          ValueExpr:
              value: '-1.2'
              trits: '-11--11--100'
              trytes: 'KEPA'
        - 
          ValueExpr:
              value: '3.4'
              trits: '-11--1101-10'
              trytes: 'KEJB'
  # test -0.35294 = floatDiv<TinyFloat>(1.2, -3.4)
  -
    source: 'test -0.35294 = floatDiv<TinyFloat>(1.2, -3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-0.35294'
          trits: '10-111-0-000'
          trytes: 'SMQ9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TinyFloat>(1.2, -3.4)'
        name: floatDiv_12
        args:
        - 
          ValueExpr:
              value: '1.2'
              trits: '1--11--11100'
              trytes: 'PVKA'
        - 
          ValueExpr:
              value: '-3.4'
              trits: '1--11--0--10'
              trytes: 'PVQB'
  # test 0.35294 = floatDiv<TinyFloat>(-1.2, -3.4)
  -
    source: 'test 0.35294 = floatDiv<TinyFloat>(-1.2, -3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.35294'
          trits: '-01---101000'
          trytes: 'HNJ9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TinyFloat>(-1.2, -3.4)'
        name: floatDiv_12
        args:
        - 
          ValueExpr:
              value: '-1.2'
              trits: '-11--11--100'
              trytes: 'KEPA'
        - 
          ValueExpr:
              value: '-3.4'
              trits: '1--11--0--10'
              trytes: 'PVQB'
  # test 0.3529411764706 = floatDiv<Float>(1.2, 3.4)
  -
    source: 'test 0.3529411764706 = floatDiv<Float>(1.2, 3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.3529411764706'
          trits: '010-111-0-01---101000000'
          trytes: 'CKYHNJ99'
    expr: 
      FuncExpr:
        source: 'floatDiv<Float>(1.2, 3.4)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '1.2'
              trits: '11--11--11--11--11100000'
              trytes: 'VKEPVKA9'
        - 
          ValueExpr:
              value: '3.4'
              trits: '--11--11--11--1101-10000'
              trytes: 'EPVKEJB9'
  # test -0.3529411764706 = floatDiv<Float>(-1.2, 3.4)
  -
    source: 'test -0.3529411764706 = floatDiv<Float>(-1.2, 3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-0.3529411764706'
          trits: '0-01---1010-111-0-000000'
          trytes: 'XPBSMQ99'
    expr: 
      FuncExpr:
        source: 'floatDiv<Float>(-1.2, 3.4)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '-1.2'
              trits: '--11--11--11--11--100000'
              trytes: 'EPVKEPA9'
        - 
          ValueExpr:
              value: '3.4'
              trits: '--11--11--11--1101-10000'
              trytes: 'EPVKEJB9'
  # test -0.3529411764706 = floatDiv<Float>(1.2, -3.4)
  -
    source: 'test -0.3529411764706 = floatDiv<Float>(1.2, -3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-0.3529411764706'
          trits: '0-01---1010-111-0-000000'
          trytes: 'XPBSMQ99'
    expr: 
      FuncExpr:
        source: 'floatDiv<Float>(1.2, -3.4)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '1.2'
              trits: '11--11--11--11--11100000'
              trytes: 'VKEPVKA9'
        - 
          ValueExpr:
              value: '-3.4'
              trits: '11--11--11--11--0--10000'
              trytes: 'VKEPVQB9'
  # test 0.3529411764706 = floatDiv<Float>(-1.2, -3.4)
  -
    source: 'test 0.3529411764706 = floatDiv<Float>(-1.2, -3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.3529411764706'
          trits: '010-111-0-01---101000000'
          trytes: 'CKYHNJ99'
    expr: 
      FuncExpr:
        source: 'floatDiv<Float>(-1.2, -3.4)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '-1.2'
              trits: '--11--11--11--11--100000'
              trytes: 'EPVKEPA9'
        - 
          ValueExpr:
              value: '-3.4'
              trits: '11--11--11--11--0--10000'
              trytes: 'VKEPVQB9'
  # test 0.35294117647058823 = floatDiv<Double>(1.2, 3.4)
  -
    source: 'test 0.35294117647058823 = floatDiv<Double>(1.2, 3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.35294117647058823'
          trits: '10010-111-0-01---1010-111-0-01---101000000000'
          trytes: 'ASMQUECKYHNJ999'
    expr: 
      FuncExpr:
        source: 'floatDiv<Double>(1.2, 3.4)'
        name: floatDiv_45
        args:
        - 
          ValueExpr:
              value: '1.2'
              trits: '--11--11--11--11--11--11--11--11--11100000000'
              trytes: 'EPVKEPVKEPVKA99'
        - 
          ValueExpr:
              value: '3.4'
              trits: '11--11--11--11--11--11--11--11--1101-10000000'
              trytes: 'VKEPVKEPVKEJB99'
  # test -0.35294117647058823 = floatDiv<Double>(-1.2, 3.4)
  -
    source: 'test -0.35294117647058823 = floatDiv<Double>(-1.2, 3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-0.35294117647058823'
          trits: '-00-01---1010-111-0-01---1010-111-0-000000000'
          trytes: 'ZHNJFVXPBSMQ999'
    expr: 
      FuncExpr:
        source: 'floatDiv<Double>(-1.2, 3.4)'
        name: floatDiv_45
        args:
        - 
          ValueExpr:
              value: '-1.2'
              trits: '11--11--11--11--11--11--11--11--11--100000000'
              trytes: 'VKEPVKEPVKEPA99'
        - 
          ValueExpr:
              value: '3.4'
              trits: '11--11--11--11--11--11--11--11--1101-10000000'
              trytes: 'VKEPVKEPVKEJB99'
  # test -0.35294117647058823 = floatDiv<Double>(1.2, -3.4)
  -
    source: 'test -0.35294117647058823 = floatDiv<Double>(1.2, -3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-0.35294117647058823'
          trits: '-00-01---1010-111-0-01---1010-111-0-000000000'
          trytes: 'ZHNJFVXPBSMQ999'
    expr: 
      FuncExpr:
        source: 'floatDiv<Double>(1.2, -3.4)'
        name: floatDiv_45
        args:
        - 
          ValueExpr:
              value: '1.2'
              trits: '--11--11--11--11--11--11--11--11--11100000000'
              trytes: 'EPVKEPVKEPVKA99'
        - 
          ValueExpr:
              value: '-3.4'
              trits: '--11--11--11--11--11--11--11--11--0--10000000'
              trytes: 'EPVKEPVKEPVQB99'
  # test 0.35294117647058823 = floatDiv<Double>(-1.2, -3.4)
  -
    source: 'test 0.35294117647058823 = floatDiv<Double>(-1.2, -3.4)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.35294117647058823'
          trits: '10010-111-0-01---1010-111-0-01---101000000000'
          trytes: 'ASMQUECKYHNJ999'
    expr: 
      FuncExpr:
        source: 'floatDiv<Double>(-1.2, -3.4)'
        name: floatDiv_45
        args:
        - 
          ValueExpr:
              value: '-1.2'
              trits: '11--11--11--11--11--11--11--11--11--100000000'
              trytes: 'VKEPVKEPVKEPA99'
        - 
          ValueExpr:
              value: '-3.4'
              trits: '--11--11--11--11--11--11--11--11--0--10000000'
              trytes: 'EPVKEPVKEPVQB99'
  # test 123 = floatDiv<TinyFloat>(123, 1)
  -
    source: 'test 123 = floatDiv<TinyFloat>(123, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '123'
          trits: '0000----10-1'
          trytes: '9OEF'
    expr: 
      FuncExpr:
        source: 'floatDiv<TinyFloat>(123, 1)'
        name: floatDiv_12
        args:
        - 
          ValueExpr:
              value: '123'
              trits: '0000----10-1'
              trytes: '9OEF'
        - 
          ValueExpr:
              value: '1'
              trits: '000000001100'
              trytes: '99IA'
  # test 0.5 = floatDiv<TinyFloat>(5, 10)
  -
    source: 'test 0.5 = floatDiv<TinyFloat>(5, 10)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.5'
          trits: '111111111000'
          trytes: 'MMM9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TinyFloat>(5, 10)'
        name: floatDiv_12
        args:
        - 
          ValueExpr:
              value: '5'
              trits: '000000--1010'
              trytes: '99EC'
        - 
          ValueExpr:
              value: '10'
              trits: '000000101010'
              trytes: '99JC'
  # test 0.5 = floatDiv<Float>(5, 10)
  -
    source: 'test 0.5 = floatDiv<Float>(5, 10)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.5'
          trits: '111111111111111111000000'
          trytes: 'MMMMMM99'
    expr: 
      FuncExpr:
        source: 'floatDiv<Float>(5, 10)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '5'
              trits: '000000000000000--1010000'
              trytes: '99999EC9'
        - 
          ValueExpr:
              value: '10'
              trits: '000000000000000101010000'
              trytes: '99999JC9'
  # test 0.5 = floatDiv<Double>(5, 10)
  -
    source: 'test 0.5 = floatDiv<Double>(5, 10)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.5'
          trits: '111111111111111111111111111111111111000000000'
          trytes: 'MMMMMMMMMMMM999'
    expr: 
      FuncExpr:
        source: 'floatDiv<Double>(5, 10)'
        name: floatDiv_45
        args:
        - 
          ValueExpr:
              value: '5'
              trits: '000000000000000000000000000000000--1010000000'
              trytes: '99999999999EC99'
        - 
          ValueExpr:
              value: '10'
              trits: '000000000000000000000000000000000101010000000'
              trytes: '99999999999JC99'
  # test 0.5 = floatDiv<HugeFloat>(5, 10)
  -
    source: 'test 0.5 = floatDiv<HugeFloat>(5, 10)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.5'
          trits: '111111111111111111111111111111111111111111111111111111000000000000000000'
          trytes: 'MMMMMMMMMMMMMMMMMM999999'
    expr: 
      FuncExpr:
        source: 'floatDiv<HugeFloat>(5, 10)'
        name: floatDiv_72
        args:
        - 
          ValueExpr:
              value: '5'
              trits: '000000000000000000000000000000000000000000000000000--1010000000000000000'
              trytes: '99999999999999999EC99999'
        - 
          ValueExpr:
              value: '10'
              trits: '000000000000000000000000000000000000000000000000000101010000000000000000'
              trytes: '99999999999999999JC99999'
  # test 0.33333 = floatDiv<TinyFloat>(1, 3)
  -
    source: 'test 0.33333 = floatDiv<TinyFloat>(1, 3)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.33333'
          trits: '000000001000'
          trytes: '99I9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TinyFloat>(1, 3)'
        name: floatDiv_12
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000001100'
              trytes: '99IA'
        - 
          ValueExpr:
              value: '3'
              trits: '000000001-10'
              trytes: '99IB'
  # test 3.14 = floatDiv<TinyFloat>(314, 100)
  -
    source: 'test 3.14 = floatDiv<TinyFloat>(314, 100)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '3.14'
          trits: '001-11001-10'
          trytes: 'IKIB'
    expr: 
      FuncExpr:
        source: 'floatDiv<TinyFloat>(314, 100)'
        name: floatDiv_12
        args:
        - 
          ValueExpr:
              value: '314'
              trits: '000-0-0110-1'
              trytes: '9QLF'
        - 
          ValueExpr:
              value: '100'
              trits: '000010-11--1'
              trytes: '9CKE'
  # test 3.14159 = floatDiv<Float>(314159, 100000)
  -
    source: 'test 3.14159 = floatDiv<Float>(314159, 100000)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '3.14159'
          trits: '--1-1-00-111-11001-10000'
          trytes: 'ETRMKIB9'
    expr: 
      FuncExpr:
        source: 'floatDiv<Float>(314159, 100000)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '314159'
              trits: '00000----00-001--1111000'
              trytes: '9RNRIEM9'
        - 
          ValueExpr:
              value: '100000'
              trits: '00000010---1-10--1011000'
              trytes: '99SEBEL9'
  # test 3.14159 = floatDiv<Float>(3.14159, 1)
  -
    source: 'test 3.14159 = floatDiv<Float>(3.14159, 1)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '3.14159'
          trits: '--1-1-00-111-11001-10000'
          trytes: 'ETRMKIB9'
    expr: 
      FuncExpr:
        source: 'floatDiv<Float>(3.14159, 1)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '3.14159'
              trits: '--1-1-00-111-11001-10000'
              trytes: 'ETRMKIB9'
        - 
          ValueExpr:
              value: '1'
              trits: '000000000000000001100000'
              trytes: '99999IA9'
  # test 0.5 = floatDiv<TinyFloat>(1, 2)
  -
    source: 'test 0.5 = floatDiv<TinyFloat>(1, 2)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.5'
          trits: '111111111000'
          trytes: 'MMM9'
    expr: 
      FuncExpr:
        source: 'floatDiv<TinyFloat>(1, 2)'
        name: floatDiv_12
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000001100'
              trytes: '99IA'
        - 
          ValueExpr:
              value: '2'
              trits: '0000000-1-10'
              trytes: '99FB'
  # test 1 = floatMul<TinyFloat>(2, 0.5)
  -
    source: 'test 1 = floatMul<TinyFloat>(2, 0.5)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000001100'
          trytes: '99IA'
    expr: 
      FuncExpr:
        source: 'floatMul<TinyFloat>(2, 0.5)'
        name: floatMul_12
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000-1-10'
              trytes: '99FB'
        - 
          ValueExpr:
              value: '0.5'
              trits: '111111111000'
              trytes: 'MMM9'
  # test 1 = floatAdd<TinyFloat>(0.5, 0.5)
  -
    source: 'test 1 = floatAdd<TinyFloat>(0.5, 0.5)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000001100'
          trytes: '99IA'
    expr: 
      FuncExpr:
        source: 'floatAdd<TinyFloat>(0.5, 0.5)'
        name: floatAdd_12
        args:
        - 
          ValueExpr:
              value: '0.5'
              trits: '111111111000'
              trytes: 'MMM9'
        - 
          ValueExpr:
              value: '0.5'
              trits: '111111111000'
              trytes: 'MMM9'
  # test 2.5 = floatAdd<TinyFloat>(2, 0.5)
  -
    source: 'test 2.5 = floatAdd<TinyFloat>(2, 0.5)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '2.5'
          trits: '1111111-1-10'
          trytes: 'MMGB'
    expr: 
      FuncExpr:
        source: 'floatAdd<TinyFloat>(2, 0.5)'
        name: floatAdd_12
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '0000000-1-10'
              trytes: '99FB'
        - 
          ValueExpr:
              value: '0.5'
              trits: '111111111000'
              trytes: 'MMM9'
  # test 0.001 = floatDiv<TinyFloat>(1, 1000)
  -
    source: 'test 0.001 = floatDiv<TinyFloat>(1, 1000)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.001'
          trits: '1100--1-111-'
          trytes: 'DOGV'
    expr: 
      FuncExpr:
        source: 'floatDiv<TinyFloat>(1, 1000)'
        name: floatDiv_12
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '000000001100'
              trytes: '99IA'
        - 
          ValueExpr:
              value: '1000'
              trits: '0010010111-1'
              trytes: 'IILG'
  # test 0.001 = floatDiv<TinyFloat>(0.01, 10)
  -
    source: 'test 0.001 = floatDiv<TinyFloat>(0.01, 10)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.001'
          trits: '1100--1-111-'
          trytes: 'DOGV'
    expr: 
      FuncExpr:
        source: 'floatDiv<TinyFloat>(0.01, 10)'
        name: floatDiv_12
        args:
        - 
          ValueExpr:
              value: '0.01'
              trits: '11--011-10-0'
              trytes: 'VHGX'
        - 
          ValueExpr:
              value: '10'
              trits: '000000101010'
              trytes: '99JC'
  # test 1000 = floatAdd<TinyFloat>(0.001, 1000)
  -
    source: 'test 1000 = floatAdd<TinyFloat>(0.001, 1000)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1000'
          trits: '0010010111-1'
          trytes: 'IILG'
    expr: 
      FuncExpr:
        source: 'floatAdd<TinyFloat>(0.001, 1000)'
        name: floatAdd_12
        args:
        - 
          ValueExpr:
              value: '0.001'
              trits: '1100--1-111-'
              trytes: 'DOGV'
        - 
          ValueExpr:
              value: '1000'
              trits: '0010010111-1'
              trytes: 'IILG'
  # test 1000.001 = floatAdd<Float>(0.001, 1000)
  -
    source: 'test 1000.001 = floatAdd<Float>(0.001, 1000)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1000.001'
          trits: '0--1-10000010010111-1000'
          trytes: 'OG9IILG9'
    expr: 
      FuncExpr:
        source: 'floatAdd<Float>(0.001, 1000)'
        name: floatAdd_24
        args:
        - 
          ValueExpr:
              value: '0.001'
              trits: '-11110-001100--1-111-000'
              trytes: 'KDZDOGV9'
        - 
          ValueExpr:
              value: '1000'
              trits: '0000000000010010111-1000'
              trytes: '999IILG9'
  # test -1000 = floatSub<TinyFloat>(0.001, 1000)
  -
    source: 'test -1000 = floatSub<TinyFloat>(0.001, 1000)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-1000'
          trits: '00-00-0--1-1'
          trytes: 'RROG'
    expr: 
      FuncExpr:
        source: 'floatSub<TinyFloat>(0.001, 1000)'
        name: floatSub_12
        args:
        - 
          ValueExpr:
              value: '0.001'
              trits: '1100--1-111-'
              trytes: 'DOGV'
        - 
          ValueExpr:
              value: '1000'
              trits: '0010010111-1'
              trytes: 'IILG'
  # test -999.999 = floatSub<Float>(0.001, 1000)
  -
    source: 'test -999.999 = floatSub<Float>(0.001, 1000)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '-999.999'
          trits: '0--1-100000-00-0--1-1000'
          trytes: 'OG9RROG9'
    expr: 
      FuncExpr:
        source: 'floatSub<Float>(0.001, 1000)'
        name: floatSub_24
        args:
        - 
          ValueExpr:
              value: '0.001'
              trits: '-11110-001100--1-111-000'
              trytes: 'KDZDOGV9'
        - 
          ValueExpr:
              value: '1000'
              trits: '0000000000010010111-1000'
              trytes: '999IILG9'
  # test 1 = floatMul<TinyFloat>(0.001, 1000)
  -
    source: 'test 1 = floatMul<TinyFloat>(0.001, 1000)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000001100'
          trytes: '99IA'
    expr: 
      FuncExpr:
        source: 'floatMul<TinyFloat>(0.001, 1000)'
        name: floatMul_12
        args:
        - 
          ValueExpr:
              value: '0.001'
              trits: '1100--1-111-'
              trytes: 'DOGV'
        - 
          ValueExpr:
              value: '1000'
              trits: '0010010111-1'
              trytes: 'IILG'
  # test 1 = floatMul<Float>(0.001, 1000)
  -
    source: 'test 1 = floatMul<Float>(0.001, 1000)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '1'
          trits: '000000000000000001100000'
          trytes: '99999IA9'
    expr: 
      FuncExpr:
        source: 'floatMul<Float>(0.001, 1000)'
        name: floatMul_24
        args:
        - 
          ValueExpr:
              value: '0.001'
              trits: '-11110-001100--1-111-000'
              trytes: 'KDZDOGV9'
        - 
          ValueExpr:
              value: '1000'
              trits: '0000000000010010111-1000'
              trytes: '999IILG9'
  # test 0.000001 = floatDiv<TinyFloat>(0.001, 1000)
  -
    source: 'test 0.000001 = floatDiv<TinyFloat>(0.001, 1000)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.000001'
          trits: '11001---11--'
          trytes: 'DUEP'
    expr: 
      FuncExpr:
        source: 'floatDiv<TinyFloat>(0.001, 1000)'
        name: floatDiv_12
        args:
        - 
          ValueExpr:
              value: '0.001'
              trits: '1100--1-111-'
              trytes: 'DOGV'
        - 
          ValueExpr:
              value: '1000'
              trits: '0010010111-1'
              trytes: 'IILG'
  # test 0.000001 = floatDiv<Float>(0.001, 1000)
  -
    source: 'test 0.000001 = floatDiv<Float>(0.001, 1000)'
    isFloat: true
    expected: 
      ValueExpr:
          value: '0.000001'
          trits: '11---101-11001---11--000'
          trytes: 'VEUDUEP9'
    expr: 
      FuncExpr:
        source: 'floatDiv<Float>(0.001, 1000)'
        name: floatDiv_24
        args:
        - 
          ValueExpr:
              value: '0.001'
              trits: '-11110-001100--1-111-000'
              trytes: 'KDZDOGV9'
        - 
          ValueExpr:
              value: '1000'
              trits: '0000000000010010111-1000'
              trytes: '999IILG9'
  # test 16 = fullMul<Tryte>(4, 4)
  -
    source: 'test 16 = fullMul<Tryte>(4, 4)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '16'
          trits: '1--100'
          trytes: 'PA'
    expr: 
      FuncExpr:
        source: 'fullMul<Tryte>(4, 4)'
        name: fullMul_3
        args:
        - 
          ValueExpr:
              value: '4'
              trits: '110'
              trytes: 'D'
        - 
          ValueExpr:
              value: '4'
              trits: '110'
              trytes: 'D'
  # test 25 = fullMul<Tryte>(5, 5)
  -
    source: 'test 25 = fullMul<Tryte>(5, 5)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '25'
          trits: '1-0100'
          trytes: 'YA'
    expr: 
      FuncExpr:
        source: 'fullMul<Tryte>(5, 5)'
        name: fullMul_3
        args:
        - 
          ValueExpr:
              value: '5'
              trits: '--1'
              trytes: 'E'
        - 
          ValueExpr:
              value: '5'
              trits: '--1'
              trytes: 'E'
  # test 36 = fullMul<Tryte>(6, 6)
  -
    source: 'test 36 = fullMul<Tryte>(6, 6)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '36'
          trits: '001100'
          trytes: 'IA'
    expr: 
      FuncExpr:
        source: 'fullMul<Tryte>(6, 6)'
        name: fullMul_3
        args:
        - 
          ValueExpr:
              value: '6'
              trits: '0-1'
              trytes: 'F'
        - 
          ValueExpr:
              value: '6'
              trits: '0-1'
              trytes: 'F'
  # test 49 = fullMul<Tryte>(7, 7)
  -
    source: 'test 49 = fullMul<Tryte>(7, 7)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '49'
          trits: '11--10'
          trytes: 'VB'
    expr: 
      FuncExpr:
        source: 'fullMul<Tryte>(7, 7)'
        name: fullMul_3
        args:
        - 
          ValueExpr:
              value: '7'
              trits: '1-1'
              trytes: 'G'
        - 
          ValueExpr:
              value: '7'
              trits: '1-1'
              trytes: 'G'
  # test 64 = fullMul<Tryte>(8, 8)
  -
    source: 'test 64 = fullMul<Tryte>(8, 8)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '64'
          trits: '101-10'
          trytes: 'JB'
    expr: 
      FuncExpr:
        source: 'fullMul<Tryte>(8, 8)'
        name: fullMul_3
        args:
        - 
          ValueExpr:
              value: '8'
              trits: '-01'
              trytes: 'H'
        - 
          ValueExpr:
              value: '8'
              trits: '-01'
              trytes: 'H'
  # test 81 = fullMul<Tryte>(9, 9)
  -
    source: 'test 81 = fullMul<Tryte>(9, 9)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '81'
          trits: '000010'
          trytes: '9C'
    expr: 
      FuncExpr:
        source: 'fullMul<Tryte>(9, 9)'
        name: fullMul_3
        args:
        - 
          ValueExpr:
              value: '9'
              trits: '001'
              trytes: 'I'
        - 
          ValueExpr:
              value: '9'
              trits: '001'
              trytes: 'I'
  # test 100 = fullMul<Tryte>(10, 10)
  -
    source: 'test 100 = fullMul<Tryte>(10, 10)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '100'
          trits: '10-110'
          trytes: 'SD'
    expr: 
      FuncExpr:
        source: 'fullMul<Tryte>(10, 10)'
        name: fullMul_3
        args:
        - 
          ValueExpr:
              value: '10'
              trits: '101'
              trytes: 'J'
        - 
          ValueExpr:
              value: '10'
              trits: '101'
              trytes: 'J'
  # test 121 = fullMul<Tryte>(11, 11)
  -
    source: 'test 121 = fullMul<Tryte>(11, 11)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '121'
          trits: '111110'
          trytes: 'MD'
    expr: 
      FuncExpr:
        source: 'fullMul<Tryte>(11, 11)'
        name: fullMul_3
        args:
        - 
          ValueExpr:
              value: '11'
              trits: '-11'
              trytes: 'K'
        - 
          ValueExpr:
              value: '11'
              trits: '-11'
              trytes: 'K'
  # test 144 = fullMul<Tryte>(12, 12)
  -
    source: 'test 144 = fullMul<Tryte>(12, 12)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '144'
          trits: '001--1'
          trytes: 'IE'
    expr: 
      FuncExpr:
        source: 'fullMul<Tryte>(12, 12)'
        name: fullMul_3
        args:
        - 
          ValueExpr:
              value: '12'
              trits: '011'
              trytes: 'L'
        - 
          ValueExpr:
              value: '12'
              trits: '011'
              trytes: 'L'
  # test 169 = fullMul<Tryte>(13, 13)
  -
    source: 'test 169 = fullMul<Tryte>(13, 13)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '169'
          trits: '1-10-1'
          trytes: 'GF'
    expr: 
      FuncExpr:
        source: 'fullMul<Tryte>(13, 13)'
        name: fullMul_3
        args:
        - 
          ValueExpr:
              value: '13'
              trits: '111'
              trytes: 'M'
        - 
          ValueExpr:
              value: '13'
              trits: '111'
              trytes: 'M'
  # test 132496 = fullMul<Tryte2>(364, 364)
  -
    source: 'test 132496 = fullMul<Tryte2>(364, 364)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '132496'
          trits: '1-1-1--1-1-1'
          trytes: 'GTTG'
    expr: 
      FuncExpr:
        source: 'fullMul<Tryte2>(364, 364)'
        name: fullMul_6
        args:
        - 
          ValueExpr:
              value: '364'
              trits: '111111'
              trytes: 'MM'
        - 
          ValueExpr:
              value: '364'
              trits: '111111'
              trytes: 'MM'
  # test 10758400 = fullMul<Tiny>(3280, 3280)
  -
    source: 'test 10758400 = fullMul<Tiny>(3280, 3280)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '10758400'
          trits: '1-1-1-1--1-1-1-100'
          trytes: 'GTPGTA'
    expr: 
      FuncExpr:
        source: 'fullMul<Tiny>(3280, 3280)'
        name: fullMul_9
        args:
        - 
          ValueExpr:
              value: '3280'
              trits: '111111110'
              trytes: 'MMD'
        - 
          ValueExpr:
              value: '3280'
              trits: '111111110'
              trytes: 'MMD'
  # test 43046721 = fullMul<Tiny>(6561, 6561)
  -
    source: 'test 43046721 = fullMul<Tiny>(6561, 6561)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '43046721'
          trits: '000000000000000010'
          trytes: '99999C'
    expr: 
      FuncExpr:
        source: 'fullMul<Tiny>(6561, 6561)'
        name: fullMul_9
        args:
        - 
          ValueExpr:
              value: '6561'
              trits: '000000001'
              trytes: '99I'
        - 
          ValueExpr:
              value: '6561'
              trits: '000000001'
              trytes: '99I'
  # test 96805921 = fullMul<Tiny>(9839, 9839)
  -
    source: 'test 96805921 = fullMul<Tiny>(9839, 9839)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '96805921'
          trits: '111-1-1-1110-1-1-1'
          trytes: 'MTGDTG'
    expr: 
      FuncExpr:
        source: 'fullMul<Tiny>(9839, 9839)'
        name: fullMul_9
        args:
        - 
          ValueExpr:
              value: '9839'
              trits: '-11111111'
              trytes: 'KMM'
        - 
          ValueExpr:
              value: '9839'
              trits: '-11111111'
              trytes: 'KMM'
  # test 96825600 = fullMul<Tiny>(9840, 9840)
  -
    source: 'test 96825600 = fullMul<Tiny>(9840, 9840)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '96825600'
          trits: '001-1-1-1--1-1-1-1'
          trytes: 'ITGETG'
    expr: 
      FuncExpr:
        source: 'fullMul<Tiny>(9840, 9840)'
        name: fullMul_9
        args:
        - 
          ValueExpr:
              value: '9840'
              trits: '011111111'
              trytes: 'LMM'
        - 
          ValueExpr:
              value: '9840'
              trits: '011111111'
              trytes: 'LMM'
  # test 96845281 = fullMul<Tiny>(9841, 9841)
  -
    source: 'test 96845281 = fullMul<Tiny>(9841, 9841)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '96845281'
          trits: '1-1-1-1-10-1-1-1-1'
          trytes: 'GTGFTG'
    expr: 
      FuncExpr:
        source: 'fullMul<Tiny>(9841, 9841)'
        name: fullMul_9
        args:
        - 
          ValueExpr:
              value: '9841'
              trits: '111111111'
              trytes: 'MMM'
        - 
          ValueExpr:
              value: '9841'
              trits: '111111111'
              trytes: 'MMM'
  # test 871666576 = fullMul<Tiny2>(29524, 29524)
  -
    source: 'test 871666576 = fullMul<Tiny2>(29524, 29524)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '871666576'
          trits: '1-1-1-1-1--1-1-1-1-10000000000000000'
          trytes: 'GTGETGB99999'
    expr: 
      FuncExpr:
        source: 'fullMul<Tiny2>(29524, 29524)'
        name: fullMul_18
        args:
        - 
          ValueExpr:
              value: '29524'
              trits: '111111111100000000'
              trytes: 'MMMA99'
        - 
          ValueExpr:
              value: '29524'
              trits: '111111111100000000'
              trytes: 'MMMA99'
  # test -2 = incr<Tiny>(-3)
  -
    source: 'test -2 = incr<Tiny>(-3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000'
          trytes: 'Y99'
    expr: 
      FuncExpr:
        source: 'incr<Tiny>(-3)'
        name: incr_9
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
  # test -1 = incr<Tiny>(-2)
  -
    source: 'test -1 = incr<Tiny>(-2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'incr<Tiny>(-2)'
        name: incr_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test 0 = incr<Tiny>(-1)
  -
    source: 'test 0 = incr<Tiny>(-1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'incr<Tiny>(-1)'
        name: incr_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 1 = incr<Tiny>(0)
  -
    source: 'test 1 = incr<Tiny>(0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'incr<Tiny>(0)'
        name: incr_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 2 = incr<Tiny>(1)
  -
    source: 'test 2 = incr<Tiny>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'incr<Tiny>(1)'
        name: incr_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test -2 = incr<Tiny2>(-3)
  -
    source: 'test -2 = incr<Tiny2>(-3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000000000000'
          trytes: 'Y99999'
    expr: 
      FuncExpr:
        source: 'incr<Tiny2>(-3)'
        name: incr_18
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000000000000'
              trytes: 'X99999'
  # test -1 = incr<Tiny2>(-2)
  -
    source: 'test -1 = incr<Tiny2>(-2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000000000000'
          trytes: 'Z99999'
    expr: 
      FuncExpr:
        source: 'incr<Tiny2>(-2)'
        name: incr_18
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000000000000'
              trytes: 'Y99999'
  # test 0 = incr<Tiny2>(-1)
  -
    source: 'test 0 = incr<Tiny2>(-1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000'
          trytes: '999999'
    expr: 
      FuncExpr:
        source: 'incr<Tiny2>(-1)'
        name: incr_18
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000'
              trytes: 'Z99999'
  # test 1 = incr<Tiny2>(0)
  -
    source: 'test 1 = incr<Tiny2>(0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000000000000'
          trytes: 'A99999'
    expr: 
      FuncExpr:
        source: 'incr<Tiny2>(0)'
        name: incr_18
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000'
              trytes: '999999'
  # test 2 = incr<Tiny2>(1)
  -
    source: 'test 2 = incr<Tiny2>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000000000000'
          trytes: 'B99999'
    expr: 
      FuncExpr:
        source: 'incr<Tiny2>(1)'
        name: incr_18
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000'
              trytes: 'A99999'
  # test 0 = log3<Tiny>(1)
  -
    source: 'test 0 = log3<Tiny>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(1)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 0 = log3<Tiny>(2)
  -
    source: 'test 0 = log3<Tiny>(2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(2)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 1 = log3<Tiny>(3)
  -
    source: 'test 1 = log3<Tiny>(3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(3)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
  # test 1 = log3<Tiny>(4)
  -
    source: 'test 1 = log3<Tiny>(4)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(4)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '4'
              trits: '110000000'
              trytes: 'D99'
  # test 1 = log3<Tiny>(5)
  -
    source: 'test 1 = log3<Tiny>(5)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(5)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '5'
              trits: '--1000000'
              trytes: 'E99'
  # test 1 = log3<Tiny>(6)
  -
    source: 'test 1 = log3<Tiny>(6)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(6)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '6'
              trits: '0-1000000'
              trytes: 'F99'
  # test 1 = log3<Tiny>(7)
  -
    source: 'test 1 = log3<Tiny>(7)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(7)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '7'
              trits: '1-1000000'
              trytes: 'G99'
  # test 1 = log3<Tiny>(8)
  -
    source: 'test 1 = log3<Tiny>(8)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(8)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '8'
              trits: '-01000000'
              trytes: 'H99'
  # test 2 = log3<Tiny>(9)
  -
    source: 'test 2 = log3<Tiny>(9)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(9)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '9'
              trits: '001000000'
              trytes: 'I99'
  # test 2 = log3<Tiny>(10)
  -
    source: 'test 2 = log3<Tiny>(10)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(10)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '10'
              trits: '101000000'
              trytes: 'J99'
  # test 2 = log3<Tiny>(11)
  -
    source: 'test 2 = log3<Tiny>(11)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(11)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '11'
              trits: '-11000000'
              trytes: 'K99'
  # test 2 = log3<Tiny>(12)
  -
    source: 'test 2 = log3<Tiny>(12)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(12)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '12'
              trits: '011000000'
              trytes: 'L99'
  # test 2 = log3<Tiny>(13)
  -
    source: 'test 2 = log3<Tiny>(13)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(13)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '13'
              trits: '111000000'
              trytes: 'M99'
  # test 2 = log3<Tiny>(14)
  -
    source: 'test 2 = log3<Tiny>(14)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(14)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '14'
              trits: '---100000'
              trytes: 'NA9'
  # test 2 = log3<Tiny>(15)
  -
    source: 'test 2 = log3<Tiny>(15)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(15)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '15'
              trits: '0--100000'
              trytes: 'OA9'
  # test 2 = log3<Tiny>(16)
  -
    source: 'test 2 = log3<Tiny>(16)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(16)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '16'
              trits: '1--100000'
              trytes: 'PA9'
  # test 2 = log3<Tiny>(17)
  -
    source: 'test 2 = log3<Tiny>(17)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(17)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '17'
              trits: '-0-100000'
              trytes: 'QA9'
  # test 2 = log3<Tiny>(18)
  -
    source: 'test 2 = log3<Tiny>(18)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(18)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '18'
              trits: '00-100000'
              trytes: 'RA9'
  # test 2 = log3<Tiny>(19)
  -
    source: 'test 2 = log3<Tiny>(19)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(19)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '19'
              trits: '10-100000'
              trytes: 'SA9'
  # test 2 = log3<Tiny>(20)
  -
    source: 'test 2 = log3<Tiny>(20)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(20)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '20'
              trits: '-1-100000'
              trytes: 'TA9'
  # test 2 = log3<Tiny>(21)
  -
    source: 'test 2 = log3<Tiny>(21)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(21)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '21'
              trits: '01-100000'
              trytes: 'UA9'
  # test 2 = log3<Tiny>(22)
  -
    source: 'test 2 = log3<Tiny>(22)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(22)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '22'
              trits: '11-100000'
              trytes: 'VA9'
  # test 2 = log3<Tiny>(23)
  -
    source: 'test 2 = log3<Tiny>(23)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(23)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '23'
              trits: '--0100000'
              trytes: 'WA9'
  # test 2 = log3<Tiny>(24)
  -
    source: 'test 2 = log3<Tiny>(24)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(24)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '24'
              trits: '0-0100000'
              trytes: 'XA9'
  # test 2 = log3<Tiny>(25)
  -
    source: 'test 2 = log3<Tiny>(25)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(25)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '25'
              trits: '1-0100000'
              trytes: 'YA9'
  # test 2 = log3<Tiny>(26)
  -
    source: 'test 2 = log3<Tiny>(26)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(26)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '26'
              trits: '-00100000'
              trytes: 'ZA9'
  # test 3 = log3<Tiny>(27)
  -
    source: 'test 3 = log3<Tiny>(27)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3'
          trits: '010000000'
          trytes: 'C99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(27)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '27'
              trits: '000100000'
              trytes: '9A9'
  # test 3 = log3<Tiny>(28)
  -
    source: 'test 3 = log3<Tiny>(28)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3'
          trits: '010000000'
          trytes: 'C99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(28)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '28'
              trits: '100100000'
              trytes: 'AA9'
  # test 3 = log3<Tiny>(29)
  -
    source: 'test 3 = log3<Tiny>(29)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3'
          trits: '010000000'
          trytes: 'C99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(29)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '29'
              trits: '-10100000'
              trytes: 'BA9'
  # test 3 = log3<Tiny>(80)
  -
    source: 'test 3 = log3<Tiny>(80)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3'
          trits: '010000000'
          trytes: 'C99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(80)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '80'
              trits: '-00010000'
              trytes: 'ZC9'
  # test 4 = log3<Tiny>(81)
  -
    source: 'test 4 = log3<Tiny>(81)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '4'
          trits: '110000000'
          trytes: 'D99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(81)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '81'
              trits: '000010000'
              trytes: '9C9'
  # test 4 = log3<Tiny>(82)
  -
    source: 'test 4 = log3<Tiny>(82)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '4'
          trits: '110000000'
          trytes: 'D99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(82)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '82'
              trits: '100010000'
              trytes: 'AC9'
  # test 4 = log3<Tiny>(242)
  -
    source: 'test 4 = log3<Tiny>(242)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '4'
          trits: '110000000'
          trytes: 'D99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(242)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '242'
              trits: '-00001000'
              trytes: 'ZI9'
  # test 5 = log3<Tiny>(243)
  -
    source: 'test 5 = log3<Tiny>(243)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '5'
          trits: '--1000000'
          trytes: 'E99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(243)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '243'
              trits: '000001000'
              trytes: '9I9'
  # test 5 = log3<Tiny>(244)
  -
    source: 'test 5 = log3<Tiny>(244)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '5'
          trits: '--1000000'
          trytes: 'E99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(244)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '244'
              trits: '100001000'
              trytes: 'AI9'
  # test 5 = log3<Tiny>(728)
  -
    source: 'test 5 = log3<Tiny>(728)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '5'
          trits: '--1000000'
          trytes: 'E99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(728)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '728'
              trits: '-00000100'
              trytes: 'Z9A'
  # test 6 = log3<Tiny>(729)
  -
    source: 'test 6 = log3<Tiny>(729)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '6'
          trits: '0-1000000'
          trytes: 'F99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(729)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '729'
              trits: '000000100'
              trytes: '99A'
  # test 6 = log3<Tiny>(730)
  -
    source: 'test 6 = log3<Tiny>(730)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '6'
          trits: '0-1000000'
          trytes: 'F99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(730)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '730'
              trits: '100000100'
              trytes: 'A9A'
  # test 6 = log3<Tiny>(2186)
  -
    source: 'test 6 = log3<Tiny>(2186)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '6'
          trits: '0-1000000'
          trytes: 'F99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(2186)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '2186'
              trits: '-00000010'
              trytes: 'Z9C'
  # test 7 = log3<Tiny>(2187)
  -
    source: 'test 7 = log3<Tiny>(2187)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '7'
          trits: '1-1000000'
          trytes: 'G99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(2187)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '2187'
              trits: '000000010'
              trytes: '99C'
  # test 7 = log3<Tiny>(2188)
  -
    source: 'test 7 = log3<Tiny>(2188)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '7'
          trits: '1-1000000'
          trytes: 'G99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(2188)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '2188'
              trits: '100000010'
              trytes: 'A9C'
  # test 7 = log3<Tiny>(6560)
  -
    source: 'test 7 = log3<Tiny>(6560)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '7'
          trits: '1-1000000'
          trytes: 'G99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(6560)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '6560'
              trits: '-00000001'
              trytes: 'Z9I'
  # test 8 = log3<Tiny>(6561)
  -
    source: 'test 8 = log3<Tiny>(6561)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '8'
          trits: '-01000000'
          trytes: 'H99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(6561)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '6561'
              trits: '000000001'
              trytes: '99I'
  # test 8 = log3<Tiny>(6562)
  -
    source: 'test 8 = log3<Tiny>(6562)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '8'
          trits: '-01000000'
          trytes: 'H99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(6562)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '6562'
              trits: '100000001'
              trytes: 'A9I'
  # test 7 = log3<Tiny>(6560)
  -
    source: 'test 7 = log3<Tiny>(6560)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '7'
          trits: '1-1000000'
          trytes: 'G99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(6560)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '6560'
              trits: '-00000001'
              trytes: 'Z9I'
  # test 8 = log3<Tiny>(6561)
  -
    source: 'test 8 = log3<Tiny>(6561)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '8'
          trits: '-01000000'
          trytes: 'H99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(6561)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '6561'
              trits: '000000001'
              trytes: '99I'
  # test 8 = log3<Tiny>(6562)
  -
    source: 'test 8 = log3<Tiny>(6562)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '8'
          trits: '-01000000'
          trytes: 'H99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(6562)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '6562'
              trits: '100000001'
              trytes: 'A9I'
  # test 8 = log3<Tiny>(9841)
  -
    source: 'test 8 = log3<Tiny>(9841)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '8'
          trits: '-01000000'
          trytes: 'H99'
    expr: 
      FuncExpr:
        source: 'log3<Tiny>(9841)'
        name: log3_9
        args:
        - 
          ValueExpr:
              value: '9841'
              trits: '111111111'
              trytes: 'MMM'
  # test -1 = max<Tiny>(-1, -2)
  -
    source: 'test -1 = max<Tiny>(-1, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'max<Tiny>(-1, -2)'
        name: max_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test -1 = max<Tiny>(-2, -1)
  -
    source: 'test -1 = max<Tiny>(-2, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'max<Tiny>(-2, -1)'
        name: max_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 0 = max<Tiny>(-1, 0)
  -
    source: 'test 0 = max<Tiny>(-1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'max<Tiny>(-1, 0)'
        name: max_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 0 = max<Tiny>(0, -1)
  -
    source: 'test 0 = max<Tiny>(0, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'max<Tiny>(0, -1)'
        name: max_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 1 = max<Tiny>(-1, 1)
  -
    source: 'test 1 = max<Tiny>(-1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'max<Tiny>(-1, 1)'
        name: max_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 1 = max<Tiny>(1, -1)
  -
    source: 'test 1 = max<Tiny>(1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'max<Tiny>(1, -1)'
        name: max_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 1 = max<Tiny>(1, 0)
  -
    source: 'test 1 = max<Tiny>(1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'max<Tiny>(1, 0)'
        name: max_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 1 = max<Tiny>(0, 1)
  -
    source: 'test 1 = max<Tiny>(0, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'max<Tiny>(0, 1)'
        name: max_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 2 = max<Tiny>(1, 2)
  -
    source: 'test 2 = max<Tiny>(1, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'max<Tiny>(1, 2)'
        name: max_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 2 = max<Tiny>(2, 1)
  -
    source: 'test 2 = max<Tiny>(2, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'max<Tiny>(2, 1)'
        name: max_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test -2 = min<Tiny>(-1, -2)
  -
    source: 'test -2 = min<Tiny>(-1, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000'
          trytes: 'Y99'
    expr: 
      FuncExpr:
        source: 'min<Tiny>(-1, -2)'
        name: min_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test -2 = min<Tiny>(-2, -1)
  -
    source: 'test -2 = min<Tiny>(-2, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000'
          trytes: 'Y99'
    expr: 
      FuncExpr:
        source: 'min<Tiny>(-2, -1)'
        name: min_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test -1 = min<Tiny>(-1, 0)
  -
    source: 'test -1 = min<Tiny>(-1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'min<Tiny>(-1, 0)'
        name: min_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test -1 = min<Tiny>(0, -1)
  -
    source: 'test -1 = min<Tiny>(0, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'min<Tiny>(0, -1)'
        name: min_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test -1 = min<Tiny>(-1, 1)
  -
    source: 'test -1 = min<Tiny>(-1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'min<Tiny>(-1, 1)'
        name: min_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test -1 = min<Tiny>(1, -1)
  -
    source: 'test -1 = min<Tiny>(1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'min<Tiny>(1, -1)'
        name: min_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 0 = min<Tiny>(1, 0)
  -
    source: 'test 0 = min<Tiny>(1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'min<Tiny>(1, 0)'
        name: min_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 0 = min<Tiny>(0, 1)
  -
    source: 'test 0 = min<Tiny>(0, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'min<Tiny>(0, 1)'
        name: min_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 1 = min<Tiny>(1, 2)
  -
    source: 'test 1 = min<Tiny>(1, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'min<Tiny>(1, 2)'
        name: min_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 1 = min<Tiny>(2, 1)
  -
    source: 'test 1 = min<Tiny>(2, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'min<Tiny>(2, 1)'
        name: min_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 0 = mod<Tiny>(0, 0)
  -
    source: 'test 0 = mod<Tiny>(0, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(0, 0)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 0 = mod<Tiny>(0, 1)
  -
    source: 'test 0 = mod<Tiny>(0, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(0, 1)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 0 = mod<Tiny>(1, 1)
  -
    source: 'test 0 = mod<Tiny>(1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(1, 1)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 0 = mod<Tiny>(0, 2)
  -
    source: 'test 0 = mod<Tiny>(0, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(0, 2)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 1 = mod<Tiny>(1, 2)
  -
    source: 'test 1 = mod<Tiny>(1, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(1, 2)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 0 = mod<Tiny>(2, 1)
  -
    source: 'test 0 = mod<Tiny>(2, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(2, 1)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 0 = mod<Tiny>(2, 2)
  -
    source: 'test 0 = mod<Tiny>(2, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(2, 2)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 0 = mod<Tiny>(0, -1)
  -
    source: 'test 0 = mod<Tiny>(0, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(0, -1)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 0 = mod<Tiny>(-1, -1)
  -
    source: 'test 0 = mod<Tiny>(-1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(-1, -1)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 0 = mod<Tiny>(0, -2)
  -
    source: 'test 0 = mod<Tiny>(0, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(0, -2)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test -1 = mod<Tiny>(-1, -2)
  -
    source: 'test -1 = mod<Tiny>(-1, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(-1, -2)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test 0 = mod<Tiny>(-2, -1)
  -
    source: 'test 0 = mod<Tiny>(-2, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(-2, -1)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 0 = mod<Tiny>(-2, -2)
  -
    source: 'test 0 = mod<Tiny>(-2, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(-2, -2)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test 0 = mod<Tiny>(1, -1)
  -
    source: 'test 0 = mod<Tiny>(1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(1, -1)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 1 = mod<Tiny>(1, -2)
  -
    source: 'test 1 = mod<Tiny>(1, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(1, -2)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test 0 = mod<Tiny>(2, -1)
  -
    source: 'test 0 = mod<Tiny>(2, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(2, -1)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 0 = mod<Tiny>(2, -2)
  -
    source: 'test 0 = mod<Tiny>(2, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(2, -2)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test 0 = mod<Tiny>(-1, 1)
  -
    source: 'test 0 = mod<Tiny>(-1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(-1, 1)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test -1 = mod<Tiny>(-1, 2)
  -
    source: 'test -1 = mod<Tiny>(-1, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(-1, 2)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 0 = mod<Tiny>(-2, 1)
  -
    source: 'test 0 = mod<Tiny>(-2, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(-2, 1)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 0 = mod<Tiny>(-2, 2)
  -
    source: 'test 0 = mod<Tiny>(-2, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(-2, 2)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 0 = mod<Tiny>(3, 3)
  -
    source: 'test 0 = mod<Tiny>(3, 3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(3, 3)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
  # test 0 = mod<Tiny>(3, -3)
  -
    source: 'test 0 = mod<Tiny>(3, -3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(3, -3)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
  # test 0 = mod<Tiny>(-3, 3)
  -
    source: 'test 0 = mod<Tiny>(-3, 3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(-3, 3)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
  # test 0 = mod<Tiny>(-3, -3)
  -
    source: 'test 0 = mod<Tiny>(-3, -3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mod<Tiny>(-3, -3)'
        name: mod_9
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
  # test 0 = mul<Tiny>(0, 0)
  -
    source: 'test 0 = mul<Tiny>(0, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(0, 0)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 0 = mul<Tiny>(0, 1)
  -
    source: 'test 0 = mul<Tiny>(0, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(0, 1)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 0 = mul<Tiny>(1, 0)
  -
    source: 'test 0 = mul<Tiny>(1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(1, 0)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 1 = mul<Tiny>(1, 1)
  -
    source: 'test 1 = mul<Tiny>(1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(1, 1)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 0 = mul<Tiny>(0, 2)
  -
    source: 'test 0 = mul<Tiny>(0, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(0, 2)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 0 = mul<Tiny>(2, 0)
  -
    source: 'test 0 = mul<Tiny>(2, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(2, 0)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 2 = mul<Tiny>(1, 2)
  -
    source: 'test 2 = mul<Tiny>(1, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(1, 2)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 2 = mul<Tiny>(2, 1)
  -
    source: 'test 2 = mul<Tiny>(2, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(2, 1)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 4 = mul<Tiny>(2, 2)
  -
    source: 'test 4 = mul<Tiny>(2, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '4'
          trits: '110000000'
          trytes: 'D99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(2, 2)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 0 = mul<Tiny>(0, -1)
  -
    source: 'test 0 = mul<Tiny>(0, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(0, -1)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 0 = mul<Tiny>(-1, 0)
  -
    source: 'test 0 = mul<Tiny>(-1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(-1, 0)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 1 = mul<Tiny>(-1, -1)
  -
    source: 'test 1 = mul<Tiny>(-1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(-1, -1)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 0 = mul<Tiny>(0, -2)
  -
    source: 'test 0 = mul<Tiny>(0, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(0, -2)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test 0 = mul<Tiny>(-2, 0)
  -
    source: 'test 0 = mul<Tiny>(-2, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(-2, 0)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 2 = mul<Tiny>(-1, -2)
  -
    source: 'test 2 = mul<Tiny>(-1, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(-1, -2)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test 2 = mul<Tiny>(-2, -1)
  -
    source: 'test 2 = mul<Tiny>(-2, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(-2, -1)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 4 = mul<Tiny>(-2, -2)
  -
    source: 'test 4 = mul<Tiny>(-2, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '4'
          trits: '110000000'
          trytes: 'D99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(-2, -2)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test -1 = mul<Tiny>(1, -1)
  -
    source: 'test -1 = mul<Tiny>(1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(1, -1)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test -2 = mul<Tiny>(1, -2)
  -
    source: 'test -2 = mul<Tiny>(1, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000'
          trytes: 'Y99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(1, -2)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test -2 = mul<Tiny>(2, -1)
  -
    source: 'test -2 = mul<Tiny>(2, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000'
          trytes: 'Y99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(2, -1)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test -4 = mul<Tiny>(2, -2)
  -
    source: 'test -4 = mul<Tiny>(2, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-4'
          trits: '--0000000'
          trytes: 'W99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(2, -2)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test -1 = mul<Tiny>(-1, 1)
  -
    source: 'test -1 = mul<Tiny>(-1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(-1, 1)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test -2 = mul<Tiny>(-1, 2)
  -
    source: 'test -2 = mul<Tiny>(-1, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000'
          trytes: 'Y99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(-1, 2)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test -2 = mul<Tiny>(-2, 1)
  -
    source: 'test -2 = mul<Tiny>(-2, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000'
          trytes: 'Y99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(-2, 1)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test -4 = mul<Tiny>(-2, 2)
  -
    source: 'test -4 = mul<Tiny>(-2, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-4'
          trits: '--0000000'
          trytes: 'W99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(-2, 2)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 9 = mul<Tiny>(3, 3)
  -
    source: 'test 9 = mul<Tiny>(3, 3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '9'
          trits: '001000000'
          trytes: 'I99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(3, 3)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
  # test -9 = mul<Tiny>(3, -3)
  -
    source: 'test -9 = mul<Tiny>(3, -3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-9'
          trits: '00-000000'
          trytes: 'R99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(3, -3)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
  # test -9 = mul<Tiny>(-3, 3)
  -
    source: 'test -9 = mul<Tiny>(-3, 3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-9'
          trits: '00-000000'
          trytes: 'R99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(-3, 3)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
  # test 9 = mul<Tiny>(-3, -3)
  -
    source: 'test 9 = mul<Tiny>(-3, -3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '9'
          trits: '001000000'
          trytes: 'I99'
    expr: 
      FuncExpr:
        source: 'mul<Tiny>(-3, -3)'
        name: mul_9
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
  # test 200 = mul<Int>(10, 20)
  -
    source: 'test 200 = mul<Int>(10, 20)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '200'
          trits: '-111-1000000000000000000000'
          trytes: 'KG9999999'
    expr: 
      FuncExpr:
        source: 'mul<Int>(10, 20)'
        name: mul_27
        args:
        - 
          ValueExpr:
              value: '10'
              trits: '101000000000000000000000000'
              trytes: 'J99999999'
        - 
          ValueExpr:
              value: '20'
              trits: '-1-100000000000000000000000'
              trytes: 'TA9999999'
  # test -1200 = mul<Int>(-30, 40)
  -
    source: 'test -1200 = mul<Int>(-30, 40)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1200'
          trits: '0--1011-0000000000000000000'
          trytes: 'OJY999999'
    expr: 
      FuncExpr:
        source: 'mul<Int>(-30, 40)'
        name: mul_27
        args:
        - 
          ValueExpr:
              value: '-30'
              trits: '0-0-00000000000000000000000'
              trytes: 'XZ9999999'
        - 
          ValueExpr:
              value: '40'
              trits: '111100000000000000000000000'
              trytes: 'MA9999999'
  # test -3000 = mul<Int>(50, -60)
  -
    source: 'test -3000 = mul<Int>(50, -60)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-3000'
          trits: '0-00-0--0000000000000000000'
          trytes: 'XXW999999'
    expr: 
      FuncExpr:
        source: 'mul<Int>(50, -60)'
        name: mul_27
        args:
        - 
          ValueExpr:
              value: '50'
              trits: '--0-10000000000000000000000'
              trytes: 'WB9999999'
        - 
          ValueExpr:
              value: '-60'
              trits: '01-1-0000000000000000000000'
              trytes: 'UY9999999'
  # test 5600 = mul<Int>(-70, -80)
  -
    source: 'test 5600 = mul<Int>(-70, -80)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '5600'
          trits: '-1100--01000000000000000000'
          trytes: 'KRH999999'
    expr: 
      FuncExpr:
        source: 'mul<Int>(-70, -80)'
        name: mul_27
        args:
        - 
          ValueExpr:
              value: '-70'
              trits: '-110-0000000000000000000000'
              trytes: 'KX9999999'
        - 
          ValueExpr:
              value: '-80'
              trits: '1000-0000000000000000000000'
              trytes: 'AX9999999'
  # test 99 = neg<Tiny>(-99)
  -
    source: 'test 99 = neg<Tiny>(-99)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '99'
          trits: '00-110000'
          trytes: 'RD9'
    expr: 
      FuncExpr:
        source: 'neg<Tiny>(-99)'
        name: neg_9
        args:
        - 
          ValueExpr:
              value: '-99'
              trits: '001--0000'
              trytes: 'IW9'
  # test 1 = neg<Tiny>(-1)
  -
    source: 'test 1 = neg<Tiny>(-1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'neg<Tiny>(-1)'
        name: neg_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 0 = neg<Tiny>(0)
  -
    source: 'test 0 = neg<Tiny>(0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'neg<Tiny>(0)'
        name: neg_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test -1 = neg<Tiny>(1)
  -
    source: 'test -1 = neg<Tiny>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'neg<Tiny>(1)'
        name: neg_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test -99 = neg<Tiny>(99)
  -
    source: 'test -99 = neg<Tiny>(99)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-99'
          trits: '001--0000'
          trytes: 'IW9'
    expr: 
      FuncExpr:
        source: 'neg<Tiny>(99)'
        name: neg_9
        args:
        - 
          ValueExpr:
              value: '99'
              trits: '00-110000'
              trytes: 'RD9'
  # test 99 = neg<Tiny2>(-99)
  -
    source: 'test 99 = neg<Tiny2>(-99)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '99'
          trits: '00-110000000000000'
          trytes: 'RD9999'
    expr: 
      FuncExpr:
        source: 'neg<Tiny2>(-99)'
        name: neg_18
        args:
        - 
          ValueExpr:
              value: '-99'
              trits: '001--0000000000000'
              trytes: 'IW9999'
  # test 1 = neg<Tiny2>(-1)
  -
    source: 'test 1 = neg<Tiny2>(-1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000000000000'
          trytes: 'A99999'
    expr: 
      FuncExpr:
        source: 'neg<Tiny2>(-1)'
        name: neg_18
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000'
              trytes: 'Z99999'
  # test 0 = neg<Tiny2>(0)
  -
    source: 'test 0 = neg<Tiny2>(0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000'
          trytes: '999999'
    expr: 
      FuncExpr:
        source: 'neg<Tiny2>(0)'
        name: neg_18
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000'
              trytes: '999999'
  # test -1 = neg<Tiny2>(1)
  -
    source: 'test -1 = neg<Tiny2>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000000000000'
          trytes: 'Z99999'
    expr: 
      FuncExpr:
        source: 'neg<Tiny2>(1)'
        name: neg_18
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000'
              trytes: 'A99999'
  # test -99 = neg<Tiny2>(99)
  -
    source: 'test -99 = neg<Tiny2>(99)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-99'
          trits: '001--0000000000000'
          trytes: 'IW9999'
    expr: 
      FuncExpr:
        source: 'neg<Tiny2>(99)'
        name: neg_18
        args:
        - 
          ValueExpr:
              value: '99'
              trits: '00-110000000000000'
              trytes: 'RD9999'
  # test 1 = pow3<Tiny>(0)
  -
    source: 'test 1 = pow3<Tiny>(0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'pow3<Tiny>(0)'
        name: pow3_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 3 = pow3<Tiny>(1)
  -
    source: 'test 3 = pow3<Tiny>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3'
          trits: '010000000'
          trytes: 'C99'
    expr: 
      FuncExpr:
        source: 'pow3<Tiny>(1)'
        name: pow3_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 9 = pow3<Tiny>(2)
  -
    source: 'test 9 = pow3<Tiny>(2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '9'
          trits: '001000000'
          trytes: 'I99'
    expr: 
      FuncExpr:
        source: 'pow3<Tiny>(2)'
        name: pow3_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 27 = pow3<Tiny>(3)
  -
    source: 'test 27 = pow3<Tiny>(3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '27'
          trits: '000100000'
          trytes: '9A9'
    expr: 
      FuncExpr:
        source: 'pow3<Tiny>(3)'
        name: pow3_9
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
  # test 81 = pow3<Tiny>(4)
  -
    source: 'test 81 = pow3<Tiny>(4)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '81'
          trits: '000010000'
          trytes: '9C9'
    expr: 
      FuncExpr:
        source: 'pow3<Tiny>(4)'
        name: pow3_9
        args:
        - 
          ValueExpr:
              value: '4'
              trits: '110000000'
              trytes: 'D99'
  # test 243 = pow3<Tiny>(5)
  -
    source: 'test 243 = pow3<Tiny>(5)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '243'
          trits: '000001000'
          trytes: '9I9'
    expr: 
      FuncExpr:
        source: 'pow3<Tiny>(5)'
        name: pow3_9
        args:
        - 
          ValueExpr:
              value: '5'
              trits: '--1000000'
              trytes: 'E99'
  # test 729 = pow3<Tiny>(6)
  -
    source: 'test 729 = pow3<Tiny>(6)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '729'
          trits: '000000100'
          trytes: '99A'
    expr: 
      FuncExpr:
        source: 'pow3<Tiny>(6)'
        name: pow3_9
        args:
        - 
          ValueExpr:
              value: '6'
              trits: '0-1000000'
              trytes: 'F99'
  # test 2187 = pow3<Tiny>(7)
  -
    source: 'test 2187 = pow3<Tiny>(7)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2187'
          trits: '000000010'
          trytes: '99C'
    expr: 
      FuncExpr:
        source: 'pow3<Tiny>(7)'
        name: pow3_9
        args:
        - 
          ValueExpr:
              value: '7'
              trits: '1-1000000'
              trytes: 'G99'
  # test 6561 = pow3<Tiny>(8)
  -
    source: 'test 6561 = pow3<Tiny>(8)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '6561'
          trits: '000000001'
          trytes: '99I'
    expr: 
      FuncExpr:
        source: 'pow3<Tiny>(8)'
        name: pow3_9
        args:
        - 
          ValueExpr:
              value: '8'
              trits: '-01000000'
              trytes: 'H99'
  # test 19683 = pow3<Int>(9)
  -
    source: 'test 19683 = pow3<Int>(9)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '19683'
          trits: '000000000100000000000000000'
          trytes: '999A99999'
    expr: 
      FuncExpr:
        source: 'pow3<Int>(9)'
        name: pow3_27
        args:
        - 
          ValueExpr:
              value: '9'
              trits: '001000000'
              trytes: 'I99'
  # test 59049 = pow3<Int>(10)
  -
    source: 'test 59049 = pow3<Int>(10)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '59049'
          trits: '000000000010000000000000000'
          trytes: '999C99999'
    expr: 
      FuncExpr:
        source: 'pow3<Int>(10)'
        name: pow3_27
        args:
        - 
          ValueExpr:
              value: '10'
              trits: '101000000'
              trytes: 'J99'
  # test 177147 = pow3<Int>(11)
  -
    source: 'test 177147 = pow3<Int>(11)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '177147'
          trits: '000000000001000000000000000'
          trytes: '999I99999'
    expr: 
      FuncExpr:
        source: 'pow3<Int>(11)'
        name: pow3_27
        args:
        - 
          ValueExpr:
              value: '11'
              trits: '-11000000'
              trytes: 'K99'
  # test 531441 = pow3<Int>(12)
  -
    source: 'test 531441 = pow3<Int>(12)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '531441'
          trits: '000000000000100000000000000'
          trytes: '9999A9999'
    expr: 
      FuncExpr:
        source: 'pow3<Int>(12)'
        name: pow3_27
        args:
        - 
          ValueExpr:
              value: '12'
              trits: '011000000'
              trytes: 'L99'
  # test 1594323 = pow3<Int>(13)
  -
    source: 'test 1594323 = pow3<Int>(13)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1594323'
          trits: '000000000000010000000000000'
          trytes: '9999C9999'
    expr: 
      FuncExpr:
        source: 'pow3<Int>(13)'
        name: pow3_27
        args:
        - 
          ValueExpr:
              value: '13'
              trits: '111000000'
              trytes: 'M99'
  # test 4782969 = pow3<Int>(14)
  -
    source: 'test 4782969 = pow3<Int>(14)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '4782969'
          trits: '000000000000001000000000000'
          trytes: '9999I9999'
    expr: 
      FuncExpr:
        source: 'pow3<Int>(14)'
        name: pow3_27
        args:
        - 
          ValueExpr:
              value: '14'
              trits: '---100000'
              trytes: 'NA9'
  # test 14348907 = pow3<Int>(15)
  -
    source: 'test 14348907 = pow3<Int>(15)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '14348907'
          trits: '000000000000000100000000000'
          trytes: '99999A999'
    expr: 
      FuncExpr:
        source: 'pow3<Int>(15)'
        name: pow3_27
        args:
        - 
          ValueExpr:
              value: '15'
              trits: '0--100000'
              trytes: 'OA9'
  # test 43046721 = pow3<Int>(16)
  -
    source: 'test 43046721 = pow3<Int>(16)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '43046721'
          trits: '000000000000000010000000000'
          trytes: '99999C999'
    expr: 
      FuncExpr:
        source: 'pow3<Int>(16)'
        name: pow3_27
        args:
        - 
          ValueExpr:
              value: '16'
              trits: '1--100000'
              trytes: 'PA9'
  # test 129140163 = pow3<Int>(17)
  -
    source: 'test 129140163 = pow3<Int>(17)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '129140163'
          trits: '000000000000000001000000000'
          trytes: '99999I999'
    expr: 
      FuncExpr:
        source: 'pow3<Int>(17)'
        name: pow3_27
        args:
        - 
          ValueExpr:
              value: '17'
              trits: '-0-100000'
              trytes: 'QA9'
  # test 387420489 = pow3<Int>(18)
  -
    source: 'test 387420489 = pow3<Int>(18)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '387420489'
          trits: '000000000000000000100000000'
          trytes: '999999A99'
    expr: 
      FuncExpr:
        source: 'pow3<Int>(18)'
        name: pow3_27
        args:
        - 
          ValueExpr:
              value: '18'
              trits: '00-100000'
              trytes: 'RA9'
  # test 1162261467 = pow3<Int>(19)
  -
    source: 'test 1162261467 = pow3<Int>(19)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1162261467'
          trits: '000000000000000000010000000'
          trytes: '999999C99'
    expr: 
      FuncExpr:
        source: 'pow3<Int>(19)'
        name: pow3_27
        args:
        - 
          ValueExpr:
              value: '19'
              trits: '10-100000'
              trytes: 'SA9'
  # test 3486784401 = pow3<Int>(20)
  -
    source: 'test 3486784401 = pow3<Int>(20)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3486784401'
          trits: '000000000000000000001000000'
          trytes: '999999I99'
    expr: 
      FuncExpr:
        source: 'pow3<Int>(20)'
        name: pow3_27
        args:
        - 
          ValueExpr:
              value: '20'
              trits: '-1-100000'
              trytes: 'TA9'
  # test 10460353203 = pow3<Int>(21)
  -
    source: 'test 10460353203 = pow3<Int>(21)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '10460353203'
          trits: '000000000000000000000100000'
          trytes: '9999999A9'
    expr: 
      FuncExpr:
        source: 'pow3<Int>(21)'
        name: pow3_27
        args:
        - 
          ValueExpr:
              value: '21'
              trits: '01-100000'
              trytes: 'UA9'
  # test - = sign<Tiny>(-99)
  -
    source: 'test - = sign<Tiny>(-99)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'sign<Tiny>(-99)'
        name: sign_9
        args:
        - 
          ValueExpr:
              value: '-99'
              trits: '001--0000'
              trytes: 'IW9'
  # test - = sign<Tiny>(-1)
  -
    source: 'test - = sign<Tiny>(-1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'sign<Tiny>(-1)'
        name: sign_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 0 = sign<Tiny>(0)
  -
    source: 'test 0 = sign<Tiny>(0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'sign<Tiny>(0)'
        name: sign_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 1 = sign<Tiny>(1)
  -
    source: 'test 1 = sign<Tiny>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'sign<Tiny>(1)'
        name: sign_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 1 = sign<Tiny>(99)
  -
    source: 'test 1 = sign<Tiny>(99)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'sign<Tiny>(99)'
        name: sign_9
        args:
        - 
          ValueExpr:
              value: '99'
              trits: '00-110000'
              trytes: 'RD9'
  # test - = sign<Tiny2>(-99)
  -
    source: 'test - = sign<Tiny2>(-99)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'sign<Tiny2>(-99)'
        name: sign_18
        args:
        - 
          ValueExpr:
              value: '-99'
              trits: '001--0000000000000'
              trytes: 'IW9999'
  # test - = sign<Tiny2>(-1)
  -
    source: 'test - = sign<Tiny2>(-1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-'
          trits: '-'
          trytes: 'Z'
    expr: 
      FuncExpr:
        source: 'sign<Tiny2>(-1)'
        name: sign_18
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000'
              trytes: 'Z99999'
  # test 0 = sign<Tiny2>(0)
  -
    source: 'test 0 = sign<Tiny2>(0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'sign<Tiny2>(0)'
        name: sign_18
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000'
              trytes: '999999'
  # test 1 = sign<Tiny2>(1)
  -
    source: 'test 1 = sign<Tiny2>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'sign<Tiny2>(1)'
        name: sign_18
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000'
              trytes: 'A99999'
  # test 1 = sign<Tiny2>(99)
  -
    source: 'test 1 = sign<Tiny2>(99)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'sign<Tiny2>(99)'
        name: sign_18
        args:
        - 
          ValueExpr:
              value: '99'
              trits: '00-110000000000000'
              trytes: 'RD9999'
  # test 0 = sub<Tiny>(0, 0)
  -
    source: 'test 0 = sub<Tiny>(0, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(0, 0)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test -1 = sub<Tiny>(0, 1)
  -
    source: 'test -1 = sub<Tiny>(0, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(0, 1)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 1 = sub<Tiny>(1, 0)
  -
    source: 'test 1 = sub<Tiny>(1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(1, 0)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 0 = sub<Tiny>(1, 1)
  -
    source: 'test 0 = sub<Tiny>(1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(1, 1)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test -2 = sub<Tiny>(0, 2)
  -
    source: 'test -2 = sub<Tiny>(0, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000'
          trytes: 'Y99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(0, 2)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 2 = sub<Tiny>(2, 0)
  -
    source: 'test 2 = sub<Tiny>(2, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(2, 0)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test -1 = sub<Tiny>(1, 2)
  -
    source: 'test -1 = sub<Tiny>(1, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(1, 2)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 1 = sub<Tiny>(2, 1)
  -
    source: 'test 1 = sub<Tiny>(2, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(2, 1)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test 0 = sub<Tiny>(2, 2)
  -
    source: 'test 0 = sub<Tiny>(2, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(2, 2)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 1 = sub<Tiny>(0, -1)
  -
    source: 'test 1 = sub<Tiny>(0, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(0, -1)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test -1 = sub<Tiny>(-1, 0)
  -
    source: 'test -1 = sub<Tiny>(-1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(-1, 0)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 0 = sub<Tiny>(-1, -1)
  -
    source: 'test 0 = sub<Tiny>(-1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(-1, -1)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 2 = sub<Tiny>(0, -2)
  -
    source: 'test 2 = sub<Tiny>(0, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(0, -2)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test -2 = sub<Tiny>(-2, 0)
  -
    source: 'test -2 = sub<Tiny>(-2, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000'
          trytes: 'Y99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(-2, 0)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000'
              trytes: '999'
  # test 1 = sub<Tiny>(-1, -2)
  -
    source: 'test 1 = sub<Tiny>(-1, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '100000000'
          trytes: 'A99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(-1, -2)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test -1 = sub<Tiny>(-2, -1)
  -
    source: 'test -1 = sub<Tiny>(-2, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000'
          trytes: 'Z99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(-2, -1)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 0 = sub<Tiny>(-2, -2)
  -
    source: 'test 0 = sub<Tiny>(-2, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(-2, -2)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test 2 = sub<Tiny>(1, -1)
  -
    source: 'test 2 = sub<Tiny>(1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2'
          trits: '-10000000'
          trytes: 'B99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(1, -1)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 3 = sub<Tiny>(1, -2)
  -
    source: 'test 3 = sub<Tiny>(1, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3'
          trits: '010000000'
          trytes: 'C99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(1, -2)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test 3 = sub<Tiny>(2, -1)
  -
    source: 'test 3 = sub<Tiny>(2, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3'
          trits: '010000000'
          trytes: 'C99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(2, -1)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 4 = sub<Tiny>(2, -2)
  -
    source: 'test 4 = sub<Tiny>(2, -2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '4'
          trits: '110000000'
          trytes: 'D99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(2, -2)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
  # test -2 = sub<Tiny>(-1, 1)
  -
    source: 'test -2 = sub<Tiny>(-1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-2'
          trits: '1-0000000'
          trytes: 'Y99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(-1, 1)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test -3 = sub<Tiny>(-1, 2)
  -
    source: 'test -3 = sub<Tiny>(-1, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-3'
          trits: '0-0000000'
          trytes: 'X99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(-1, 2)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test -3 = sub<Tiny>(-2, 1)
  -
    source: 'test -3 = sub<Tiny>(-2, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-3'
          trits: '0-0000000'
          trytes: 'X99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(-2, 1)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # test -4 = sub<Tiny>(-2, 2)
  -
    source: 'test -4 = sub<Tiny>(-2, 2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-4'
          trits: '--0000000'
          trytes: 'W99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(-2, 2)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000'
              trytes: 'Y99'
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000'
              trytes: 'B99'
  # test 0 = sub<Tiny>(3, 3)
  -
    source: 'test 0 = sub<Tiny>(3, 3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(3, 3)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
  # test 6 = sub<Tiny>(3, -3)
  -
    source: 'test 6 = sub<Tiny>(3, -3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '6'
          trits: '0-1000000'
          trytes: 'F99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(3, -3)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
  # test -6 = sub<Tiny>(-3, 3)
  -
    source: 'test -6 = sub<Tiny>(-3, 3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-6'
          trits: '01-000000'
          trytes: 'U99'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(-3, 3)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
        - 
          ValueExpr:
              value: '3'
              trits: '010000000'
              trytes: 'C99'
  # test 0 = sub<Tiny>(-3, -3)
  -
    source: 'test 0 = sub<Tiny>(-3, -3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'sub<Tiny>(-3, -3)'
        name: sub_9
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0000000'
              trytes: 'X99'
  # test 0 = rshift<Tryte>(0)
  -
    source: 'test 0 = rshift<Tryte>(0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'rshift<Tryte>(0)'
        name: rshift_3
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000'
              trytes: '9'
  # test 3 = rshift<Tryte>(1)
  -
    source: 'test 3 = rshift<Tryte>(1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3'
          trits: '010'
          trytes: 'C'
    expr: 
      FuncExpr:
        source: 'rshift<Tryte>(1)'
        name: rshift_3
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100'
              trytes: 'A'
  # test 6 = rshift<Tryte>(2)
  -
    source: 'test 6 = rshift<Tryte>(2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '6'
          trits: '0-1'
          trytes: 'F'
    expr: 
      FuncExpr:
        source: 'rshift<Tryte>(2)'
        name: rshift_3
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10'
              trytes: 'B'
  # test 9 = rshift<Tryte>(3)
  -
    source: 'test 9 = rshift<Tryte>(3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '9'
          trits: '001'
          trytes: 'I'
    expr: 
      FuncExpr:
        source: 'rshift<Tryte>(3)'
        name: rshift_3
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010'
              trytes: 'C'
  # test 0 = rshift<Tryte>(9)
  -
    source: 'test 0 = rshift<Tryte>(9)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'rshift<Tryte>(9)'
        name: rshift_3
        args:
        - 
          ValueExpr:
              value: '9'
              trits: '001'
              trytes: 'I'
  # test -3 = rshift<Tryte>(-1)
  -
    source: 'test -3 = rshift<Tryte>(-1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-3'
          trits: '0-0'
          trytes: 'X'
    expr: 
      FuncExpr:
        source: 'rshift<Tryte>(-1)'
        name: rshift_3
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00'
              trytes: 'Z'
  # test -6 = rshift<Tryte>(-2)
  -
    source: 'test -6 = rshift<Tryte>(-2)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-6'
          trits: '01-'
          trytes: 'U'
    expr: 
      FuncExpr:
        source: 'rshift<Tryte>(-2)'
        name: rshift_3
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0'
              trytes: 'Y'
  # test -9 = rshift<Tryte>(-3)
  -
    source: 'test -9 = rshift<Tryte>(-3)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-9'
          trits: '00-'
          trytes: 'R'
    expr: 
      FuncExpr:
        source: 'rshift<Tryte>(-3)'
        name: rshift_3
        args:
        - 
          ValueExpr:
              value: '-3'
              trits: '0-0'
              trytes: 'X'
  # test 0 = rshift<Tryte>(-9)
  -
    source: 'test 0 = rshift<Tryte>(-9)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'rshift<Tryte>(-9)'
        name: rshift_3
        args:
        - 
          ValueExpr:
              value: '-9'
              trits: '00-'
              trytes: 'R'
  # test 4374 = rshiftN<Tiny>(-115, 7)
  -
    source: 'test 4374 = rshiftN<Tiny>(-115, 7)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '4374'
          trits: '0000000-1'
          trytes: '99F'
    expr: 
      FuncExpr:
        source: 'rshiftN<Tiny>(-115, 7)'
        name: rshiftN_9
        args:
        - 
          ValueExpr:
              value: '-115'
              trits: '-1---0000'
              trytes: 'TW9'
        - 
          ValueExpr:
              value: '7'
              trits: '1-1000000'
              trytes: 'G99'
  # test 6561 = rshiftN<Tiny>(121, 8)
  -
    source: 'test 6561 = rshiftN<Tiny>(121, 8)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '6561'
          trits: '000000001'
          trytes: '99I'
    expr: 
      FuncExpr:
        source: 'rshiftN<Tiny>(121, 8)'
        name: rshiftN_9
        args:
        - 
          ValueExpr:
              value: '121'
              trits: '111110000'
              trytes: 'MD9'
        - 
          ValueExpr:
              value: '8'
              trits: '-01000000'
              trytes: 'H99'
  # test -6561 = rshiftN<Tiny>(-118, 8)
  -
    source: 'test -6561 = rshiftN<Tiny>(-118, 8)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-6561'
          trits: '00000000-'
          trytes: '99R'
    expr: 
      FuncExpr:
        source: 'rshiftN<Tiny>(-118, 8)'
        name: rshiftN_9
        args:
        - 
          ValueExpr:
              value: '-118'
              trits: '-0---0000'
              trytes: 'QW9'
        - 
          ValueExpr:
              value: '8'
              trits: '-01000000'
              trytes: 'H99'
  # test 0 = rshiftN<Tiny>(1, 9)
  -
    source: 'test 0 = rshiftN<Tiny>(1, 9)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000'
          trytes: '999'
    expr: 
      FuncExpr:
        source: 'rshiftN<Tiny>(1, 9)'
        name: rshiftN_9
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
        - 
          ValueExpr:
              value: '9'
              trits: '001000000'
              trytes: 'I99'
  # test 729 = rshiftN<Int>(3, 5)
  -
    source: 'test 729 = rshiftN<Int>(3, 5)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '729'
          trits: '000000100000000000000000000'
          trytes: '99A999999'
    expr: 
      FuncExpr:
        source: 'rshiftN<Int>(3, 5)'
        name: rshiftN_27
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000000000000000000000'
              trytes: 'C99999999'
        - 
          ValueExpr:
              value: '5'
              trits: '--1000000'
              trytes: 'E99'
  # test 2187 = rshiftN<Int>(3, 6)
  -
    source: 'test 2187 = rshiftN<Int>(3, 6)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '2187'
          trits: '000000010000000000000000000'
          trytes: '99C999999'
    expr: 
      FuncExpr:
        source: 'rshiftN<Int>(3, 6)'
        name: rshiftN_27
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000000000000000000000'
              trytes: 'C99999999'
        - 
          ValueExpr:
              value: '6'
              trits: '0-1000000'
              trytes: 'F99'
  # test 847288609443 = rshiftN<Int>(9, 23)
  -
    source: 'test 847288609443 = rshiftN<Int>(9, 23)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '847288609443'
          trits: '000000000000000000000000010'
          trytes: '99999999C'
    expr: 
      FuncExpr:
        source: 'rshiftN<Int>(9, 23)'
        name: rshiftN_27
        args:
        - 
          ValueExpr:
              value: '9'
              trits: '001000000000000000000000000'
              trytes: 'I99999999'
        - 
          ValueExpr:
              value: '23'
              trits: '--0100000'
              trytes: 'WA9'
  # test 847288609443 = rshiftN<Int>(3, 24)
  -
    source: 'test 847288609443 = rshiftN<Int>(3, 24)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '847288609443'
          trits: '000000000000000000000000010'
          trytes: '99999999C'
    expr: 
      FuncExpr:
        source: 'rshiftN<Int>(3, 24)'
        name: rshiftN_27
        args:
        - 
          ValueExpr:
              value: '3'
              trits: '010000000000000000000000000'
              trytes: 'C99999999'
        - 
          ValueExpr:
              value: '24'
              trits: '0-0100000'
              trytes: 'XA9'
  # test 847288609443 = rshiftN<Int>(1, 25)
  -
    source: 'test 847288609443 = rshiftN<Int>(1, 25)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '847288609443'
          trits: '000000000000000000000000010'
          trytes: '99999999C'
    expr: 
      FuncExpr:
        source: 'rshiftN<Int>(1, 25)'
        name: rshiftN_27
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
        - 
          ValueExpr:
              value: '25'
              trits: '1-0100000'
              trytes: 'YA9'
  # test 0 = rshiftN<Int>(1, 9841)
  -
    source: 'test 0 = rshiftN<Int>(1, 9841)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000000'
          trytes: '999999999'
    expr: 
      FuncExpr:
        source: 'rshiftN<Int>(1, 9841)'
        name: rshiftN_27
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
        - 
          ValueExpr:
              value: '9841'
              trits: '111111111'
              trytes: 'MMM'
  # test 0 = rshiftN<Int>(1, -1)
  -
    source: 'test 0 = rshiftN<Int>(1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000000'
          trytes: '999999999'
    expr: 
      FuncExpr:
        source: 'rshiftN<Int>(1, -1)'
        name: rshiftN_27
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 0 = rshiftN<Int>(1, -26)
  -
    source: 'test 0 = rshiftN<Int>(1, -26)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000000'
          trytes: '999999999'
    expr: 
      FuncExpr:
        source: 'rshiftN<Int>(1, -26)'
        name: rshiftN_27
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
        - 
          ValueExpr:
              value: '-26'
              trits: '100-00000'
              trytes: 'AZ9'
  # test 847288609443 = rshiftN<Huge>(9, 23)
  -
    source: 'test 847288609443 = rshiftN<Huge>(9, 23)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '847288609443'
          trits: '000000000000000000000000010000000000000000000000000000000000000000000000000000000'
          trytes: '99999999C999999999999999999'
    expr: 
      FuncExpr:
        source: 'rshiftN<Huge>(9, 23)'
        name: rshiftN_81
        args:
        - 
          ValueExpr:
              value: '9'
              trits: '001000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'I99999999999999999999999999'
        - 
          ValueExpr:
              value: '23'
              trits: '--0100000'
              trytes: 'WA9'
  # test 205891132094649 = rshiftN<Huge>(1, 30)
  -
    source: 'test 205891132094649 = rshiftN<Huge>(1, 30)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '205891132094649'
          trits: '000000000000000000000000000000100000000000000000000000000000000000000000000000000'
          trytes: '9999999999A9999999999999999'
    expr: 
      FuncExpr:
        source: 'rshiftN<Huge>(1, 30)'
        name: rshiftN_81
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'A99999999999999999999999999'
        - 
          ValueExpr:
              value: '30'
              trits: '010100000'
              trytes: 'CA9'
  # test 49269609804781974438694403402127765867 = rshiftN<Huge>(1, 79)
  -
    source: 'test 49269609804781974438694403402127765867 = rshiftN<Huge>(1, 79)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '49269609804781974438694403402127765867'
          trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000010'
          trytes: '99999999999999999999999999C'
    expr: 
      FuncExpr:
        source: 'rshiftN<Huge>(1, 79)'
        name: rshiftN_81
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'A99999999999999999999999999'
        - 
          ValueExpr:
              value: '79'
              trits: '1-0010000'
              trytes: 'YC9'
  # test 98539219609563948877388806804255531734 = rshiftN<Huge>(2, 79)
  -
    source: 'test 98539219609563948877388806804255531734 = rshiftN<Huge>(2, 79)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '98539219609563948877388806804255531734'
          trits: '0000000000000000000000000000000000000000000000000000000000000000000000000000000-1'
          trytes: '99999999999999999999999999F'
    expr: 
      FuncExpr:
        source: 'rshiftN<Huge>(2, 79)'
        name: rshiftN_81
        args:
        - 
          ValueExpr:
              value: '2'
              trits: '-10000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'B99999999999999999999999999'
        - 
          ValueExpr:
              value: '79'
              trits: '1-0010000'
              trytes: 'YC9'
  # test 147808829414345923316083210206383297601 = rshiftN<Huge>(1, 80)
  -
    source: 'test 147808829414345923316083210206383297601 = rshiftN<Huge>(1, 80)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '147808829414345923316083210206383297601'
          trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000001'
          trytes: '99999999999999999999999999I'
    expr: 
      FuncExpr:
        source: 'rshiftN<Huge>(1, 80)'
        name: rshiftN_81
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'A99999999999999999999999999'
        - 
          ValueExpr:
              value: '80'
              trits: '-00010000'
              trytes: 'ZC9'
  # test 147808829414345923316083210206383297601 = rshiftN<Huge>(-2, 80)
  -
    source: 'test 147808829414345923316083210206383297601 = rshiftN<Huge>(-2, 80)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '147808829414345923316083210206383297601'
          trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000001'
          trytes: '99999999999999999999999999I'
    expr: 
      FuncExpr:
        source: 'rshiftN<Huge>(-2, 80)'
        name: rshiftN_81
        args:
        - 
          ValueExpr:
              value: '-2'
              trits: '1-0000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'Y99999999999999999999999999'
        - 
          ValueExpr:
              value: '80'
              trits: '-00010000'
              trytes: 'ZC9'
  # test 147808829414345923316083210206383297601 = rshiftN<Huge>(7, 80)
  -
    source: 'test 147808829414345923316083210206383297601 = rshiftN<Huge>(7, 80)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '147808829414345923316083210206383297601'
          trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000001'
          trytes: '99999999999999999999999999I'
    expr: 
      FuncExpr:
        source: 'rshiftN<Huge>(7, 80)'
        name: rshiftN_81
        args:
        - 
          ValueExpr:
              value: '7'
              trits: '1-1000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'G99999999999999999999999999'
        - 
          ValueExpr:
              value: '80'
              trits: '-00010000'
              trytes: 'ZC9'
  # test 0 = rshiftN<Huge>(1, 81)
  -
    source: 'test 0 = rshiftN<Huge>(1, 81)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: '999999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'rshiftN<Huge>(1, 81)'
        name: rshiftN_81
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'A99999999999999999999999999'
        - 
          ValueExpr:
              value: '81'
              trits: '000010000'
              trytes: '9C9'
  # test 0 = rshiftN<Huge>(-4, 81)
  -
    source: 'test 0 = rshiftN<Huge>(-4, 81)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: '999999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'rshiftN<Huge>(-4, 81)'
        name: rshiftN_81
        args:
        - 
          ValueExpr:
              value: '-4'
              trits: '--0000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'W99999999999999999999999999'
        - 
          ValueExpr:
              value: '81'
              trits: '000010000'
              trytes: '9C9'
  # test -1 = rshiftN<Huge>(-4, -1)
  -
    source: 'test -1 = rshiftN<Huge>(-4, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '-1'
          trits: '-00000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: 'Z99999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'rshiftN<Huge>(-4, -1)'
        name: rshiftN_81
        args:
        - 
          ValueExpr:
              value: '-4'
              trits: '--0000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'W99999999999999999999999999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000'
              trytes: 'Z99'
  # test 29063214161986986067637023528620257232321357468243916695175073145996989031241146647825183302277227705597018408555209 = rshiftN<Hash>(1, 242)
  -
    source: 'test 29063214161986986067637023528620257232321357468243916695175073145996989031241146647825183302277227705597018408555209 = rshiftN<Hash>(1, 242)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '29063214161986986067637023528620257232321357468243916695175073145996989031241146647825183302277227705597018408555209'
          trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001'
          trytes: '99999999999999999999999999999999999999999999999999999999999999999999999999999999I'
    expr: 
      FuncExpr:
        source: 'rshiftN<Hash>(1, 242)'
        name: rshiftN_243
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'A99999999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '242'
              trits: '-00001000'
              trytes: 'ZI9'
  # test 0 = rshiftN<Hash>(1, 243)
  -
    source: 'test 0 = rshiftN<Hash>(1, 243)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
          trytes: '999999999999999999999999999999999999999999999999999999999999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'rshiftN<Hash>(1, 243)'
        name: rshiftN_243
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
              trytes: 'A99999999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '243'
              trits: '000001000'
              trytes: '9I9'
  # test 3 = rshiftN<Signature>(1, 1)
  -
    source: 'test 3 = rshiftN<Signature>(1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '3'
          trits
          trytes: 'C99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
    expr: 
      FuncExpr:
        source: 'rshiftN<Signature>(1, 1)'
        name: rshiftN_6561
        args:
        - 
          ValueExpr:
              value: '1'
              trits
              trytes
        - 
          ValueExpr:
              value: '1'
              trits: '100000000'
              trytes: 'A99'
  # testrshiftN<Signature>(1, 6560)
  -
    source: 'test 8230589863111210357596673796337694919342278319311694339603206000070559419320288282803635754418539885919066625428034127876279878883108899293640219865259974562639377556925189452547962215969109242904081001301652991642812190863757488809542687619521149555091077566285260699648566997913331124935750012683419480278265324704709064506370022752058994567791470216652915912131179781008338824413313755200770291122017484079151923804164743045513270690374568605873315465038870763718474232685399107776633885826318337776308280033394143959649004772869645934391822005526543183584730674577514082495314661439506384196082122301661045769099129696202042949647269663055873031056305227387753285002638309460321625291656479440763560995099953780402412487567278739610453616399023629005961546332922944143234837595601897832605380700674361464139900876451577103542643344780887563016479601601849045235298898392360352354448944966526296491666860400483983364177137479279611165885150978109929781633823287141532442389797778750281883498957595883145866514560546862614637990698391035629831441657989128165461126890969633468745609968611854024637956913515176846344657641309213895543788363949425099727704219650360786829092902664657118849536286504571694021572553319861748997959201156207500966096912786365345150746748045862670481557267240482528172064414439108690967464719299114062906464047781432373225431109414260938796501124243869291997775654899563459305584868404961677175271971493392372983350748100871923481520957095938091813451874643140888185097815855547240261834590570324243272485377476090014510927881706560442597225466052517846087895220668894181562683652079116948166892799408709801801042424134908577896777139153401278930879135880514822532358202558778548252783006271295931464373789833415422113378042684704524253395000342090965255544762323691502050462533804539814165342272956986221385782145782363200315158022350305517462009739378033357321470549770046377498141323823641131792933368552519825723390686549876232662466437058452822400184550499912050260045550602856865897916675490563823577217000164393136913061366882873165871401539128696588812887805902619051328183139481136471472224218495757168331941333361455862987536101539535647097997155726862989767857044497698572175083932744256831153747470654965083319524363984804414976483500695379951004960906022919265992223880029915313687225285433958554741308836572625273780224870440932103387756203009852590231346524745163512263571785009586913259165550005823124131028681760343301055045410250136397638769001026568034317588052924444253288420947455060462115170063326253249775306282542126030257143131854795644554131517751559505121069331658632092163376707006451515250366124576319586412301719395394682808987121009650531435946765331309941905485085341518629590809196737886352113435189625958458635685474283505665755841522714007584095553600387889475107826541600166342039596399858689745490575489128682332108686685428290263771574420481929338652087236062661303355816352146870133697373985760944519201797551547535706810691428423217228199287358988321123067723175982098664777426384449556211638403569384651112240360284070600778878581456351168231660781326479363201 = rshiftN<Signature>(1, 6560)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '8230589863111210357596673796337694919342278319311694339603206000070559419320288282803635754418539885919066625428034127876279878883108899293640219865259974562639377556925189452547962215969109242904081001301652991642812190863757488809542687619521149555091077566285260699648566997913331124935750012683419480278265324704709064506370022752058994567791470216652915912131179781008338824413313755200770291122017484079151923804164743045513270690374568605873315465038870763718474232685399107776633885826318337776308280033394143959649004772869645934391822005526543183584730674577514082495314661439506384196082122301661045769099129696202042949647269663055873031056305227387753285002638309460321625291656479440763560995099953780402412487567278739610453616399023629005961546332922944143234837595601897832605380700674361464139900876451577103542643344780887563016479601601849045235298898392360352354448944966526296491666860400483983364177137479279611165885150978109929781633823287141532442389797778750281883498957595883145866514560546862614637990698391035629831441657989128165461126890969633468745609968611854024637956913515176846344657641309213895543788363949425099727704219650360786829092902664657118849536286504571694021572553319861748997959201156207500966096912786365345150746748045862670481557267240482528172064414439108690967464719299114062906464047781432373225431109414260938796501124243869291997775654899563459305584868404961677175271971493392372983350748100871923481520957095938091813451874643140888185097815855547240261834590570324243272485377476090014510927881706560442597225466052517846087895220668894181562683652079116948166892799408709801801042424134908577896777139153401278930879135880514822532358202558778548252783006271295931464373789833415422113378042684704524253395000342090965255544762323691502050462533804539814165342272956986221385782145782363200315158022350305517462009739378033357321470549770046377498141323823641131792933368552519825723390686549876232662466437058452822400184550499912050260045550602856865897916675490563823577217000164393136913061366882873165871401539128696588812887805902619051328183139481136471472224218495757168331941333361455862987536101539535647097997155726862989767857044497698572175083932744256831153747470654965083319524363984804414976483500695379951004960906022919265992223880029915313687225285433958554741308836572625273780224870440932103387756203009852590231346524745163512263571785009586913259165550005823124131028681760343301055045410250136397638769001026568034317588052924444253288420947455060462115170063326253249775306282542126030257143131854795644554131517751559505121069331658632092163376707006451515250366124576319586412301719395394682808987121009650531435946765331309941905485085341518629590809196737886352113435189625958458635685474283505665755841522714007584095553600387889475107826541600166342039596399858689745490575489128682332108686685428290263771574420481929338652087236062661303355816352146870133697373985760944519201797551547535706810691428423217228199287358988321123067723175982098664777426384449556211638403569384651112240360284070600778878581456351168231660781326479363201'
          trits
          trytes
    expr: 
      FuncExpr:
        source: 'rshiftN<Signature>(1, 6560)'
        name: rshiftN_6561
        args:
        - 
          ValueExpr:
              value: '1'
              trits
              trytes
        - 
          ValueExpr:
              value: '6560'
              trits: '-00000001'
              trytes: 'Z9I'
  # testrshiftN<Signature>(-2, 6560)
  -
    source: 'testrshiftN<Signature>(-2, 6560)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '8230589863111210357596673796337694919342278319311694339603206000070559419320288282803635754418539885919066625428034127876279878883108899293640219865259974562639377556925189452547962215969109242904081001301652991642812190863757488809542687619521149555091077566285260699648566997913331124935750012683419480278265324704709064506370022752058994567791470216652915912131179781008338824413313755200770291122017484079151923804164743045513270690374568605873315465038870763718474232685399107776633885826318337776308280033394143959649004772869645934391822005526543183584730674577514082495314661439506384196082122301661045769099129696202042949647269663055873031056305227387753285002638309460321625291656479440763560995099953780402412487567278739610453616399023629005961546332922944143234837595601897832605380700674361464139900876451577103542643344780887563016479601601849045235298898392360352354448944966526296491666860400483983364177137479279611165885150978109929781633823287141532442389797778750281883498957595883145866514560546862614637990698391035629831441657989128165461126890969633468745609968611854024637956913515176846344657641309213895543788363949425099727704219650360786829092902664657118849536286504571694021572553319861748997959201156207500966096912786365345150746748045862670481557267240482528172064414439108690967464719299114062906464047781432373225431109414260938796501124243869291997775654899563459305584868404961677175271971493392372983350748100871923481520957095938091813451874643140888185097815855547240261834590570324243272485377476090014510927881706560442597225466052517846087895220668894181562683652079116948166892799408709801801042424134908577896777139153401278930879135880514822532358202558778548252783006271295931464373789833415422113378042684704524253395000342090965255544762323691502050462533804539814165342272956986221385782145782363200315158022350305517462009739378033357321470549770046377498141323823641131792933368552519825723390686549876232662466437058452822400184550499912050260045550602856865897916675490563823577217000164393136913061366882873165871401539128696588812887805902619051328183139481136471472224218495757168331941333361455862987536101539535647097997155726862989767857044497698572175083932744256831153747470654965083319524363984804414976483500695379951004960906022919265992223880029915313687225285433958554741308836572625273780224870440932103387756203009852590231346524745163512263571785009586913259165550005823124131028681760343301055045410250136397638769001026568034317588052924444253288420947455060462115170063326253249775306282542126030257143131854795644554131517751559505121069331658632092163376707006451515250366124576319586412301719395394682808987121009650531435946765331309941905485085341518629590809196737886352113435189625958458635685474283505665755841522714007584095553600387889475107826541600166342039596399858689745490575489128682332108686685428290263771574420481929338652087236062661303355816352146870133697373985760944519201797551547535706810691428423217228199287358988321123067723175982098664777426384449556211638403569384651112240360284070600778878581456351168231660781326479363201'
          trits
          trytes
    expr: 
      FuncExpr:
        source: 'rshiftN<Signature>(-2, 6560)'
        name: rshiftN_6561
        args:
        - 
          ValueExpr:
              value: '-2'
              trits
              trytes: 'Y99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '6560'
              trits: '-00000001'
              trytes: 'Z9I'
  # test 0 = rshiftN<Signature>(1, 6561)
  -
    source: 'test 0 = rshiftN<Signature>(1, 6561)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits
          trytes
    expr: 
      FuncExpr:
        source: 'rshiftN<Signature>(1, 6561)'
        name: rshiftN_6561
        args:
        - 
          ValueExpr:
              value: '1'
              trits
              trytes: 'A99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
        - 
          ValueExpr:
              value: '6561'
              trits: '000000001'
              trytes: '99I'
  # test false = unequal<Int>(-1, -1)
  -
    source: 'test false = unequal<Int>(-1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'unequal<Int>(-1, -1)'
        name: unequal_27
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000000000000'
              trytes: 'Z99999999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000000000000'
              trytes: 'Z99999999'
  # test true = unequal<Int>(-1, 0)
  -
    source: 'test true = unequal<Int>(-1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'unequal<Int>(-1, 0)'
        name: unequal_27
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000000000000'
              trytes: 'Z99999999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000'
              trytes: '999999999'
  # test true = unequal<Int>(-1, 1)
  -
    source: 'test true = unequal<Int>(-1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'unequal<Int>(-1, 1)'
        name: unequal_27
        args:
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000000000000'
              trytes: 'Z99999999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
  # test true = unequal<Int>(0, -1)
  -
    source: 'test true = unequal<Int>(0, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'unequal<Int>(0, -1)'
        name: unequal_27
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000'
              trytes: '999999999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000000000000'
              trytes: 'Z99999999'
  # test false = unequal<Int>(0, 0)
  -
    source: 'test false = unequal<Int>(0, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'unequal<Int>(0, 0)'
        name: unequal_27
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000'
              trytes: '999999999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000'
              trytes: '999999999'
  # test true = unequal<Int>(0, 1)
  -
    source: 'test true = unequal<Int>(0, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'unequal<Int>(0, 1)'
        name: unequal_27
        args:
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000'
              trytes: '999999999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
  # test true = unequal<Int>(1, -1)
  -
    source: 'test true = unequal<Int>(1, -1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'unequal<Int>(1, -1)'
        name: unequal_27
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
        - 
          ValueExpr:
              value: '-1'
              trits: '-00000000000000000000000000'
              trytes: 'Z99999999'
  # test true = unequal<Int>(1, 0)
  -
    source: 'test true = unequal<Int>(1, 0)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'unequal<Int>(1, 0)'
        name: unequal_27
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
        - 
          ValueExpr:
              value: '0'
              trits: '000000000000000000000000000'
              trytes: '999999999'
  # test false = unequal<Int>(1, 1)
  -
    source: 'test false = unequal<Int>(1, 1)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'unequal<Int>(1, 1)'
        name: unequal_27
        args:
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
        - 
          ValueExpr:
              value: '1'
              trits: '100000000000000000000000000'
              trytes: 'A99999999'
  # test true = unequal<Int>(10, 20)
  -
    source: 'test true = unequal<Int>(10, 20)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'unequal<Int>(10, 20)'
        name: unequal_27
        args:
        - 
          ValueExpr:
              value: '10'
              trits: '101000000000000000000000000'
              trytes: 'J99999999'
        - 
          ValueExpr:
              value: '20'
              trits: '-1-100000000000000000000000'
              trytes: 'TA9999999'
  # test true = unequal<Int>(-30, 40)
  -
    source: 'test true = unequal<Int>(-30, 40)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'unequal<Int>(-30, 40)'
        name: unequal_27
        args:
        - 
          ValueExpr:
              value: '-30'
              trits: '0-0-00000000000000000000000'
              trytes: 'XZ9999999'
        - 
          ValueExpr:
              value: '40'
              trits: '111100000000000000000000000'
              trytes: 'MA9999999'
  # test true = unequal<Int>(50, -60)
  -
    source: 'test true = unequal<Int>(50, -60)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'unequal<Int>(50, -60)'
        name: unequal_27
        args:
        - 
          ValueExpr:
              value: '50'
              trits: '--0-10000000000000000000000'
              trytes: 'WB9999999'
        - 
          ValueExpr:
              value: '-60'
              trits: '01-1-0000000000000000000000'
              trytes: 'UY9999999'
  # test true = unequal<Int>(-70, -80)
  -
    source: 'test true = unequal<Int>(-70, -80)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '1'
          trits: '1'
          trytes: 'A'
    expr: 
      FuncExpr:
        source: 'unequal<Int>(-70, -80)'
        name: unequal_27
        args:
        - 
          ValueExpr:
              value: '-70'
              trits: '-110-0000000000000000000000'
              trytes: 'KX9999999'
        - 
          ValueExpr:
              value: '-80'
              trits: '1000-0000000000000000000000'
              trytes: 'AX9999999'
  # test false = unequal<Int>(90, 90)
  -
    source: 'test false = unequal<Int>(90, 90)'
    isFloat: false
    expected: 
      ValueExpr:
          value: '0'
          trits: '0'
          trytes: '9'
    expr: 
      FuncExpr:
        source: 'unequal<Int>(90, 90)'
        name: unequal_27
        args:
        - 
          ValueExpr:
              value: '90'
              trits: '001010000000000000000000000'
              trytes: 'IC9999999'
        - 
          ValueExpr:
              value: '90'
              trits: '001010000000000000000000000'
              trytes: 'IC9999999'
